!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.videojs=e()}(this,function(){function t(t,e){return e={exports:{}},t(e,e.exports),e.exports}function e(t,e){He(t).forEach(function(i){return e(t[i],i)})}function i(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return He(t).reduce(function(i,n){return e(i,t[n],n)},i)}function n(t){for(var i=arguments.length,n=Array(i>1?i-1:0),r=1;r<i;r++)n[r-1]=arguments[r];return Object.assign?Object.assign.apply(Object,[t].concat(n)):(n.forEach(function(i){i&&e(i,function(e,i){t[i]=e})}),t)}function r(t){return!!t&&"object"===("undefined"==typeof t?"undefined":Ne(t))}function o(t){return r(t)&&"[object Object]"===Re.call(t)&&t.constructor===Object}function s(t){return t.replace(/\n\r?\s*/g,"")}function a(t,e){if(!t||!e)return"";if("function"==typeof se.getComputedStyle){var i=se.getComputedStyle(t);return i?i[e]:""}return t.currentStyle[e]||""}function l(t){return"string"==typeof t&&/\S/.test(t)}function u(t){if(/\s/.test(t))throw new Error("class has illegal whitespace characters")}function c(t){return new RegExp("(^|\\s)"+t+"($|\\s)")}function d(){return de===se.document&&"undefined"!=typeof de.createElement}function p(t){return r(t)&&1===t.nodeType}function h(){try{return se.parent!==se.self}catch(t){return!0}}function f(t){return function(e,i){if(!l(e))return de[t](null);l(i)&&(i=de.querySelector(i));var n=p(i)?i:de;return n[t]&&n[t](e)}}function v(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments[3],r=de.createElement(t);return Object.getOwnPropertyNames(e).forEach(function(t){var i=e[t];t.indexOf("aria-")!==-1||"role"===t||"type"===t?(qe.warn(Xe(Ye,t,i)),r.setAttribute(t,i)):"textContent"===t?y(r,i):r[t]=i}),Object.getOwnPropertyNames(i).forEach(function(t){r.setAttribute(t,i[t])}),n&&N(r,n),r}function y(t,e){return"undefined"==typeof t.textContent?t.innerText=e:t.textContent=e,t}function g(t,e){e.firstChild?e.insertBefore(t,e.firstChild):e.appendChild(t)}function m(t,e){return u(e),t.classList?t.classList.contains(e):c(e).test(t.className)}function b(t,e){return t.classList?t.classList.add(e):m(t,e)||(t.className=(t.className+" "+e).trim()),t}function _(t,e){return t.classList?t.classList.remove(e):(u(e),t.className=t.className.split(/\s+/).filter(function(t){return t!==e}).join(" ")),t}function T(t,e,i){var n=m(t,e);if("function"==typeof i&&(i=i(t,e)),"boolean"!=typeof i&&(i=!n),i!==n)return i?b(t,e):_(t,e),t}function w(t,e){Object.getOwnPropertyNames(e).forEach(function(i){var n=e[i];null===n||"undefined"==typeof n||n===!1?t.removeAttribute(i):t.setAttribute(i,n===!0?"":n)})}function k(t){var e={},i=",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";if(t&&t.attributes&&t.attributes.length>0)for(var n=t.attributes,r=n.length-1;r>=0;r--){var o=n[r].name,s=n[r].value;"boolean"!=typeof t[o]&&i.indexOf(","+o+",")===-1||(s=null!==s),e[o]=s}return e}function C(t,e){return t.getAttribute(e)}function S(t,e,i){t.setAttribute(e,i)}function E(t,e){t.removeAttribute(e)}function x(){de.body.focus(),de.onselectstart=function(){return!1}}function j(){de.onselectstart=function(){return!0}}function O(t){if(t&&t.getBoundingClientRect&&t.parentNode){var e=t.getBoundingClientRect(),i={};return["bottom","height","left","right","top","width"].forEach(function(t){void 0!==e[t]&&(i[t]=e[t])}),i.height||(i.height=parseFloat(a(t,"height"))),i.width||(i.width=parseFloat(a(t,"width"))),i}}function A(t){var e=void 0;if(t.getBoundingClientRect&&t.parentNode&&(e=t.getBoundingClientRect()),!e)return{left:0,top:0};var i=de.documentElement,n=de.body,r=i.clientLeft||n.clientLeft||0,o=se.pageXOffset||n.scrollLeft,s=e.left+o-r,a=i.clientTop||n.clientTop||0,l=se.pageYOffset||n.scrollTop,u=e.top+l-a;return{left:Math.round(s),top:Math.round(u)}}function P(t,e){var i={},n=A(t),r=t.offsetWidth,o=t.offsetHeight,s=n.top,a=n.left,l=e.pageY,u=e.pageX;return e.changedTouches&&(u=e.changedTouches[0].pageX,l=e.changedTouches[0].pageY),i.y=Math.max(0,Math.min(1,(s-l+o)/o)),i.x=Math.max(0,Math.min(1,(u-a)/r)),i}function D(t){return r(t)&&3===t.nodeType}function M(t){for(;t.firstChild;)t.removeChild(t.firstChild);return t}function I(t){return"function"==typeof t&&(t=t()),(Array.isArray(t)?t:[t]).map(function(t){return"function"==typeof t&&(t=t()),p(t)||D(t)?t:"string"==typeof t&&/\S/.test(t)?de.createTextNode(t):void 0}).filter(function(t){return t})}function N(t,e){return I(e).forEach(function(e){return t.appendChild(e)}),t}function L(t,e){return N(M(t),e)}function F(){return Qe++}function B(t){var e=t[ti];return e||(e=t[ti]=F()),Ze[e]||(Ze[e]={}),Ze[e]}function $(t){var e=t[ti];return!!e&&!!Object.getOwnPropertyNames(Ze[e]).length}function R(t){var e=t[ti];if(e){delete Ze[e];try{delete t[ti]}catch(i){t.removeAttribute?t.removeAttribute(ti):t[ti]=null}}}function H(t,e){var i=B(t);0===i.handlers[e].length&&(delete i.handlers[e],t.removeEventListener?t.removeEventListener(e,i.dispatcher,!1):t.detachEvent&&t.detachEvent("on"+e,i.dispatcher)),Object.getOwnPropertyNames(i.handlers).length<=0&&(delete i.handlers,delete i.dispatcher,delete i.disabled),0===Object.getOwnPropertyNames(i).length&&R(t)}function z(t,e,i,n){i.forEach(function(i){t(e,i,n)})}function V(t){function e(){return!0}function i(){return!1}if(!t||!t.isPropagationStopped){var n=t||se.event;t={};for(var r in n)"layerX"!==r&&"layerY"!==r&&"keyLocation"!==r&&"webkitMovementX"!==r&&"webkitMovementY"!==r&&("returnValue"===r&&n.preventDefault||(t[r]=n[r]));if(t.target||(t.target=t.srcElement||de),t.relatedTarget||(t.relatedTarget=t.fromElement===t.target?t.toElement:t.fromElement),t.preventDefault=function(){n.preventDefault&&n.preventDefault(),t.returnValue=!1,n.returnValue=!1,t.defaultPrevented=!0},t.defaultPrevented=!1,t.stopPropagation=function(){n.stopPropagation&&n.stopPropagation(),t.cancelBubble=!0,n.cancelBubble=!0,t.isPropagationStopped=e},t.isPropagationStopped=i,t.stopImmediatePropagation=function(){n.stopImmediatePropagation&&n.stopImmediatePropagation(),t.isImmediatePropagationStopped=e,t.stopPropagation()},t.isImmediatePropagationStopped=i,null!==t.clientX&&void 0!==t.clientX){var o=de.documentElement,s=de.body;t.pageX=t.clientX+(o&&o.scrollLeft||s&&s.scrollLeft||0)-(o&&o.clientLeft||s&&s.clientLeft||0),t.pageY=t.clientY+(o&&o.scrollTop||s&&s.scrollTop||0)-(o&&o.clientTop||s&&s.clientTop||0)}t.which=t.charCode||t.keyCode,null!==t.button&&void 0!==t.button&&(t.button=1&t.button?0:4&t.button?1:2&t.button?2:0)}return t}function U(t,e,i){if(Array.isArray(e))return z(U,t,e,i);var n=B(t);if(n.handlers||(n.handlers={}),n.handlers[e]||(n.handlers[e]=[]),i.guid||(i.guid=F()),n.handlers[e].push(i),n.dispatcher||(n.disabled=!1,n.dispatcher=function(e,i){if(!n.disabled){e=V(e);var r=n.handlers[e.type];if(r)for(var o=r.slice(0),s=0,a=o.length;s<a&&!e.isImmediatePropagationStopped();s++)try{o[s].call(t,e,i)}catch(l){qe.error(l)}}}),1===n.handlers[e].length)if(t.addEventListener){var r=!1;ei&&ii.indexOf(e)>-1&&(r={passive:!0}),t.addEventListener(e,n.dispatcher,r)}else t.attachEvent&&t.attachEvent("on"+e,n.dispatcher)}function W(t,e,i){if($(t)){var n=B(t);if(n.handlers){if(Array.isArray(e))return z(W,t,e,i);var r=function(e){n.handlers[e]=[],H(t,e)};if(void 0!==e){var o=n.handlers[e];if(o){if(!i)return void r(e);if(i.guid)for(var s=0;s<o.length;s++)o[s].guid===i.guid&&o.splice(s--,1);H(t,e)}}else for(var a in n.handlers)Object.prototype.hasOwnProperty.call(n.handlers||{},a)&&r(a)}}}function q(t,e,i){var n=$(t)?B(t):{},r=t.parentNode||t.ownerDocument;if("string"==typeof e&&(e={type:e,target:t}),e=V(e),n.dispatcher&&n.dispatcher.call(t,e,i),r&&!e.isPropagationStopped()&&e.bubbles===!0)q.call(null,r,e,i);else if(!r&&!e.defaultPrevented){var o=B(e.target);e.target[e.type]&&(o.disabled=!0,"function"==typeof e.target[e.type]&&e.target[e.type](),o.disabled=!1)}return!e.defaultPrevented}function X(t,e,i){if(Array.isArray(e))return z(X,t,e,i);var n=function r(){W(t,e,r),i.apply(this,arguments)};n.guid=i.guid=i.guid||F(),U(t,e,n)}function Y(t,e){e&&(oi=e),se.setTimeout(si,t)}function G(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=e.eventBusKey;if(i){if(!t[i].nodeName)throw new Error('The eventBusKey "'+i+'" does not refer to an element.');t.eventBusEl_=t[i]}else t.eventBusEl_=v("span",{className:"vjs-event-bus"});return n(t,bi),t.on("dispose",function(){return t.off()}),t}function K(t,e){return n(t,_i),t.state=n({},t.state,e),"function"==typeof t.handleStateChanged&&pi(t)&&t.on("statechanged",t.handleStateChanged),t}function J(t){return"string"!=typeof t?t:t.charAt(0).toUpperCase()+t.slice(1)}function Q(t,e){return J(t)===J(e)}function Z(){for(var t={},i=arguments.length,n=Array(i),r=0;r<i;r++)n[r]=arguments[r];return n.forEach(function(i){i&&e(i,function(e,i){return o(e)?(o(t[i])||(t[i]={}),void(t[i]=Z(t[i],e))):void(t[i]=e)})}),t}function tt(t,e,i){if("number"!=typeof e||e<0||e>i)throw new Error("Failed to execute '"+t+"' on 'TimeRanges': The index provided ("+e+") is non-numeric or out of bounds (0-"+i+").")}function et(t,e,i,n){return tt(t,n,i.length-1),i[n][e]}function it(t){return void 0===t||0===t.length?{length:0,start:function(){throw new Error("This TimeRanges object is empty")},end:function(){throw new Error("This TimeRanges object is empty")}}:{length:t.length,start:et.bind(null,"start",0,t),end:et.bind(null,"end",1,t)}}function nt(t,e){return Array.isArray(t)?it(t):void 0===t||void 0===e?it():it([[t,e]])}function rt(t,e){var i=0,n=void 0,r=void 0;if(!e)return 0;t&&t.length||(t=nt(0,0));for(var o=0;o<t.length;o++)n=t.start(o),r=t.end(o),r>e&&(r=e),i+=r-n;return i/e}function ot(t){return t instanceof ot?t:("number"==typeof t?this.code=t:"string"==typeof t?this.message=t:r(t)&&("number"==typeof t.code&&(this.code=t.code),n(this,t)),void(this.message||(this.message=ot.defaultMessages[this.code]||"")))}function st(t,e){var i,n=null;try{i=JSON.parse(t,e)}catch(r){n=r}return[n,i]}function at(t){var e=rn.call(t);return"[object Function]"===e||"function"==typeof t&&"[object RegExp]"!==e||"undefined"!=typeof window&&(t===window.setTimeout||t===window.alert||t===window.confirm||t===window.prompt)}function lt(t,e,i){if(!nn(e))throw new TypeError("iterator must be a function");arguments.length<3&&(i=this),"[object Array]"===an.call(t)?ut(t,e,i):"string"==typeof t?ct(t,e,i):dt(t,e,i)}function ut(t,e,i){for(var n=0,r=t.length;n<r;n++)ln.call(t,n)&&e.call(i,t[n],n,t)}function ct(t,e,i){for(var n=0,r=t.length;n<r;n++)e.call(i,t.charAt(n),n,t)}function dt(t,e,i){for(var n in t)ln.call(t,n)&&e.call(i,t[n],n,t)}function pt(){for(var t={},e=0;e<arguments.length;e++){var i=arguments[e];for(var n in i)pn.call(i,n)&&(t[n]=i[n])}return t}function ht(t,e){for(var i=0;i<t.length;i++)e(t[i])}function ft(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function vt(t,e,i){var n=t;return nn(e)?(i=e,"string"==typeof t&&(n={uri:t})):n=dn(e,{uri:t}),n.callback=i,n}function yt(t,e,i){return e=vt(t,e,i),gt(e)}function gt(t){function e(){4===a.readyState&&setTimeout(r,0)}function i(){var t=void 0;if(t=a.response?a.response:a.responseText||mt(a),y)try{t=JSON.parse(t)}catch(e){}return t}function n(t){return clearTimeout(c),t instanceof Error||(t=new Error(""+(t||"Unknown XMLHttpRequest Error"))),t.statusCode=0,s(t,g)}function r(){if(!u){var e;clearTimeout(c),e=t.useXDR&&void 0===a.status?200:1223===a.status?204:a.status;var n=g,r=null;return 0!==e?(n={body:i(),statusCode:e,method:p,headers:{},url:d,rawRequest:a},a.getAllResponseHeaders&&(n.headers=cn(a.getAllResponseHeaders()))):r=new Error("Internal XMLHttpRequest Error"),s(r,n,n.body)}}if("undefined"==typeof t.callback)throw new Error("callback argument missing");var o=!1,s=function(e,i,n){o||(o=!0,t.callback(e,i,n))},a=t.xhr||null;a||(a=t.cors||t.useXDR?new yt.XDomainRequest:new yt.XMLHttpRequest);var l,u,c,d=a.url=t.uri||t.url,p=a.method=t.method||"GET",h=t.body||t.data,f=a.headers=t.headers||{},v=!!t.sync,y=!1,g={body:void 0,headers:{},statusCode:0,method:p,url:d,rawRequest:a};if("json"in t&&t.json!==!1&&(y=!0,f.accept||f.Accept||(f.Accept="application/json"),"GET"!==p&&"HEAD"!==p&&(f["content-type"]||f["Content-Type"]||(f["Content-Type"]="application/json"),h=JSON.stringify(t.json===!0?h:t.json))),a.onreadystatechange=e,a.onload=r,a.onerror=n,a.onprogress=function(){},a.onabort=function(){u=!0},a.ontimeout=n,a.open(p,d,!v,t.username,t.password),v||(a.withCredentials=!!t.withCredentials),!v&&t.timeout>0&&(c=setTimeout(function(){if(!u){u=!0,a.abort("timeout");var t=new Error("XMLHttpRequest timeout");t.code="ETIMEDOUT",n(t)}},t.timeout)),a.setRequestHeader)for(l in f)f.hasOwnProperty(l)&&a.setRequestHeader(l,f[l]);else if(t.headers&&!ft(t.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in t&&(a.responseType=t.responseType),"beforeSend"in t&&"function"==typeof t.beforeSend&&t.beforeSend(a),a.send(h||null),a}function mt(t){if("document"===t.responseType)return t.responseXML;var e=t.responseXML&&"parsererror"===t.responseXML.documentElement.nodeName;return""!==t.responseType||e?null:t.responseXML}function bt(){}function _t(t,e){this.name="ParsingError",this.code=t.code,this.message=e||t.message}function Tt(t){function e(t,e,i,n){return 3600*(0|t)+60*(0|e)+(0|i)+(0|n)/1e3}var i=t.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return i?i[3]?e(i[1],i[2],i[3].replace(":",""),i[4]):i[1]>59?e(i[1],i[2],0,i[4]):e(0,i[1],i[2],i[4]):null}function wt(){this.values=xn(null)}function kt(t,e,i,n){var r=n?t.split(n):[t];for(var o in r)if("string"==typeof r[o]){var s=r[o].split(i);if(2===s.length){var a=s[0],l=s[1];e(a,l)}}}function Ct(t,e,i){function n(){var e=Tt(t);if(null===e)throw new _t(_t.Errors.BadTimeStamp,"Malformed timestamp: "+s);return t=t.replace(/^[^\sa-zA-Z-]+/,""),e}function r(t,e){var n=new wt;kt(t,function(t,e){switch(t){case"region":for(var r=i.length-1;r>=0;r--)if(i[r].id===e){n.set(t,i[r].region);break}break;case"vertical":n.alt(t,e,["rl","lr"]);break;case"line":var o=e.split(","),s=o[0];n.integer(t,s),n.percent(t,s)?n.set("snapToLines",!1):null,n.alt(t,s,["auto"]),2===o.length&&n.alt("lineAlign",o[1],["start","middle","end"]);break;case"position":o=e.split(","),n.percent(t,o[0]),2===o.length&&n.alt("positionAlign",o[1],["start","middle","end"]);break;case"size":n.percent(t,e);break;case"align":n.alt(t,e,["start","middle","end","left","right"])}},/:/,/\s/),e.region=n.get("region",null),e.vertical=n.get("vertical",""),e.line=n.get("line","auto"),e.lineAlign=n.get("lineAlign","start"),e.snapToLines=n.get("snapToLines",!0),e.size=n.get("size",100),e.align=n.get("align","middle"),e.position=n.get("position",{start:0,left:0,middle:50,end:100,right:100},e.align),e.positionAlign=n.get("positionAlign",{start:"start",left:"start",middle:"middle",end:"end",right:"end"},e.align)}function o(){t=t.replace(/^\s+/,"")}var s=t;if(o(),e.startTime=n(),o(),"-->"!==t.substr(0,3))throw new _t(_t.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '-->'): "+s);t=t.substr(3),o(),e.endTime=n(),o(),r(t,e)}function St(t,e){function i(){function t(t){return e=e.substr(t.length),t}if(!e)return null;var i=e.match(/^([^<]*)(<[^>]+>?)?/);return t(i[1]?i[1]:i[2])}function n(t){return jn[t]}function r(t){for(;h=t.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);)t=t.replace(h[0],n);return t}function o(t,e){return!Pn[e.localName]||Pn[e.localName]===t.localName}function s(e,i){var n=On[e];if(!n)return null;var r=t.document.createElement(n);r.localName=n;var o=An[e];return o&&i&&(r[o]=i.trim()),r}for(var a,l=t.document.createElement("div"),u=l,c=[];null!==(a=i());)if("<"!==a[0])u.appendChild(t.document.createTextNode(r(a)));else{if("/"===a[1]){c.length&&c[c.length-1]===a.substr(2).replace(">","")&&(c.pop(),u=u.parentNode);continue}var d,p=Tt(a.substr(1,a.length-2));if(p){d=t.document.createProcessingInstruction("timestamp",p),u.appendChild(d);continue}var h=a.match(/^<([^.\s\/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!h)continue;if(d=s(h[1],h[3]),!d)continue;if(!o(u,d))continue;h[2]&&(d.className=h[2].substr(1).replace("."," ")),c.push(h[1]),u.appendChild(d),u=d}return l}function Et(t){for(var e=0;e<Dn.length;e++){var i=Dn[e];if(t>=i[0]&&t<=i[1])return!0}return!1}function xt(t){function e(t,e){for(var i=e.childNodes.length-1;i>=0;i--)t.push(e.childNodes[i])}function i(t){if(!t||!t.length)return null;var n=t.pop(),r=n.textContent||n.innerText;if(r){var o=r.match(/^.*(\n|\r)/);return o?(t.length=0,o[0]):r}return"ruby"===n.tagName?i(t):n.childNodes?(e(t,n),i(t)):void 0}var n,r=[],o="";if(!t||!t.childNodes)return"ltr";for(e(r,t);o=i(r);)for(var s=0;s<o.length;s++)if(n=o.charCodeAt(s),Et(n))return"rtl";return"ltr"}function jt(t){if("number"==typeof t.line&&(t.snapToLines||t.line>=0&&t.line<=100))return t.line;if(!t.track||!t.track.textTrackList||!t.track.textTrackList.mediaElement)return-1;for(var e=t.track,i=e.textTrackList,n=0,r=0;r<i.length&&i[r]!==e;r++)"showing"===i[r].mode&&n++;return++n*-1}function Ot(){}function At(t,e,i){var n=/MSIE\s8\.0/.test(navigator.userAgent),r="rgba(255, 255, 255, 1)",o="rgba(0, 0, 0, 0.8)";n&&(r="rgb(255, 255, 255)",o="rgb(0, 0, 0)"),Ot.call(this),this.cue=e,this.cueDiv=St(t,e.text);var s={color:r,backgroundColor:o,position:"relative",left:0,right:0,top:0,bottom:0,display:"inline"};n||(s.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl",s.unicodeBidi="plaintext"),this.applyStyles(s,this.cueDiv),this.div=t.document.createElement("div"),s={textAlign:"middle"===e.align?"center":e.align,font:i.font,whiteSpace:"pre-line",position:"absolute"},n||(s.direction=xt(this.cueDiv),s.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl".stylesunicodeBidi="plaintext"),this.applyStyles(s),this.div.appendChild(this.cueDiv);var a=0;switch(e.positionAlign){case"start":a=e.position;break;case"middle":a=e.position-e.size/2;break;case"end":a=e.position-e.size}""===e.vertical?this.applyStyles({left:this.formatStyle(a,"%"),width:this.formatStyle(e.size,"%")}):this.applyStyles({top:this.formatStyle(a,"%"),height:this.formatStyle(e.size,"%")}),this.move=function(t){this.applyStyles({top:this.formatStyle(t.top,"px"),bottom:this.formatStyle(t.bottom,"px"),left:this.formatStyle(t.left,"px"),right:this.formatStyle(t.right,"px"),height:this.formatStyle(t.height,"px"),width:this.formatStyle(t.width,"px")})}}function Pt(t){var e,i,n,r,o=/MSIE\s8\.0/.test(navigator.userAgent);if(t.div){i=t.div.offsetHeight,n=t.div.offsetWidth,r=t.div.offsetTop;var s=(s=t.div.childNodes)&&(s=s[0])&&s.getClientRects&&s.getClientRects();t=t.div.getBoundingClientRect(),e=s?Math.max(s[0]&&s[0].height||0,t.height/s.length):0}this.left=t.left,this.right=t.right,this.top=t.top||r,this.height=t.height||i,this.bottom=t.bottom||r+(t.height||i),this.width=t.width||n,this.lineHeight=void 0!==e?e:t.lineHeight,o&&!this.lineHeight&&(this.lineHeight=13)}function Dt(t,e,i,n){function r(t,e){for(var r,o=new Pt(t),s=1,a=0;a<e.length;a++){for(;t.overlapsOppositeAxis(i,e[a])||t.within(i)&&t.overlapsAny(n);)t.move(e[a]);if(t.within(i))return t;var l=t.intersectPercentage(i);s>l&&(r=new Pt(t),s=l),t=new Pt(o)}return r||o}var o=new Pt(e),s=e.cue,a=jt(s),l=[];if(s.snapToLines){var u;switch(s.vertical){case"":l=["+y","-y"],u="height";break;case"rl":l=["+x","-x"],u="width";break;case"lr":l=["-x","+x"],u="width"}var c=o.lineHeight,d=c*Math.round(a),p=i[u]+c,h=l[0];Math.abs(d)>p&&(d=d<0?-1:1,d*=Math.ceil(p/c)*c),a<0&&(d+=""===s.vertical?i.height:i.width,l=l.reverse()),o.move(h,d)}else{var f=o.lineHeight/i.height*100;switch(s.lineAlign){case"middle":a-=f/2;break;case"end":a-=f}switch(s.vertical){case"":e.applyStyles({top:e.formatStyle(a,"%")});break;case"rl":e.applyStyles({left:e.formatStyle(a,"%")});break;case"lr":e.applyStyles({right:e.formatStyle(a,"%")})}l=["+y","-x","+x","-y"],o=new Pt(e)}var v=r(o,l);e.move(v.toCSSCompatValues(i))}function Mt(){}function It(t){if("string"!=typeof t)return!1;var e=Bn[t.toLowerCase()];return!!e&&t.toLowerCase()}function Nt(t){if("string"!=typeof t)return!1;var e=$n[t.toLowerCase()];return!!e&&t.toLowerCase()}function Lt(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)t[n]=i[n]}return t}function Ft(t,e,i){var n=this,r=/MSIE\s8\.0/.test(navigator.userAgent),o={};r?n=document.createElement("custom"):o.enumerable=!0,n.hasBeenReset=!1;var s="",a=!1,l=t,u=e,c=i,d=null,p="",h=!0,f="auto",v="start",y=50,g="middle",m=50,b="middle";if(Object.defineProperty(n,"id",Lt({},o,{get:function(){return s},set:function(t){s=""+t}})),Object.defineProperty(n,"pauseOnExit",Lt({},o,{get:function(){return a},set:function(t){a=!!t}})),Object.defineProperty(n,"startTime",Lt({},o,{get:function(){return l},set:function(t){if("number"!=typeof t)throw new TypeError("Start time must be set to a number.");l=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"endTime",Lt({},o,{get:function(){return u},set:function(t){if("number"!=typeof t)throw new TypeError("End time must be set to a number.");u=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"text",Lt({},o,{get:function(){return c},set:function(t){c=""+t,this.hasBeenReset=!0}})),Object.defineProperty(n,"region",Lt({},o,{get:function(){return d},set:function(t){d=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"vertical",Lt({},o,{get:function(){return p},set:function(t){var e=It(t);if(e===!1)throw new SyntaxError("An invalid or illegal string was specified.");p=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"snapToLines",Lt({},o,{get:function(){return h},set:function(t){h=!!t,this.hasBeenReset=!0}})),Object.defineProperty(n,"line",Lt({},o,{get:function(){return f},set:function(t){if("number"!=typeof t&&t!==Fn)throw new SyntaxError("An invalid number or illegal string was specified.");f=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"lineAlign",Lt({},o,{get:function(){return v},set:function(t){var e=Nt(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");v=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"position",Lt({},o,{get:function(){return y},set:function(t){if(t<0||t>100)throw new Error("Position must be between 0 and 100.");y=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"positionAlign",Lt({},o,{get:function(){return g},set:function(t){var e=Nt(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");g=e,this.hasBeenReset=!0}})),Object.defineProperty(n,"size",Lt({},o,{get:function(){return m},set:function(t){if(t<0||t>100)throw new Error("Size must be between 0 and 100.");m=t,this.hasBeenReset=!0}})),Object.defineProperty(n,"align",Lt({},o,{get:function(){return b},set:function(t){var e=Nt(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");b=e,this.hasBeenReset=!0}})),n.displayState=void 0,r)return n}function Bt(t){if("string"!=typeof t)return!1;var e=Hn[t.toLowerCase()];return!!e&&t.toLowerCase()}function $t(t){return"number"==typeof t&&t>=0&&t<=100}function Rt(){var t=100,e=3,i=0,n=100,r=0,o=100,s="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return t},set:function(e){if(!$t(e))throw new Error("Width must be between 0 and 100.");t=e}},lines:{enumerable:!0,get:function(){return e},set:function(t){if("number"!=typeof t)throw new TypeError("Lines must be set to a number.");e=t}},regionAnchorY:{enumerable:!0,get:function(){return n},set:function(t){if(!$t(t))throw new Error("RegionAnchorX must be between 0 and 100.");n=t}},regionAnchorX:{enumerable:!0,get:function(){return i},set:function(t){if(!$t(t))throw new Error("RegionAnchorY must be between 0 and 100.");i=t}},viewportAnchorY:{enumerable:!0,get:function(){return o},set:function(t){if(!$t(t))throw new Error("ViewportAnchorY must be between 0 and 100.");o=t}},viewportAnchorX:{enumerable:!0,get:function(){return r},set:function(t){if(!$t(t))throw new Error("ViewportAnchorX must be between 0 and 100.");r=t}},scroll:{enumerable:!0,get:function(){return s},set:function(t){var e=Bt(t);if(e===!1)throw new SyntaxError("An invalid or illegal string was specified.");s=e}}})}function Ht(t,e,i,n){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=t.textTracks();r.kind=e,i&&(r.label=i),n&&(r.language=n),r.tech=t;var s=new En.text.TrackClass(r);return o.addTrack(s),s}function zt(t,e){Wn[t]=Wn[t]||[],Wn[t].push(e)}function Vt(t,e,i){t.setTimeout(function(){return Yt(e,Wn[e.type],i,t)},1)}function Ut(t,e){t.forEach(function(t){return t.setTech&&t.setTech(e)})}function Wt(t,e,i){return t.reduceRight(Xt(i),e[i]())}function qt(t,e,i,n){return e[i](t.reduce(Xt(i),n))}function Xt(t){return function(e,i){return i[t]?i[t](e):e}}function Yt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments[2],r=arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],s=arguments.length>5&&void 0!==arguments[5]&&arguments[5],a=e[0],l=e.slice(1);if("string"==typeof a)Yt(t,Wn[a],i,r,o,s);else if(a){var u=a(r);u.setSource(n({},t),function(e,n){return e?Yt(t,l,i,r,o,s):(o.push(u),void Yt(n,t.type===n.type?l:Wn[n.type],i,r,o,s))})}else l.length?Yt(t,l,i,r,o,s):s?i(t,o):Yt(t,Wn["*"],i,r,o,!0)}function Gt(t,e){return"rgba("+parseInt(t[1]+t[1],16)+","+parseInt(t[2]+t[2],16)+","+parseInt(t[3]+t[3],16)+","+e+")"}function Kt(t,e,i){try{t.style[e]=i}catch(n){return}}function Jt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;t=t<0?0:t;var i=Math.floor(t%60),n=Math.floor(t/60%60),r=Math.floor(t/3600),o=Math.floor(e/60%60),s=Math.floor(e/3600);return(isNaN(t)||t===1/0)&&(r=n=i="-"),r=r>0||s>0?r+":":"",n=((r||o>=10)&&n<10?"0"+n:n)+":",i=i<10?"0"+i:i,r+n+i}function Qt(t,e){if(e&&(t=e(t)),t&&"none"!==t)return t}function Zt(t,e){var i=t.options[t.options.selectedIndex].value;return Qt(i,e)}function te(t,e,i){if(e)for(var n=0;n<t.options.length;n++)if(Qt(t.options[n].value,i)===e){t.selectedIndex=n;break}}function ee(t,e,i){var n=void 0;if("string"==typeof t){var o=ee.getPlayers();if(0===t.indexOf("#")&&(t=t.slice(1)),o[t])return e&&qe.warn('Player "'+t+'" is already initialised. Options will not be applied.'),i&&o[t].ready(i),o[t];n=Ge("#"+t)}else n=t;if(!n||!n.nodeName)throw new TypeError("The element or ID supplied is not valid. (videojs)");if(p(n)&&!de.body.contains(n)&&qe.warn("The element supplied is not included in the DOM"),n.player||_o.players[n.playerId])return n.player||_o.players[n.playerId];e=e||{},ee.hooks("beforesetup").forEach(function(t){var i=t(n,Z(e));return!r(i)||Array.isArray(i)?void qe.error("please return an object in beforesetup hooks"):void(e=Z(e,i))});var s=Ti.getComponent("Player"),a=new s(n,e,i);return ee.hooks("setup").forEach(function(t){return t(a)}),a}var ie,ne="6.4.0",re="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};ie="undefined"!=typeof window?window:"undefined"!=typeof re?re:"undefined"!=typeof self?self:{};var oe,se=ie,ae={},le=(Object.freeze||Object)({"default":ae}),ue=le&&ae||le,ce="undefined"!=typeof re?re:"undefined"!=typeof window?window:{};"undefined"!=typeof document?oe=document:(oe=ce["__GLOBAL_DOCUMENT_CACHE@4"],oe||(oe=ce["__GLOBAL_DOCUMENT_CACHE@4"]=ue));var de=oe,pe=se.navigator&&se.navigator.userAgent||"",he=/AppleWebKit\/([\d.]+)/i.exec(pe),fe=he?parseFloat(he.pop()):null,ve=/iPad/i.test(pe),ye=/iPhone/i.test(pe)&&!ve,ge=/iPod/i.test(pe),me=ye||ve||ge,be=function(){var t=pe.match(/OS (\d+)_/i);return t&&t[1]?t[1]:null}(),_e=/Android/i.test(pe),Te=function(){var t=pe.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if(!t)return null;var e=t[1]&&parseFloat(t[1]),i=t[2]&&parseFloat(t[2]);return e&&i?parseFloat(t[1]+"."+t[2]):e?e:null}(),we=_e&&/webkit/i.test(pe)&&Te<2.3,ke=_e&&Te<5&&fe<537,Ce=/Firefox/i.test(pe),Se=/Edge/i.test(pe),Ee=!Se&&/Chrome/i.test(pe),xe=function(){var t=pe.match(/Chrome\/(\d+)/);return t&&t[1]?parseFloat(t[1]):null}(),je=/MSIE\s8\.0/.test(pe),Oe=function(){var t=/MSIE\s(\d+)\.\d/.exec(pe),e=t&&parseFloat(t[1]);return!e&&/Trident\/7.0/i.test(pe)&&/rv:11.0/.test(pe)&&(e=11),e}(),Ae=/Safari/i.test(pe)&&!Ee&&!_e&&!Se,Pe=Ae||me,De=d()&&("ontouchstart"in se||se.DocumentTouch&&se.document instanceof se.DocumentTouch),Me=d()&&"backgroundSize"in se.document.createElement("video").style,Ie=(Object.freeze||Object)({IS_IPAD:ve,IS_IPHONE:ye,IS_IPOD:ge,IS_IOS:me,IOS_VERSION:be,IS_ANDROID:_e,ANDROID_VERSION:Te,IS_OLD_ANDROID:we,IS_NATIVE_ANDROID:ke,IS_FIREFOX:Ce,IS_EDGE:Se,IS_CHROME:Ee,CHROME_VERSION:xe,IS_IE8:je,IE_VERSION:Oe,IS_SAFARI:Ae,IS_ANY_SAFARI:Pe,TOUCH_ENABLED:De,BACKGROUND_SIZE_SUPPORTED:Me}),Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Le=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Fe=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},Be=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},$e=function(t,e){return t.raw=e,t},Re=Object.prototype.toString,He=function(t){return r(t)?Object.keys(t):[]},ze=void 0,Ve="all",Ue=[],We=function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:!!Oe&&Oe<11,n=ze.levels[Ve],o=new RegExp("^("+n+")$");"log"!==t&&e.unshift(t.toUpperCase()+":"),Ue&&Ue.push([].concat(e)),e.unshift("VIDEOJS:");var s=se.console&&se.console[t];s&&n&&o.test(t)&&(i&&(e=e.map(function(t){if(r(t)||Array.isArray(t))try{return JSON.stringify(t)}catch(e){return String(t)}return String(t)}).join(" ")),s.apply?s[Array.isArray(e)?"apply":"call"](se.console,e):s(e))};ze=function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];We("log",e)},ze.levels={all:"log|warn|error",error:"error",off:"",warn:"warn|error",DEFAULT:Ve},ze.level=function(t){if("string"==typeof t){if(!ze.levels.hasOwnProperty(t))throw new Error('"'+t+'" in not a valid log level');Ve=t}return Ve},ze.history=function(){return Ue?[].concat(Ue):[]},ze.history.clear=function(){Ue&&(Ue.length=0)},ze.history.disable=function(){null!==Ue&&(Ue.length=0,Ue=null)},ze.history.enable=function(){null===Ue&&(Ue=[])},ze.error=function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];return We("error",e)},ze.warn=function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];return We("warn",e)};var qe=ze,Xe=function(t){for(var e="",i=0;i<arguments.length;i++)e+=s(t[i])+(arguments[i+1]||"");return e},Ye=$e(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."],["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."]),Ge=f("querySelector"),Ke=f("querySelectorAll"),Je=(Object.freeze||Object)({isReal:d,isEl:p,isInFrame:h,createEl:v,textContent:y,prependTo:g,hasClass:m,addClass:b,removeClass:_,toggleClass:T,setAttributes:w,getAttributes:k,getAttribute:C,setAttribute:S,removeAttribute:E,blockTextSelection:x,unblockTextSelection:j,getBoundingClientRect:O,findPosition:A,getPointerPosition:P,isTextNode:D,emptyEl:M,normalizeContent:I,appendContent:N,insertContent:L,$:Ge,$$:Ke}),Qe=1,Ze={},ti="vdata"+(new Date).getTime(),ei=!1;!function(){try{var t=Object.defineProperty({},"passive",{get:function(){ei=!0}});se.addEventListener("test",null,t);
}catch(e){}}();var ii=["touchstart","touchmove"],ni=(Object.freeze||Object)({fixEvent:V,on:U,off:W,trigger:q,one:X}),ri=!1,oi=void 0,si=function(){if(d()){var t=de.getElementsByTagName("video"),e=de.getElementsByTagName("audio"),i=[];if(t&&t.length>0)for(var n=0,r=t.length;n<r;n++)i.push(t[n]);if(e&&e.length>0)for(var o=0,s=e.length;o<s;o++)i.push(e[o]);if(i&&i.length>0)for(var a=0,l=i.length;a<l;a++){var u=i[a];if(!u||!u.getAttribute){Y(1);break}if(void 0===u.player){var c=u.getAttribute("data-setup");null!==c&&oi(u)}}else ri||Y(1)}};d()&&"complete"===de.readyState?ri=!0:X(se,"load",function(){ri=!0});var ai=function(t){var e=de.createElement("style");return e.className=t,e},li=function(t,e){t.styleSheet?t.styleSheet.cssText=e:t.textContent=e},ui=function(t,e,i){e.guid||(e.guid=F());var n=function(){return e.apply(t,arguments)};return n.guid=i?i+"_"+e.guid:e.guid,n},ci=function(t,e){var i=Date.now(),n=function(){var n=Date.now();n-i>=e&&(t.apply(void 0,arguments),i=n)};return n},di=function(){};di.prototype.allowedEvents_={},di.prototype.on=function(t,e){var i=this.addEventListener;this.addEventListener=function(){},U(this,t,e),this.addEventListener=i},di.prototype.addEventListener=di.prototype.on,di.prototype.off=function(t,e){W(this,t,e)},di.prototype.removeEventListener=di.prototype.off,di.prototype.one=function(t,e){var i=this.addEventListener;this.addEventListener=function(){},X(this,t,e),this.addEventListener=i},di.prototype.trigger=function(t){var e=t.type||t;"string"==typeof t&&(t={type:e}),t=V(t),this.allowedEvents_[e]&&this["on"+e]&&this["on"+e](t),q(this,t)},di.prototype.dispatchEvent=di.prototype.trigger;var pi=function(t){return t instanceof di||!!t.eventBusEl_&&["on","one","off","trigger"].every(function(e){return"function"==typeof t[e]})},hi=function(t){return"string"==typeof t&&/\S/.test(t)||Array.isArray(t)&&!!t.length},fi=function(t){if(!t.nodeName&&!pi(t))throw new Error("Invalid target; must be a DOM node or evented object.")},vi=function(t){if(!hi(t))throw new Error("Invalid event type; must be a non-empty string or array.")},yi=function(t){if("function"!=typeof t)throw new Error("Invalid listener; must be a function.")},gi=function(t,e){var i=e.length<3||e[0]===t||e[0]===t.eventBusEl_,n=void 0,r=void 0,o=void 0;return i?(n=t.eventBusEl_,e.length>=3&&e.shift(),r=e[0],o=e[1]):(n=e[0],r=e[1],o=e[2]),fi(n),vi(r),yi(o),o=ui(t,o),{isTargetingSelf:i,target:n,type:r,listener:o}},mi=function(t,e,i,n){fi(t),t.nodeName?ni[e](t,i,n):t[e](i,n)},bi={on:function(){for(var t=this,e=arguments.length,i=Array(e),n=0;n<e;n++)i[n]=arguments[n];var r=gi(this,i),o=r.isTargetingSelf,s=r.target,a=r.type,l=r.listener;if(mi(s,"on",a,l),!o){var u=function(){return t.off(s,a,l)};u.guid=l.guid;var c=function(){return t.off("dispose",u)};c.guid=l.guid,mi(this,"on","dispose",u),mi(s,"on","dispose",c)}},one:function(){for(var t=this,e=arguments.length,i=Array(e),n=0;n<e;n++)i[n]=arguments[n];var r=gi(this,i),o=r.isTargetingSelf,s=r.target,a=r.type,l=r.listener;if(o)mi(s,"one",a,l);else{var u=function c(){for(var e=arguments.length,i=Array(e),n=0;n<e;n++)i[n]=arguments[n];t.off(s,a,c),l.apply(null,i)};u.guid=l.guid,mi(s,"one",a,u)}},off:function(t,e,i){if(!t||hi(t))W(this.eventBusEl_,t,e);else{var n=t,r=e;fi(n),vi(r),yi(i),i=ui(this,i),this.off("dispose",i),n.nodeName?(W(n,r,i),W(n,"dispose",i)):pi(n)&&(n.off(r,i),n.off("dispose",i))}},trigger:function(t,e){return q(this.eventBusEl_,t,e)}},_i={state:{},setState:function(t){var i=this;"function"==typeof t&&(t=t());var n=void 0;return e(t,function(t,e){i.state[e]!==t&&(n=n||{},n[e]={from:i.state[e],to:t}),i.state[e]=t}),n&&pi(this)&&this.trigger({changes:n,type:"statechanged"}),n}},Ti=function(){function t(e,i,n){if(Le(this,t),!e&&this.play?this.player_=e=this:this.player_=e,this.options_=Z({},this.options_),i=this.options_=Z(this.options_,i),this.id_=i.id||i.el&&i.el.id,!this.id_){var r=e&&e.id&&e.id()||"no_player";this.id_=r+"_component_"+F()}this.name_=i.name||null,i.el?this.el_=i.el:i.createEl!==!1&&(this.el_=this.createEl()),G(this,{eventBusKey:this.el_?"el_":null}),K(this,this.constructor.defaultState),this.children_=[],this.childIndex_={},this.childNameIndex_={},i.initChildren!==!1&&this.initChildren(),this.ready(n),i.reportTouchActivity!==!1&&this.enableTouchActivity()}return t.prototype.dispose=function(){if(this.trigger({type:"dispose",bubbles:!1}),this.children_)for(var t=this.children_.length-1;t>=0;t--)this.children_[t].dispose&&this.children_[t].dispose();this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.el_&&(this.el_.parentNode&&this.el_.parentNode.removeChild(this.el_),R(this.el_),this.el_=null)},t.prototype.player=function(){return this.player_},t.prototype.options=function(t){return qe.warn("this.options() has been deprecated and will be moved to the constructor in 6.0"),t?(this.options_=Z(this.options_,t),this.options_):this.options_},t.prototype.el=function(){return this.el_},t.prototype.createEl=function(t,e,i){return v(t,e,i)},t.prototype.localize=function(t,e){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,n=this.player_.language&&this.player_.language(),r=this.player_.languages&&this.player_.languages(),o=r&&r[n],s=n&&n.split("-")[0],a=r&&r[s],l=i;return o&&o[t]?l=o[t]:a&&a[t]&&(l=a[t]),e&&(l=l.replace(/\{(\d+)\}/g,function(t,i){var n=e[i-1],r=n;return"undefined"==typeof n&&(r=t),r})),l},t.prototype.contentEl=function(){return this.contentEl_||this.el_},t.prototype.id=function(){return this.id_},t.prototype.name=function(){return this.name_},t.prototype.children=function(){return this.children_},t.prototype.getChildById=function(t){return this.childIndex_[t]},t.prototype.getChild=function(t){if(t)return t=J(t),this.childNameIndex_[t]},t.prototype.addChild=function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.children_.length,r=void 0,o=void 0;if("string"==typeof e){o=J(e);var s=i.componentClass||o;i.name=o;var a=t.getComponent(s);if(!a)throw new Error("Component "+s+" does not exist");if("function"!=typeof a)return null;r=new a(this.player_||this,i)}else r=e;if(this.children_.splice(n,0,r),"function"==typeof r.id&&(this.childIndex_[r.id()]=r),o=o||r.name&&J(r.name()),o&&(this.childNameIndex_[o]=r),"function"==typeof r.el&&r.el()){var l=this.contentEl().children,u=l[n]||null;this.contentEl().insertBefore(r.el(),u)}return r},t.prototype.removeChild=function(t){if("string"==typeof t&&(t=this.getChild(t)),t&&this.children_){for(var e=!1,i=this.children_.length-1;i>=0;i--)if(this.children_[i]===t){e=!0,this.children_.splice(i,1);break}if(e){this.childIndex_[t.id()]=null,this.childNameIndex_[t.name()]=null;var n=t.el();n&&n.parentNode===this.contentEl()&&this.contentEl().removeChild(t.el())}}},t.prototype.initChildren=function(){var e=this,i=this.options_.children;if(i){var n=this.options_,r=function(t){var i=t.name,r=t.opts;if(void 0!==n[i]&&(r=n[i]),r!==!1){r===!0&&(r={}),r.playerOptions=e.options_.playerOptions;var o=e.addChild(i,r);o&&(e[i]=o)}},o=void 0,s=t.getComponent("Tech");o=Array.isArray(i)?i:Object.keys(i),o.concat(Object.keys(this.options_).filter(function(t){return!o.some(function(e){return"string"==typeof e?t===e:t===e.name})})).map(function(t){var n=void 0,r=void 0;return"string"==typeof t?(n=t,r=i[n]||e.options_[n]||{}):(n=t.name,r=t),{name:n,opts:r}}).filter(function(e){var i=t.getComponent(e.opts.componentClass||J(e.name));return i&&!s.isTech(i)}).forEach(r)}},t.prototype.buildCSSClass=function(){return""},t.prototype.ready=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t)return this.isReady_?void(e?t.call(this):this.setTimeout(t,1)):(this.readyQueue_=this.readyQueue_||[],void this.readyQueue_.push(t))},t.prototype.triggerReady=function(){this.isReady_=!0,this.setTimeout(function(){var t=this.readyQueue_;this.readyQueue_=[],t&&t.length>0&&t.forEach(function(t){t.call(this)},this),this.trigger("ready")},1)},t.prototype.$=function(t,e){return Ge(t,e||this.contentEl())},t.prototype.$$=function(t,e){return Ke(t,e||this.contentEl())},t.prototype.hasClass=function(t){return m(this.el_,t)},t.prototype.addClass=function(t){b(this.el_,t)},t.prototype.removeClass=function(t){_(this.el_,t)},t.prototype.toggleClass=function(t,e){T(this.el_,t,e)},t.prototype.show=function(){this.removeClass("vjs-hidden")},t.prototype.hide=function(){this.addClass("vjs-hidden")},t.prototype.lockShowing=function(){this.addClass("vjs-lock-showing")},t.prototype.unlockShowing=function(){this.removeClass("vjs-lock-showing")},t.prototype.getAttribute=function(t){return C(this.el_,t)},t.prototype.setAttribute=function(t,e){S(this.el_,t,e)},t.prototype.removeAttribute=function(t){E(this.el_,t)},t.prototype.width=function(t,e){return this.dimension("width",t,e)},t.prototype.height=function(t,e){return this.dimension("height",t,e)},t.prototype.dimensions=function(t,e){this.width(t,!0),this.height(e)},t.prototype.dimension=function(t,e,i){if(void 0!==e)return null!==e&&e===e||(e=0),(""+e).indexOf("%")!==-1||(""+e).indexOf("px")!==-1?this.el_.style[t]=e:"auto"===e?this.el_.style[t]="":this.el_.style[t]=e+"px",void(i||this.trigger("componentresize"));if(!this.el_)return 0;var n=this.el_.style[t],r=n.indexOf("px");return r!==-1?parseInt(n.slice(0,r),10):parseInt(this.el_["offset"+J(t)],10)},t.prototype.currentDimension=function(t){var e=0;if("width"!==t&&"height"!==t)throw new Error("currentDimension only accepts width or height value");if("function"==typeof se.getComputedStyle){var i=se.getComputedStyle(this.el_);e=i.getPropertyValue(t)||i[t]}if(e=parseFloat(e),0===e){var n="offset"+J(t);e=this.el_[n]}return e},t.prototype.currentDimensions=function(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}},t.prototype.currentWidth=function(){return this.currentDimension("width")},t.prototype.currentHeight=function(){return this.currentDimension("height")},t.prototype.focus=function(){this.el_.focus()},t.prototype.blur=function(){this.el_.blur()},t.prototype.emitTapEvents=function(){var t=0,e=null,i=10,n=200,r=void 0;this.on("touchstart",function(i){1===i.touches.length&&(e={pageX:i.touches[0].pageX,pageY:i.touches[0].pageY},t=(new Date).getTime(),r=!0)}),this.on("touchmove",function(t){if(t.touches.length>1)r=!1;else if(e){var n=t.touches[0].pageX-e.pageX,o=t.touches[0].pageY-e.pageY,s=Math.sqrt(n*n+o*o);s>i&&(r=!1)}});var o=function(){r=!1};this.on("touchleave",o),this.on("touchcancel",o),this.on("touchend",function(i){if(e=null,r===!0){var o=(new Date).getTime()-t;o<n&&(i.preventDefault(),this.trigger("tap"))}})},t.prototype.enableTouchActivity=function(){if(this.player()&&this.player().reportUserActivity){var t=ui(this.player(),this.player().reportUserActivity),e=void 0;this.on("touchstart",function(){t(),this.clearInterval(e),e=this.setInterval(t,250)});var i=function(i){t(),this.clearInterval(e)};this.on("touchmove",t),this.on("touchend",i),this.on("touchcancel",i)}},t.prototype.setTimeout=function(t,e){var i=this;t=ui(this,t);var n=se.setTimeout(t,e),r=function(){return i.clearTimeout(n)};return r.guid="vjs-timeout-"+n,this.on("dispose",r),n},t.prototype.clearTimeout=function(t){se.clearTimeout(t);var e=function(){};return e.guid="vjs-timeout-"+t,this.off("dispose",e),t},t.prototype.setInterval=function(t,e){var i=this;t=ui(this,t);var n=se.setInterval(t,e),r=function(){return i.clearInterval(n)};return r.guid="vjs-interval-"+n,this.on("dispose",r),n},t.prototype.clearInterval=function(t){se.clearInterval(t);var e=function(){};return e.guid="vjs-interval-"+t,this.off("dispose",e),t},t.prototype.requestAnimationFrame=function(t){var e=this;if(this.supportsRaf_){t=ui(this,t);var i=se.requestAnimationFrame(t),n=function(){return e.cancelAnimationFrame(i)};return n.guid="vjs-raf-"+i,this.on("dispose",n),i}return this.setTimeout(t,1e3/60)},t.prototype.cancelAnimationFrame=function(t){if(this.supportsRaf_){se.cancelAnimationFrame(t);var e=function(){};return e.guid="vjs-raf-"+t,this.off("dispose",e),t}return this.clearTimeout(t)},t.registerComponent=function(e,i){if("string"!=typeof e||!e)throw new Error('Illegal component name, "'+e+'"; must be a non-empty string.');var n=t.getComponent("Tech"),r=n&&n.isTech(i),o=t===i||t.prototype.isPrototypeOf(i.prototype);if(r||!o){var s=void 0;throw s=r?"techs must be registered using Tech.registerTech()":"must be a Component subclass",new Error('Illegal component, "'+e+'"; '+s+".")}e=J(e),t.components_||(t.components_={});var a=t.getComponent("Player");if("Player"===e&&a&&a.players){var l=a.players,u=Object.keys(l);if(l&&u.length>0&&u.map(function(t){return l[t]}).every(Boolean))throw new Error("Can not register Player component after player has been created.")}return t.components_[e]=i,i},t.getComponent=function(e){if(e)return e=J(e),t.components_&&t.components_[e]?t.components_[e]:void 0},t}();Ti.prototype.supportsRaf_="function"==typeof se.requestAnimationFrame&&"function"==typeof se.cancelAnimationFrame,Ti.registerComponent("Component",Ti);for(var wi={},ki=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],Ci=ki[0],Si=void 0,Ei=0;Ei<ki.length;Ei++)if(ki[Ei][1]in de){Si=ki[Ei];break}if(Si)for(var xi=0;xi<Si.length;xi++)wi[Ci[xi]]=Si[xi];ot.prototype.code=0,ot.prototype.message="",ot.prototype.status=null,ot.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],ot.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};for(var ji=0;ji<ot.errorTypes.length;ji++)ot[ot.errorTypes[ji]]=ji,ot.prototype[ot.errorTypes[ji]]=ji;var Oi=st,Ai=function(t){var e=["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce(function(e,i,n){return t[i]&&(e[i]=t[i]),e},{cues:t.cues&&Array.prototype.map.call(t.cues,function(t){return{startTime:t.startTime,endTime:t.endTime,text:t.text,id:t.id}})});return e},Pi=function(t){var e=t.$$("track"),i=Array.prototype.map.call(e,function(t){return t.track}),n=Array.prototype.map.call(e,function(t){var e=Ai(t.track);return t.src&&(e.src=t.src),e});return n.concat(Array.prototype.filter.call(t.textTracks(),function(t){return i.indexOf(t)===-1}).map(Ai))},Di=function(t,e){return t.forEach(function(t){var i=e.addRemoteTextTrack(t).track;!t.src&&t.cues&&t.cues.forEach(function(t){return i.addCue(t)})}),e.textTracks()},Mi={textTracksToJson:Pi,jsonToTextTracks:Di,trackToJson_:Ai},Ii="vjs-modal-dialog",Ni=27,Li=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.opened_=r.hasBeenOpened_=r.hasBeenFilled_=!1,r.closeable(!r.options_.uncloseable),r.content(r.options_.content),r.contentEl_=v("div",{className:Ii+"-content"},{role:"document"}),r.descEl_=v("p",{className:Ii+"-description vjs-control-text",id:r.el().getAttribute("aria-describedby")}),y(r.descEl_,r.description()),r.el_.appendChild(r.descEl_),r.el_.appendChild(r.contentEl_),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":this.id()+"_description","aria-hidden":"true","aria-label":this.label(),role:"dialog"})},e.prototype.buildCSSClass=function(){return Ii+" vjs-hidden "+t.prototype.buildCSSClass.call(this)},e.prototype.handleKeyPress=function(t){t.which===Ni&&this.closeable()&&this.close()},e.prototype.label=function(){return this.localize(this.options_.label||"Modal Window")},e.prototype.description=function(){var t=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(t+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),t},e.prototype.open=function(){if(!this.opened_){var t=this.player();this.trigger("beforemodalopen"),this.opened_=!0,(this.options_.fillAlways||!this.hasBeenOpened_&&!this.hasBeenFilled_)&&this.fill(),this.wasPlaying_=!t.paused(),this.options_.pauseOnOpen&&this.wasPlaying_&&t.pause(),this.closeable()&&this.on(this.el_.ownerDocument,"keydown",ui(this,this.handleKeyPress)),this.hadControls_=t.controls(),t.controls(!1),this.show(),this.conditionalFocus_(),this.el().setAttribute("aria-hidden","false"),this.trigger("modalopen"),this.hasBeenOpened_=!0}},e.prototype.opened=function(t){return"boolean"==typeof t&&this[t?"open":"close"](),this.opened_},e.prototype.close=function(){if(this.opened_){var t=this.player();this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&this.options_.pauseOnOpen&&t.play(),this.closeable()&&this.off(this.el_.ownerDocument,"keydown",ui(this,this.handleKeyPress)),this.hadControls_&&t.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),this.trigger("modalclose"),this.conditionalBlur_(),this.options_.temporary&&this.dispose()}},e.prototype.closeable=function i(t){if("boolean"==typeof t){var i=this.closeable_=!!t,e=this.getChild("closeButton");if(i&&!e){var n=this.contentEl_;this.contentEl_=this.el_,e=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=n,this.on(e,"close",this.close)}!i&&e&&(this.off(e,"close",this.close),this.removeChild(e),e.dispose())}return this.closeable_},e.prototype.fill=function(){this.fillWith(this.content())},e.prototype.fillWith=function(t){var e=this.contentEl(),i=e.parentNode,n=e.nextSibling;this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,i.removeChild(e),this.empty(),L(e,t),this.trigger("modalfill"),n?i.insertBefore(e,n):i.appendChild(e);var r=this.getChild("closeButton");r&&i.appendChild(r.el_)},e.prototype.empty=function(){this.trigger("beforemodalempty"),M(this.contentEl()),this.trigger("modalempty")},e.prototype.content=function(t){return"undefined"!=typeof t&&(this.content_=t),this.content_},e.prototype.conditionalFocus_=function(){var t=de.activeElement,e=this.player_.el_;this.previouslyActiveEl_=null,(e.contains(t)||e===t)&&(this.previouslyActiveEl_=t,this.focus(),this.on(de,"keydown",this.handleKeyDown))},e.prototype.conditionalBlur_=function(){this.previouslyActiveEl_&&(this.previouslyActiveEl_.focus(),this.previouslyActiveEl_=null),this.off(de,"keydown",this.handleKeyDown)},e.prototype.handleKeyDown=function(t){if(9===t.which){for(var e=this.focusableEls_(),i=this.el_.querySelector(":focus"),n=void 0,r=0;r<e.length;r++)if(i===e[r]){n=r;break}de.activeElement===this.el_&&(n=0),t.shiftKey&&0===n?(e[e.length-1].focus(),t.preventDefault()):t.shiftKey||n!==e.length-1||(e[0].focus(),t.preventDefault())}},e.prototype.focusableEls_=function(){var t=this.el_.querySelectorAll("*");return Array.prototype.filter.call(t,function(t){return(t instanceof se.HTMLAnchorElement||t instanceof se.HTMLAreaElement)&&t.hasAttribute("href")||(t instanceof se.HTMLInputElement||t instanceof se.HTMLSelectElement||t instanceof se.HTMLTextAreaElement||t instanceof se.HTMLButtonElement)&&!t.hasAttribute("disabled")||t instanceof se.HTMLIFrameElement||t instanceof se.HTMLObjectElement||t instanceof se.HTMLEmbedElement||t.hasAttribute("tabindex")&&t.getAttribute("tabindex")!==-1||t.hasAttribute("contenteditable")})},e}(Ti);Li.prototype.options_={pauseOnOpen:!0,temporary:!0},Ti.registerComponent("ModalDialog",Li);var Fi=function(t){function e(){var i,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;Le(this,e);var o=Be(this,t.call(this));if(!r&&(r=o,je)){r=de.createElement("custom");for(var s in e.prototype)"constructor"!==s&&(r[s]=e.prototype[s])}r.tracks_=[],Object.defineProperty(r,"length",{get:function(){return this.tracks_.length}});for(var a=0;a<n.length;a++)r.addTrack(n[a]);return i=r,Be(o,i)}return Fe(e,t),e.prototype.addTrack=function(t){var e=this.tracks_.length;""+e in this||Object.defineProperty(this,e,{get:function(){return this.tracks_[e]}}),this.tracks_.indexOf(t)===-1&&(this.tracks_.push(t),this.trigger({track:t,type:"addtrack"}))},e.prototype.removeTrack=function(t){for(var e=void 0,i=0,n=this.length;i<n;i++)if(this[i]===t){e=this[i],e.off&&e.off(),this.tracks_.splice(i,1);break}e&&this.trigger({track:e,type:"removetrack"})},e.prototype.getTrackById=function(t){for(var e=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===t){e=r;break}}return e},e}(di);Fi.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack"};for(var Bi in Fi.prototype.allowedEvents_)Fi.prototype["on"+Bi]=null;var $i=function(t,e){for(var i=0;i<t.length;i++)Object.keys(t[i]).length&&e.id!==t[i].id&&(t[i].enabled=!1)},Ri=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Le(this,e);for(var o=void 0,s=r.length-1;s>=0;s--)if(r[s].enabled){$i(r,r[s]);break}if(je){o=de.createElement("custom");for(var a in Fi.prototype)"constructor"!==a&&(o[a]=Fi.prototype[a]);for(var l in e.prototype)"constructor"!==l&&(o[l]=e.prototype[l])}return o=i=Be(this,t.call(this,r,o)),o.changing_=!1,n=o,Be(i,n)}return Fe(e,t),e.prototype.addTrack=function(e){var i=this;e.enabled&&$i(this,e),t.prototype.addTrack.call(this,e),e.addEventListener&&e.addEventListener("enabledchange",function(){i.changing_||(i.changing_=!0,$i(i,e),i.changing_=!1,i.trigger("change"))})},e}(Fi),Hi=function(t,e){for(var i=0;i<t.length;i++)Object.keys(t[i]).length&&e.id!==t[i].id&&(t[i].selected=!1)},zi=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Le(this,e);for(var o=void 0,s=r.length-1;s>=0;s--)if(r[s].selected){Hi(r,r[s]);break}if(je){o=de.createElement("custom");for(var a in Fi.prototype)"constructor"!==a&&(o[a]=Fi.prototype[a]);for(var l in e.prototype)"constructor"!==l&&(o[l]=e.prototype[l])}return o=i=Be(this,t.call(this,r,o)),o.changing_=!1,Object.defineProperty(o,"selectedIndex",{get:function(){for(var t=0;t<this.length;t++)if(this[t].selected)return t;return-1},set:function(){}}),n=o,Be(i,n)}return Fe(e,t),e.prototype.addTrack=function(e){var i=this;e.selected&&Hi(this,e),t.prototype.addTrack.call(this,e),e.addEventListener&&e.addEventListener("selectedchange",function(){i.changing_||(i.changing_=!0,Hi(i,e),i.changing_=!1,i.trigger("change"))})},e}(Fi),Vi=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Le(this,e);var o=void 0;if(je){o=de.createElement("custom");for(var s in Fi.prototype)"constructor"!==s&&(o[s]=Fi.prototype[s]);for(var a in e.prototype)"constructor"!==a&&(o[a]=e.prototype[a])}return o=i=Be(this,t.call(this,r,o)),n=o,Be(i,n)}return Fe(e,t),e.prototype.addTrack=function(e){t.prototype.addTrack.call(this,e),e.addEventListener("modechange",ui(this,function(){this.trigger("change")}));var i=["metadata","chapters"];i.indexOf(e.kind)===-1&&e.addEventListener("modechange",ui(this,function(){this.trigger("selectedlanguagechange")}))},e}(Fi),Ui=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];Le(this,t);var i=this;if(je){i=de.createElement("custom");for(var n in t.prototype)"constructor"!==n&&(i[n]=t.prototype[n])}i.trackElements_=[],Object.defineProperty(i,"length",{get:function(){return this.trackElements_.length}});for(var r=0,o=e.length;r<o;r++)i.addTrackElement_(e[r]);if(je)return i}return t.prototype.addTrackElement_=function(t){var e=this.trackElements_.length;""+e in this||Object.defineProperty(this,e,{get:function(){return this.trackElements_[e]}}),this.trackElements_.indexOf(t)===-1&&this.trackElements_.push(t)},t.prototype.getTrackElementByTrack_=function(t){for(var e=void 0,i=0,n=this.trackElements_.length;i<n;i++)if(t===this.trackElements_[i].track){e=this.trackElements_[i];break}return e},t.prototype.removeTrackElement_=function(t){for(var e=0,i=this.trackElements_.length;e<i;e++)if(t===this.trackElements_[e]){this.trackElements_.splice(e,1);break}},t}(),Wi=function(){function t(e){Le(this,t);var i=this;if(je){i=de.createElement("custom");for(var n in t.prototype)"constructor"!==n&&(i[n]=t.prototype[n])}if(t.prototype.setCues_.call(i,e),Object.defineProperty(i,"length",{get:function(){return this.length_}}),je)return i}return t.prototype.setCues_=function(t){var e=this.length||0,i=0,n=t.length;this.cues_=t,this.length_=t.length;var r=function(t){""+t in this||Object.defineProperty(this,""+t,{get:function(){return this.cues_[t]}})};if(e<n)for(i=e;i<n;i++)r.call(this,i)},t.prototype.getCueById=function(t){for(var e=null,i=0,n=this.length;i<n;i++){var r=this[i];if(r.id===t){e=r;break}}return e},t}(),qi={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},Xi={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},Yi={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},Gi={disabled:"disabled",hidden:"hidden",showing:"showing"},Ki=function(t){function e(){var i,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Le(this,e);var r=Be(this,t.call(this)),o=r;if(je){o=de.createElement("custom");for(var s in e.prototype)"constructor"!==s&&(o[s]=e.prototype[s])}var a={id:n.id||"vjs_track_"+F(),kind:n.kind||"",label:n.label||"",language:n.language||""},l=function(t){Object.defineProperty(o,t,{get:function(){return a[t]},set:function(){}})};for(var u in a)l(u);return i=o,Be(r,i)}return Fe(e,t),e}(di),Ji=function(t){var e=["protocol","hostname","port","pathname","search","hash","host"],i=de.createElement("a");i.href=t;var n=""===i.host&&"file:"!==i.protocol,r=void 0;n&&(r=de.createElement("div"),r.innerHTML='<a href="'+t+'"></a>',i=r.firstChild,r.setAttribute("style","display:none; position:absolute;"),de.body.appendChild(r));for(var o={},s=0;s<e.length;s++)o[e[s]]=i[e[s]];return"http:"===o.protocol&&(o.host=o.host.replace(/:80$/,"")),"https:"===o.protocol&&(o.host=o.host.replace(/:443$/,"")),o.protocol||(o.protocol=se.location.protocol),n&&de.body.removeChild(r),o},Qi=function(t){if(!t.match(/^https?:\/\//)){var e=de.createElement("div");e.innerHTML='<a href="'+t+'">x</a>',t=e.firstChild.href}return t},Zi=function(t){if("string"==typeof t){var e=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i,i=e.exec(t);if(i)return i.pop().toLowerCase()}return""},tn=function(t){var e=se.location,i=Ji(t),n=":"===i.protocol?e.protocol:i.protocol,r=n+i.host!==e.protocol+e.host;return r},en=(Object.freeze||Object)({parseUrl:Ji,getAbsoluteURL:Qi,getFileExtension:Zi,isCrossOrigin:tn}),nn=at,rn=Object.prototype.toString,on=t(function(t,e){function i(t){return t.replace(/^\s*|\s*$/g,"")}e=t.exports=i,e.left=function(t){return t.replace(/^\s*/,"")},e.right=function(t){return t.replace(/\s*$/,"")}}),sn=lt,an=Object.prototype.toString,ln=Object.prototype.hasOwnProperty,un=function(t){return"[object Array]"===Object.prototype.toString.call(t)},cn=function(t){if(!t)return{};var e={};return sn(on(t).split("\n"),function(t){var i=t.indexOf(":"),n=on(t.slice(0,i)).toLowerCase(),r=on(t.slice(i+1));"undefined"==typeof e[n]?e[n]=r:un(e[n])?e[n].push(r):e[n]=[e[n],r]}),e},dn=pt,pn=Object.prototype.hasOwnProperty,hn=yt;yt.XMLHttpRequest=se.XMLHttpRequest||bt,yt.XDomainRequest="withCredentials"in new yt.XMLHttpRequest?yt.XMLHttpRequest:se.XDomainRequest,ht(["get","put","post","patch","head","delete"],function(t){yt["delete"===t?"del":t]=function(e,i,n){return i=vt(e,i,n),i.method=t.toUpperCase(),gt(i)}});var fn=function(t,e){var i=new se.WebVTT.Parser(se,se.vttjs,se.WebVTT.StringDecoder()),n=[];i.oncue=function(t){e.addCue(t)},i.onparsingerror=function(t){n.push(t)},i.onflush=function(){e.trigger({type:"loadeddata",target:e})},i.parse(t),n.length>0&&(se.console&&se.console.groupCollapsed&&se.console.groupCollapsed("Text Track parsing errors for "+e.src),n.forEach(function(t){return qe.error(t)}),se.console&&se.console.groupEnd&&se.console.groupEnd()),i.flush()},vn=function(t,e){var i={uri:t},n=tn(t);n&&(i.cors=n),hn(i,ui(this,function(t,i,n){if(t)return qe.error(t,i);if(e.loaded_=!0,"function"!=typeof se.WebVTT){if(e.tech_){var r=function(){return fn(n,e)};e.tech_.on("vttjsloaded",r),e.tech_.on("vttjserror",function(){qe.error("vttjs failed to load, stopping trying to process "+e.src),e.tech_.off("vttjsloaded",r)})}}else fn(n,e)}))},yn=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Le(this,e),!r.tech)throw new Error("A tech was not provided.");var o=Z(r,{kind:Yi[r.kind]||"subtitles",language:r.language||r.srclang||""}),s=Gi[o.mode]||"disabled",a=o["default"];"metadata"!==o.kind&&"chapters"!==o.kind||(s="hidden");var l=i=Be(this,t.call(this,o));if(l.tech_=o.tech,je)for(var u in e.prototype)"constructor"!==u&&(l[u]=e.prototype[u]);l.cues_=[],l.activeCues_=[];var c=new Wi(l.cues_),d=new Wi(l.activeCues_),p=!1,h=ui(l,function(){this.activeCues,p&&(this.trigger("cuechange"),p=!1)});return"disabled"!==s&&l.tech_.ready(function(){l.tech_.on("timeupdate",h)},!0),Object.defineProperty(l,"default",{get:function(){return a},set:function(){}}),Object.defineProperty(l,"mode",{get:function(){return s},set:function(t){var e=this;Gi[t]&&(s=t,"showing"===s&&this.tech_.ready(function(){e.tech_.on("timeupdate",h)},!0),this.trigger("modechange"))}}),Object.defineProperty(l,"cues",{get:function(){return this.loaded_?c:null},set:function(){}}),Object.defineProperty(l,"activeCues",{get:function(){if(!this.loaded_)return null;if(0===this.cues.length)return d;for(var t=this.tech_.currentTime(),e=[],i=0,n=this.cues.length;i<n;i++){var r=this.cues[i];r.startTime<=t&&r.endTime>=t?e.push(r):r.startTime===r.endTime&&r.startTime<=t&&r.startTime+.5>=t&&e.push(r)}if(p=!1,e.length!==this.activeCues_.length)p=!0;else for(var o=0;o<e.length;o++)this.activeCues_.indexOf(e[o])===-1&&(p=!0);return this.activeCues_=e,d.setCues_(this.activeCues_),d},set:function(){}}),o.src?(l.src=o.src,vn(o.src,l)):l.loaded_=!0,n=l,Be(i,n)}return Fe(e,t),e.prototype.addCue=function(t){var e=t;if(se.vttjs&&!(t instanceof se.vttjs.VTTCue)){e=new se.vttjs.VTTCue(t.startTime,t.endTime,t.text);for(var i in t)i in e||(e[i]=t[i]);e.id=t.id,e.originalCue_=t}for(var n=this.tech_.textTracks(),r=0;r<n.length;r++)n[r]!==this&&n[r].removeCue(e);this.cues_.push(e),this.cues.setCues_(this.cues_)},e.prototype.removeCue=function(t){for(var e=this.cues_.length;e--;){var i=this.cues_[e];if(i===t||i.originalCue_&&i.originalCue_===t){this.cues_.splice(e,1),this.cues.setCues_(this.cues_);break}}},e}(Ki);yn.prototype.allowedEvents_={cuechange:"cuechange"};var gn=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Le(this,e);var o=Z(r,{kind:Xi[r.kind]||""}),s=i=Be(this,t.call(this,o)),a=!1;if(je)for(var l in e.prototype)"constructor"!==l&&(s[l]=e.prototype[l]);return Object.defineProperty(s,"enabled",{get:function(){return a},set:function(t){"boolean"==typeof t&&t!==a&&(a=t,this.trigger("enabledchange"))}}),o.enabled&&(s.enabled=o.enabled),s.loaded_=!0,n=s,Be(i,n)}return Fe(e,t),e}(Ki),mn=function(t){function e(){var i,n,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};
Le(this,e);var o=Z(r,{kind:qi[r.kind]||""}),s=i=Be(this,t.call(this,o)),a=!1;if(je)for(var l in e.prototype)"constructor"!==l&&(s[l]=e.prototype[l]);return Object.defineProperty(s,"selected",{get:function(){return a},set:function(t){"boolean"==typeof t&&t!==a&&(a=t,this.trigger("selectedchange"))}}),o.selected&&(s.selected=o.selected),n=s,Be(i,n)}return Fe(e,t),e}(Ki),bn=0,_n=1,Tn=2,wn=3,kn=function(t){function e(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Le(this,e);var n=Be(this,t.call(this)),r=void 0,o=n;if(je){o=de.createElement("custom");for(var s in e.prototype)"constructor"!==s&&(o[s]=e.prototype[s])}var a=new yn(i);if(o.kind=a.kind,o.src=a.src,o.srclang=a.language,o.label=a.label,o["default"]=a["default"],Object.defineProperty(o,"readyState",{get:function(){return r}}),Object.defineProperty(o,"track",{get:function(){return a}}),r=bn,a.addEventListener("loadeddata",function(){r=Tn,o.trigger({type:"load",target:o})}),je){var l;return l=o,Be(n,l)}return n}return Fe(e,t),e}(di);kn.prototype.allowedEvents_={load:"load"},kn.NONE=bn,kn.LOADING=_n,kn.LOADED=Tn,kn.ERROR=wn;var Cn={audio:{ListClass:Ri,TrackClass:gn,capitalName:"Audio"},video:{ListClass:zi,TrackClass:mn,capitalName:"Video"},text:{ListClass:Vi,TrackClass:yn,capitalName:"Text"}};Object.keys(Cn).forEach(function(t){Cn[t].getterName=t+"Tracks",Cn[t].privateName=t+"Tracks_"});var Sn={remoteText:{ListClass:Vi,TrackClass:yn,capitalName:"RemoteText",getterName:"remoteTextTracks",privateName:"remoteTextTracks_"},remoteTextEl:{ListClass:Ui,TrackClass:kn,capitalName:"RemoteTextTrackEls",getterName:"remoteTextTrackEls",privateName:"remoteTextTrackEls_"}},En=Z(Cn,Sn);Sn.names=Object.keys(Sn),Cn.names=Object.keys(Cn),En.names=[].concat(Sn.names).concat(Cn.names);var xn=Object.create||function(){function t(){}return function(e){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return t.prototype=e,new t}}();_t.prototype=xn(Error.prototype),_t.prototype.constructor=_t,_t.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},wt.prototype={set:function(t,e){this.get(t)||""===e||(this.values[t]=e)},get:function(t,e,i){return i?this.has(t)?this.values[t]:e[i]:this.has(t)?this.values[t]:e},has:function(t){return t in this.values},alt:function(t,e,i){for(var n=0;n<i.length;++n)if(e===i[n]){this.set(t,e);break}},integer:function(t,e){/^-?\d+$/.test(e)&&this.set(t,parseInt(e,10))},percent:function(t,e){var i;return!!((i=e.match(/^([\d]{1,3})(\.[\d]*)?%$/))&&(e=parseFloat(e),e>=0&&e<=100))&&(this.set(t,e),!0)}};var jn={"&amp;":"&","&lt;":"<","&gt;":">","&lrm;":"‎","&rlm;":"‏","&nbsp;":" "},On={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},An={v:"title",lang:"lang"},Pn={rt:"ruby"},Dn=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];Ot.prototype.applyStyles=function(t,e){e=e||this.div;for(var i in t)t.hasOwnProperty(i)&&(e.style[i]=t[i])},Ot.prototype.formatStyle=function(t,e){return 0===t?0:t+e},At.prototype=xn(Ot.prototype),At.prototype.constructor=At,Pt.prototype.move=function(t,e){switch(e=void 0!==e?e:this.lineHeight,t){case"+x":this.left+=e,this.right+=e;break;case"-x":this.left-=e,this.right-=e;break;case"+y":this.top+=e,this.bottom+=e;break;case"-y":this.top-=e,this.bottom-=e}},Pt.prototype.overlaps=function(t){return this.left<t.right&&this.right>t.left&&this.top<t.bottom&&this.bottom>t.top},Pt.prototype.overlapsAny=function(t){for(var e=0;e<t.length;e++)if(this.overlaps(t[e]))return!0;return!1},Pt.prototype.within=function(t){return this.top>=t.top&&this.bottom<=t.bottom&&this.left>=t.left&&this.right<=t.right},Pt.prototype.overlapsOppositeAxis=function(t,e){switch(e){case"+x":return this.left<t.left;case"-x":return this.right>t.right;case"+y":return this.top<t.top;case"-y":return this.bottom>t.bottom}},Pt.prototype.intersectPercentage=function(t){var e=Math.max(0,Math.min(this.right,t.right)-Math.max(this.left,t.left)),i=Math.max(0,Math.min(this.bottom,t.bottom)-Math.max(this.top,t.top)),n=e*i;return n/(this.height*this.width)},Pt.prototype.toCSSCompatValues=function(t){return{top:this.top-t.top,bottom:t.bottom-this.bottom,left:this.left-t.left,right:t.right-this.right,height:this.height,width:this.width}},Pt.getSimpleBoxPosition=function(t){var e=t.div?t.div.offsetHeight:t.tagName?t.offsetHeight:0,i=t.div?t.div.offsetWidth:t.tagName?t.offsetWidth:0,n=t.div?t.div.offsetTop:t.tagName?t.offsetTop:0;t=t.div?t.div.getBoundingClientRect():t.tagName?t.getBoundingClientRect():t;var r={left:t.left,right:t.right,top:t.top||n,height:t.height||e,bottom:t.bottom||n+(t.height||e),width:t.width||i};return r},Mt.StringDecoder=function(){return{decode:function(t){if(!t)return"";if("string"!=typeof t)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(t))}}},Mt.convertCueToDOMTree=function(t,e){return t&&e?St(t,e):null};var Mn=.05,In="sans-serif",Nn="1.5%";Mt.processCues=function(t,e,i){function n(t){for(var e=0;e<t.length;e++)if(t[e].hasBeenReset||!t[e].displayState)return!0;return!1}if(!t||!e||!i)return null;for(;i.firstChild;)i.removeChild(i.firstChild);var r=t.document.createElement("div");if(r.style.position="absolute",r.style.left="0",r.style.right="0",r.style.top="0",r.style.bottom="0",r.style.margin=Nn,i.appendChild(r),n(e)){var o=[],s=Pt.getSimpleBoxPosition(r),a=Math.round(s.height*Mn*100)/100,l={font:a+"px "+In};!function(){for(var i,n,a=0;a<e.length;a++)n=e[a],i=new At(t,n,l),r.appendChild(i.div),Dt(t,i,s,o),n.displayState=i.div,o.push(Pt.getSimpleBoxPosition(i))}()}else for(var u=0;u<e.length;u++)r.appendChild(e[u].displayState)},Mt.Parser=function(t,e,i){i||(i=e,e={}),e||(e={}),this.window=t,this.vttjs=e,this.state="INITIAL",this.buffer="",this.decoder=i||new TextDecoder("utf8"),this.regionList=[]},Mt.Parser.prototype={reportOrThrowError:function(t){if(!(t instanceof _t))throw t;this.onparsingerror&&this.onparsingerror(t)},parse:function(t){function e(){for(var t=o.buffer,e=0;e<t.length&&"\r"!==t[e]&&"\n"!==t[e];)++e;var i=t.substr(0,e);return"\r"===t[e]&&++e,"\n"===t[e]&&++e,o.buffer=t.substr(e),i}function i(t){var e=new wt;if(kt(t,function(t,i){switch(t){case"id":e.set(t,i);break;case"width":e.percent(t,i);break;case"lines":e.integer(t,i);break;case"regionanchor":case"viewportanchor":var n=i.split(",");if(2!==n.length)break;var r=new wt;if(r.percent("x",n[0]),r.percent("y",n[1]),!r.has("x")||!r.has("y"))break;e.set(t+"X",r.get("x")),e.set(t+"Y",r.get("y"));break;case"scroll":e.alt(t,i,["up"])}},/=/,/\s/),e.has("id")){var i=new(o.vttjs.VTTRegion||o.window.VTTRegion);i.width=e.get("width",100),i.lines=e.get("lines",3),i.regionAnchorX=e.get("regionanchorX",0),i.regionAnchorY=e.get("regionanchorY",100),i.viewportAnchorX=e.get("viewportanchorX",0),i.viewportAnchorY=e.get("viewportanchorY",100),i.scroll=e.get("scroll",""),o.onregion&&o.onregion(i),o.regionList.push({id:e.get("id"),region:i})}}function n(t){var e=new wt;kt(t,function(t,i){switch(t){case"MPEGT":e.integer(t+"S",i);break;case"LOCA":e.set(t+"L",Tt(i))}},/[^\d]:/,/,/),o.ontimestampmap&&o.ontimestampmap({MPEGTS:e.get("MPEGTS"),LOCAL:e.get("LOCAL")})}function r(t){t.match(/X-TIMESTAMP-MAP/)?kt(t,function(t,e){switch(t){case"X-TIMESTAMP-MAP":n(e)}},/=/):kt(t,function(t,e){switch(t){case"Region":i(e)}},/:/)}var o=this;t&&(o.buffer+=o.decoder.decode(t,{stream:!0}));try{var s;if("INITIAL"===o.state){if(!/\r\n|\n/.test(o.buffer))return this;s=e();var a=s.match(/^WEBVTT([ \t].*)?$/);if(!a||!a[0])throw new _t(_t.Errors.BadSignature);o.state="HEADER"}for(var l=!1;o.buffer;){if(!/\r\n|\n/.test(o.buffer))return this;switch(l?l=!1:s=e(),o.state){case"HEADER":/:/.test(s)?r(s):s||(o.state="ID");continue;case"NOTE":s||(o.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(s)){o.state="NOTE";break}if(!s)continue;if(o.cue=new(o.vttjs.VTTCue||o.window.VTTCue)(0,0,""),o.state="CUE",s.indexOf("-->")===-1){o.cue.id=s;continue}case"CUE":try{Ct(s,o.cue,o.regionList)}catch(u){o.reportOrThrowError(u),o.cue=null,o.state="BADCUE";continue}o.state="CUETEXT";continue;case"CUETEXT":var c=s.indexOf("-->")!==-1;if(!s||c&&(l=!0)){o.oncue&&o.oncue(o.cue),o.cue=null,o.state="ID";continue}o.cue.text&&(o.cue.text+="\n"),o.cue.text+=s;continue;case"BADCUE":s||(o.state="ID");continue}}}catch(u){o.reportOrThrowError(u),"CUETEXT"===o.state&&o.cue&&o.oncue&&o.oncue(o.cue),o.cue=null,o.state="INITIAL"===o.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){var t=this;try{if(t.buffer+=t.decoder.decode(),(t.cue||"HEADER"===t.state)&&(t.buffer+="\n\n",t.parse()),"INITIAL"===t.state)throw new _t(_t.Errors.BadSignature)}catch(e){t.reportOrThrowError(e)}return t.onflush&&t.onflush(),this}};var Ln=Mt,Fn="auto",Bn={"":!0,lr:!0,rl:!0},$n={start:!0,middle:!0,end:!0,left:!0,right:!0};Ft.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)};var Rn=Ft,Hn={"":!0,up:!0},zn=Rt,Vn=t(function(t){var e=t.exports={WebVTT:Ln,VTTCue:Rn,VTTRegion:zn};se.vttjs=e,se.WebVTT=e.WebVTT;var i=e.VTTCue,n=e.VTTRegion,r=se.VTTCue,o=se.VTTRegion;e.shim=function(){se.VTTCue=i,se.VTTRegion=n},e.restore=function(){se.VTTCue=r,se.VTTRegion=o},se.VTTCue||e.shim()}),Un=function(t){function e(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};Le(this,e),i.reportTouchActivity=!1;var r=Be(this,t.call(this,null,i,n));return r.hasStarted_=!1,r.on("playing",function(){this.hasStarted_=!0}),r.on("loadstart",function(){this.hasStarted_=!1}),En.names.forEach(function(t){var e=En[t];i&&i[e.getterName]&&(r[e.privateName]=i[e.getterName])}),r.featuresProgressEvents||r.manualProgressOn(),r.featuresTimeupdateEvents||r.manualTimeUpdatesOn(),["Text","Audio","Video"].forEach(function(t){i["native"+t+"Tracks"]===!1&&(r["featuresNative"+t+"Tracks"]=!1)}),i.nativeCaptions===!1||i.nativeTextTracks===!1?r.featuresNativeTextTracks=!1:i.nativeCaptions!==!0&&i.nativeTextTracks!==!0||(r.featuresNativeTextTracks=!0),r.featuresNativeTextTracks||r.emulateTextTracks(),r.autoRemoteTextTracks_=new En.text.ListClass,r.initTrackListeners(),i.nativeControlsForTouch||r.emitTapEvents(),r.constructor&&(r.name_=r.constructor.name||"Unknown Tech"),r}return Fe(e,t),e.prototype.manualProgressOn=function(){this.on("durationchange",this.onDurationChange),this.manualProgress=!0,this.one("ready",this.trackProgress)},e.prototype.manualProgressOff=function(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange)},e.prototype.trackProgress=function(t){this.stopTrackingProgress(),this.progressInterval=this.setInterval(ui(this,function(){var t=this.bufferedPercent();this.bufferedPercent_!==t&&this.trigger("progress"),this.bufferedPercent_=t,1===t&&this.stopTrackingProgress()}),500)},e.prototype.onDurationChange=function(t){this.duration_=this.duration()},e.prototype.buffered=function(){return nt(0,0)},e.prototype.bufferedPercent=function(){return rt(this.buffered(),this.duration_)},e.prototype.stopTrackingProgress=function(){this.clearInterval(this.progressInterval)},e.prototype.manualTimeUpdatesOn=function(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime),this.on("pause",this.stopTrackingCurrentTime)},e.prototype.manualTimeUpdatesOff=function(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime),this.off("pause",this.stopTrackingCurrentTime)},e.prototype.trackCurrentTime=function(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval(function(){this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},250)},e.prototype.stopTrackingCurrentTime=function(){this.clearInterval(this.currentTimeInterval),this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},e.prototype.dispose=function(){this.clearTracks(Cn.names),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),t.prototype.dispose.call(this)},e.prototype.clearTracks=function(t){var e=this;t=[].concat(t),t.forEach(function(t){for(var i=e[t+"Tracks"]()||[],n=i.length;n--;){var r=i[n];"text"===t&&e.removeRemoteTextTrack(r),i.removeTrack(r)}})},e.prototype.cleanupAutoTextTracks=function(){for(var t=this.autoRemoteTextTracks_||[],e=t.length;e--;){var i=t[e];this.removeRemoteTextTrack(i)}},e.prototype.reset=function(){},e.prototype.error=function(t){return void 0!==t&&(this.error_=new ot(t),this.trigger("error")),this.error_},e.prototype.played=function(){return this.hasStarted_?nt(0,0):nt()},e.prototype.setCurrentTime=function(){this.manualTimeUpdates&&this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},e.prototype.initTrackListeners=function(){var t=this;Cn.names.forEach(function(e){var i=Cn[e],n=function(){t.trigger(e+"trackchange")},r=t[i.getterName]();r.addEventListener("removetrack",n),r.addEventListener("addtrack",n),t.on("dispose",function(){r.removeEventListener("removetrack",n),r.removeEventListener("addtrack",n)})})},e.prototype.addWebVttScript_=function(){var t=this;if(!se.WebVTT)if(de.body.contains(this.el())){if(!this.options_["vtt.js"]&&o(Vn)&&Object.keys(Vn).length>0)return void this.trigger("vttjsloaded");var e=de.createElement("script");e.src=this.options_["vtt.js"]||"https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js",e.onload=function(){t.trigger("vttjsloaded")},e.onerror=function(){t.trigger("vttjserror")},this.on("dispose",function(){e.onload=null,e.onerror=null}),se.WebVTT=!0,this.el().parentNode.appendChild(e)}else this.ready(this.addWebVttScript_)},e.prototype.emulateTextTracks=function(){var t=this,e=this.textTracks(),i=this.remoteTextTracks(),n=function(t){return e.addTrack(t.track)},r=function(t){return e.removeTrack(t.track)};i.on("addtrack",n),i.on("removetrack",r),this.addWebVttScript_();var o=function(){return t.trigger("texttrackchange")},s=function(){o();for(var t=0;t<e.length;t++){var i=e[t];i.removeEventListener("cuechange",o),"showing"===i.mode&&i.addEventListener("cuechange",o)}};s(),e.addEventListener("change",s),e.addEventListener("addtrack",s),e.addEventListener("removetrack",s),this.on("dispose",function(){i.off("addtrack",n),i.off("removetrack",r),e.removeEventListener("change",s),e.removeEventListener("addtrack",s),e.removeEventListener("removetrack",s);for(var t=0;t<e.length;t++){var a=e[t];a.removeEventListener("cuechange",o)}})},e.prototype.addTextTrack=function(t,e,i){if(!t)throw new Error("TextTrack kind is required but was not provided");return Ht(this,t,e,i)},e.prototype.createRemoteTextTrack=function(t){var e=Z(t,{tech:this});return new Sn.remoteTextEl.TrackClass(e)},e.prototype.addRemoteTextTrack=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments[1],n=this.createRemoteTextTrack(e);return i!==!0&&i!==!1&&(qe.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js'),i=!0),this.remoteTextTrackEls().addTrackElement_(n),this.remoteTextTracks().addTrack(n.track),i!==!0&&this.ready(function(){return t.autoRemoteTextTracks_.addTrack(n.track)}),n},e.prototype.removeRemoteTextTrack=function(t){var e=this.remoteTextTrackEls().getTrackElementByTrack_(t);this.remoteTextTrackEls().removeTrackElement_(e),this.remoteTextTracks().removeTrack(t),this.autoRemoteTextTracks_.removeTrack(t)},e.prototype.getVideoPlaybackQuality=function(){return{}},e.prototype.setPoster=function(){},e.prototype.playsinline=function(){},e.prototype.setPlaysinline=function(){},e.prototype.canPlayType=function(){return""},e.canPlayType=function(){return""},e.canPlaySource=function(t,i){return e.canPlayType(t.type)},e.isTech=function(t){return t.prototype instanceof e||t instanceof e||t===e},e.registerTech=function(t,i){if(e.techs_||(e.techs_={}),!e.isTech(i))throw new Error("Tech "+t+" must be a Tech");if(!e.canPlayType)throw new Error("Techs must have a static canPlayType method on them");if(!e.canPlaySource)throw new Error("Techs must have a static canPlaySource method on them");return t=J(t),e.techs_[t]=i,"Tech"!==t&&e.defaultTechOrder_.push(t),i},e.getTech=function(t){if(t)return t=J(t),e.techs_&&e.techs_[t]?e.techs_[t]:se&&se.videojs&&se.videojs[t]?(qe.warn("The "+t+" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"),se.videojs[t]):void 0},e}(Ti);En.names.forEach(function(t){var e=En[t];Un.prototype[e.getterName]=function(){return this[e.privateName]=this[e.privateName]||new e.ListClass,this[e.privateName]}}),Un.prototype.featuresVolumeControl=!0,Un.prototype.featuresFullscreenResize=!1,Un.prototype.featuresPlaybackRate=!1,Un.prototype.featuresProgressEvents=!1,Un.prototype.featuresTimeupdateEvents=!1,Un.prototype.featuresNativeTextTracks=!1,Un.withSourceHandlers=function(t){t.registerSourceHandler=function(e,i){var n=t.sourceHandlers;n||(n=t.sourceHandlers=[]),void 0===i&&(i=n.length),n.splice(i,0,e)},t.canPlayType=function(e){for(var i=t.sourceHandlers||[],n=void 0,r=0;r<i.length;r++)if(n=i[r].canPlayType(e))return n;return""},t.selectSourceHandler=function(e,i){for(var n=t.sourceHandlers||[],r=void 0,o=0;o<n.length;o++)if(r=n[o].canHandleSource(e,i))return n[o];return null},t.canPlaySource=function(e,i){var n=t.selectSourceHandler(e,i);return n?n.canHandleSource(e,i):""};var e=["seekable","duration"];e.forEach(function(t){var e=this[t];"function"==typeof e&&(this[t]=function(){return this.sourceHandler_&&this.sourceHandler_[t]?this.sourceHandler_[t].apply(this.sourceHandler_,arguments):e.apply(this,arguments)})},t.prototype),t.prototype.setSource=function(e){var i=t.selectSourceHandler(e,this.options_);i||(t.nativeSourceHandler?i=t.nativeSourceHandler:qe.error("No source hander found for the current source.")),this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler),i!==t.nativeSourceHandler&&(this.currentSource_=e),this.sourceHandler_=i.handleSource(e,this,this.options_),this.on("dispose",this.disposeSourceHandler)},t.prototype.disposeSourceHandler=function(){this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),this.cleanupAutoTextTracks(),this.sourceHandler_&&(this.sourceHandler_.dispose&&this.sourceHandler_.dispose(),this.sourceHandler_=null)}},Ti.registerComponent("Tech",Un),Un.registerTech("Tech",Un),Un.defaultTechOrder_=[];var Wn={},qn={buffered:1,currentTime:1,duration:1,seekable:1,played:1},Xn={setCurrentTime:1},Yn=function Lo(t){if(Array.isArray(t)){var e=[];t.forEach(function(t){t=Lo(t),Array.isArray(t)?e=e.concat(t):r(t)&&e.push(t)}),t=e}else t="string"==typeof t&&t.trim()?[{src:t}]:r(t)&&"string"==typeof t.src&&t.src&&t.src.trim()?[t]:[];return t},Gn=function(t){function e(i,n,r){Le(this,e);var o=Z({createEl:!1},n),s=Be(this,t.call(this,i,o,r));if(n.playerOptions.sources&&0!==n.playerOptions.sources.length)i.src(n.playerOptions.sources);else for(var a=0,l=n.playerOptions.techOrder;a<l.length;a++){var u=J(l[a]),c=Un.getTech(u);if(u||(c=Ti.getComponent(u)),c&&c.isSupported()){i.loadTech_(u);break}}return s}return Fe(e,t),e}(Ti);Ti.registerComponent("MediaLoader",Gn);var Kn=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.emitTapEvents(),r.enable(),r}return Fe(e,t),e.prototype.createEl=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};i=n({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass(),tabIndex:0},i),"button"===e&&qe.error("Creating a ClickableComponent with an HTML element of "+e+" is not supported; use a Button instead."),r=n({role:"button","aria-live":"polite"},r),this.tabIndex_=i.tabIndex;var o=t.prototype.createEl.call(this,e,i,r);return this.createControlTextEl(o),o},e.prototype.createControlTextEl=function(t){return this.controlTextEl_=v("span",{className:"vjs-control-text"}),t&&t.appendChild(this.controlTextEl_),this.controlText(this.controlText_,t),this.controlTextEl_},e.prototype.controlText=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.el();if(!t)return this.controlText_||"Need Text";var i=this.localize(t);this.controlText_=t,y(this.controlTextEl_,i),this.nonIconControl||e.setAttribute("title",i)},e.prototype.buildCSSClass=function(){return"vjs-control vjs-button "+t.prototype.buildCSSClass.call(this)},e.prototype.enable=function(){this.enabled_||(this.enabled_=!0,this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),"undefined"!=typeof this.tabIndex_&&this.el_.setAttribute("tabIndex",this.tabIndex_),this.on(["tap","click"],this.handleClick),this.on("focus",this.handleFocus),this.on("blur",this.handleBlur))},e.prototype.disable=function(){this.enabled_=!1,this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),"undefined"!=typeof this.tabIndex_&&this.el_.removeAttribute("tabIndex"),this.off(["tap","click"],this.handleClick),this.off("focus",this.handleFocus),this.off("blur",this.handleBlur)},e.prototype.handleClick=function(t){},e.prototype.handleFocus=function(t){U(de,"keydown",ui(this,this.handleKeyPress))},e.prototype.handleKeyPress=function(e){32===e.which||13===e.which?(e.preventDefault(),this.trigger("click")):t.prototype.handleKeyPress&&t.prototype.handleKeyPress.call(this,e)},e.prototype.handleBlur=function(t){W(de,"keydown",ui(this,this.handleKeyPress))},e}(Ti);Ti.registerComponent("ClickableComponent",Kn);var Jn=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.update(),i.on("posterchange",ui(r,r.update)),r}return Fe(e,t),e.prototype.dispose=function(){this.player().off("posterchange",this.update),t.prototype.dispose.call(this)},e.prototype.createEl=function(){var t=v("div",{className:"vjs-poster",tabIndex:-1});return Me||(this.fallbackImg_=v("img"),t.appendChild(this.fallbackImg_)),t},e.prototype.update=function(t){var e=this.player().poster();this.setSrc(e),e?this.show():this.hide()},e.prototype.setSrc=function(t){if(this.fallbackImg_)this.fallbackImg_.src=t;else{var e="";t&&(e='url("'+t+'")'),this.el_.style.backgroundImage=e}},e.prototype.handleClick=function(t){this.player_.controls()&&(this.player_.paused()?this.player_.play():this.player_.pause())},e}(Kn);Ti.registerComponent("PosterImage",Jn);var Qn="#222",Zn="#ccc",tr={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'},er=function(t){function e(i,n,r){Le(this,e);var o=Be(this,t.call(this,i,n,r));return i.on("loadstart",ui(o,o.toggleDisplay)),i.on("texttrackchange",ui(o,o.updateDisplay)),i.on("loadstart",ui(o,o.preselectTrack)),i.ready(ui(o,function(){if(i.tech_&&i.tech_.featuresNativeTextTracks)return void this.hide();i.on("fullscreenchange",ui(this,this.updateDisplay));for(var t=this.options_.playerOptions.tracks||[],e=0;e<t.length;e++)this.player_.addRemoteTextTrack(t[e],!0);this.preselectTrack()})),o}return Fe(e,t),e.prototype.preselectTrack=function(){for(var t={captions:1,subtitles:1},e=this.player_.textTracks(),i=this.player_.cache_.selectedLanguage,n=void 0,r=void 0,o=void 0,s=0;s<e.length;s++){var a=e[s];i&&i.enabled&&i.language===a.language?a.kind===i.kind?o=a:o||(o=a):i&&!i.enabled?(o=null,n=null,r=null):a["default"]&&("descriptions"!==a.kind||n?a.kind in t&&!r&&(r=a):n=a)}o?o.mode="showing":r?r.mode="showing":n&&(n.mode="showing")},e.prototype.toggleDisplay=function(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-text-track-display"},{"aria-live":"off","aria-atomic":"true"})},e.prototype.clearDisplay=function(){"function"==typeof se.WebVTT&&se.WebVTT.processCues(se,[],this.el_)},e.prototype.updateDisplay=function(){var t=this.player_.textTracks();this.clearDisplay();for(var e=null,i=null,n=t.length;n--;){var r=t[n];"showing"===r.mode&&("descriptions"===r.kind?e=r:i=r)}i?("off"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","off"),this.updateForTrack(i)):e&&("assertive"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","assertive"),this.updateForTrack(e))},e.prototype.updateForTrack=function(t){if("function"==typeof se.WebVTT&&t.activeCues){for(var e=this.player_.textTrackSettings.getValues(),i=[],n=0;n<t.activeCues.length;n++)i.push(t.activeCues[n]);se.WebVTT.processCues(se,i,this.el_);for(var r=i.length;r--;){var o=i[r];if(o){var s=o.displayState;if(e.color&&(s.firstChild.style.color=e.color),e.textOpacity&&Kt(s.firstChild,"color",Gt(e.color||"#fff",e.textOpacity)),e.backgroundColor&&(s.firstChild.style.backgroundColor=e.backgroundColor),e.backgroundOpacity&&Kt(s.firstChild,"backgroundColor",Gt(e.backgroundColor||"#000",e.backgroundOpacity)),e.windowColor&&(e.windowOpacity?Kt(s,"backgroundColor",Gt(e.windowColor,e.windowOpacity)):s.style.backgroundColor=e.windowColor),e.edgeStyle&&("dropshadow"===e.edgeStyle?s.firstChild.style.textShadow="2px 2px 3px "+Qn+", 2px 2px 4px "+Qn+", 2px 2px 5px "+Qn:"raised"===e.edgeStyle?s.firstChild.style.textShadow="1px 1px "+Qn+", 2px 2px "+Qn+", 3px 3px "+Qn:"depressed"===e.edgeStyle?s.firstChild.style.textShadow="1px 1px "+Zn+", 0 1px "+Zn+", -1px -1px "+Qn+", 0 -1px "+Qn:"uniform"===e.edgeStyle&&(s.firstChild.style.textShadow="0 0 4px "+Qn+", 0 0 4px "+Qn+", 0 0 4px "+Qn+", 0 0 4px "+Qn)),e.fontPercent&&1!==e.fontPercent){var a=se.parseFloat(s.style.fontSize);s.style.fontSize=a*e.fontPercent+"px",s.style.height="auto",s.style.top="auto",s.style.bottom="2px"}e.fontFamily&&"default"!==e.fontFamily&&("small-caps"===e.fontFamily?s.firstChild.style.fontVariant="small-caps":s.firstChild.style.fontFamily=tr[e.fontFamily])}}}},e}(Ti);Ti.registerComponent("TextTrackDisplay",er);var ir=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-loading-spinner",dir:"ltr"})},e}(Ti);Ti.registerComponent("LoadingSpinner",ir);var nr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t="button",e=n({innerHTML:'<span aria-hidden="true" class="vjs-icon-placeholder"></span>',className:this.buildCSSClass()},e),i=n({type:"button","aria-live":"polite"},i);var r=Ti.prototype.createEl.call(this,t,e,i);return this.createControlTextEl(r),r},e.prototype.addChild=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=this.constructor.name;return qe.warn("Adding an actionable (user controllable) child to a Button ("+i+") is not supported; use a ClickableComponent instead."),Ti.prototype.addChild.call(this,t,e)},e.prototype.enable=function(){t.prototype.enable.call(this),this.el_.removeAttribute("disabled")},e.prototype.disable=function(){t.prototype.disable.call(this),this.el_.setAttribute("disabled","disabled")},e.prototype.handleKeyPress=function(e){32!==e.which&&13!==e.which&&t.prototype.handleKeyPress.call(this,e)},e}(Kn);Ti.registerComponent("Button",nr);var rr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.mouseused_=!1,r.on("mousedown",r.handleMouseDown),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-big-play-button"},e.prototype.handleClick=function(t){var e=this.player_.play();if(!(this.mouseused_&&t.clientX&&t.clientY)){var i=this.player_.getChild("controlBar"),n=i&&i.getChild("playToggle");if(!n)return void this.player_.focus();var r=function(){return n.focus()};if(e&&e.then){var o=function(){};e.then(r,o)}else this.setTimeout(r,1)}},e.prototype.handleKeyPress=function(e){this.mouseused_=!1,t.prototype.handleKeyPress.call(this,e)},e.prototype.handleMouseDown=function(t){this.mouseused_=!0},e}(nr);rr.prototype.controlText_="Play Video",Ti.registerComponent("BigPlayButton",rr);var or=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.controlText(n&&n.controlText||r.localize("Close")),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-close-button "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(t){this.trigger({type:"close",bubbles:!1})},e}(nr);Ti.registerComponent("CloseButton",or);var sr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"play",r.handlePlay),r.on(i,"pause",r.handlePause),r.on(i,"ended",r.handleEnded),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-play-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(t){this.player_.paused()?this.player_.play():this.player_.pause()},e.prototype.handleSeeked=function(t){this.removeClass("vjs-ended"),this.player_.paused()?this.handlePause(t):this.handlePlay(t)},e.prototype.handlePlay=function(t){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.controlText("Pause")},e.prototype.handlePause=function(t){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.controlText("Play")},e.prototype.handleEnded=function(t){this.removeClass("vjs-playing"),this.addClass("vjs-ended"),this.controlText("Replay"),this.one(this.player_,"seeked",this.handleSeeked)},e}(nr);sr.prototype.controlText_="Play",Ti.registerComponent("PlayToggle",sr);var ar=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.throttledUpdateContent=ci(ui(r,r.updateContent),25),r.on(i,"timeupdate",r.throttledUpdateContent),r}return Fe(e,t),e.prototype.createEl=function(e){var i=this.buildCSSClass(),n=t.prototype.createEl.call(this,"div",{className:i+" vjs-time-control vjs-control"});return this.contentEl_=v("div",{className:i+"-display"},{"aria-live":"off"},v("span",{className:"vjs-control-text",textContent:this.localize(this.controlText_)})),this.updateTextNode_(),n.appendChild(this.contentEl_),n},e.prototype.updateTextNode_=function(){if(this.contentEl_){for(;this.contentEl_.firstChild;)this.contentEl_.removeChild(this.contentEl_.firstChild);this.textNode_=de.createTextNode(this.formattedTime_||"0:00"),
this.contentEl_.appendChild(this.textNode_)}},e.prototype.formatTime_=function(t){return Jt(t)},e.prototype.updateFormattedTime_=function(t){var e=this.formatTime_(t);e!==this.formattedTime_&&(this.formattedTime_=e,this.requestAnimationFrame(this.updateTextNode_))},e.prototype.updateContent=function(t){},e}(Ti);ar.prototype.controlText_="Time",Ti.registerComponent("TimeDisplay",ar);var lr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"ended",r.handleEnded),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-current-time"},e.prototype.updateContent=function(t){var e=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();this.updateFormattedTime_(e)},e.prototype.handleEnded=function(t){this.player_.duration()&&this.updateFormattedTime_(this.player_.duration())},e}(ar);lr.prototype.controlText_="Current Time",Ti.registerComponent("CurrentTimeDisplay",lr);var ur=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"durationchange",r.updateContent),r.on(i,"loadedmetadata",r.throttledUpdateContent),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-duration"},e.prototype.updateContent=function(t){var e=this.player_.duration();e&&this.duration_!==e&&(this.duration_=e,this.updateFormattedTime_(e))},e}(ar);ur.prototype.controlText_="Duration Time",Ti.registerComponent("DurationDisplay",ur);var cr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-time-control vjs-time-divider",innerHTML:"<div><span>/</span></div>"})},e}(Ti);Ti.registerComponent("TimeDivider",cr);var dr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"durationchange",r.throttledUpdateContent),r.on(i,"ended",r.handleEnded),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-remaining-time"},e.prototype.formatTime_=function(e){return"-"+t.prototype.formatTime_.call(this,e)},e.prototype.updateContent=function(t){this.player_.duration()&&(this.player_.remainingTimeDisplay?this.updateFormattedTime_(this.player_.remainingTimeDisplay()):this.updateFormattedTime_(this.player_.remainingTime()))},e.prototype.handleEnded=function(t){this.player_.duration()&&this.updateFormattedTime_(0)},e}(ar);dr.prototype.controlText_="Remaining Time",Ti.registerComponent("RemainingTimeDisplay",dr);var pr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.updateShowing(),r.on(r.player(),"durationchange",r.updateShowing),r}return Fe(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-live-control vjs-control"});return this.contentEl_=v("div",{className:"vjs-live-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Stream Type")+"</span>"+this.localize("LIVE")},{"aria-live":"off"}),e.appendChild(this.contentEl_),e},e.prototype.updateShowing=function(t){this.player().duration()===1/0?this.show():this.hide()},e}(Ti);Ti.registerComponent("LiveDisplay",pr);var hr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.bar=r.getChild(r.options_.barName),r.vertical(!!r.options_.vertical),r.enable(),r}return Fe(e,t),e.prototype.enabled=function(){return this.enabled_},e.prototype.enable=function(){this.enabled()||(this.on("mousedown",this.handleMouseDown),this.on("touchstart",this.handleMouseDown),this.on("focus",this.handleFocus),this.on("blur",this.handleBlur),this.on("click",this.handleClick),this.on(this.player_,"controlsvisible",this.update),this.playerEvent&&this.on(this.player_,this.playerEvent,this.update),this.removeClass("disabled"),this.setAttribute("tabindex",0),this.enabled_=!0)},e.prototype.disable=function(){if(this.enabled()){var t=this.bar.el_.ownerDocument;this.off("mousedown",this.handleMouseDown),this.off("touchstart",this.handleMouseDown),this.off("focus",this.handleFocus),this.off("blur",this.handleBlur),this.off("click",this.handleClick),this.off(this.player_,"controlsvisible",this.update),this.off(t,"mousemove",this.handleMouseMove),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchmove",this.handleMouseMove),this.off(t,"touchend",this.handleMouseUp),this.removeAttribute("tabindex"),this.addClass("disabled"),this.playerEvent&&this.off(this.player_,this.playerEvent,this.update),this.enabled_=!1}},e.prototype.createEl=function(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return i.className=i.className+" vjs-slider",i=n({tabIndex:0},i),r=n({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},r),t.prototype.createEl.call(this,e,i,r)},e.prototype.handleMouseDown=function(t){var e=this.bar.el_.ownerDocument;t.preventDefault(),x(),this.addClass("vjs-sliding"),this.trigger("slideractive"),this.on(e,"mousemove",this.handleMouseMove),this.on(e,"mouseup",this.handleMouseUp),this.on(e,"touchmove",this.handleMouseMove),this.on(e,"touchend",this.handleMouseUp),this.handleMouseMove(t)},e.prototype.handleMouseMove=function(t){},e.prototype.handleMouseUp=function(){var t=this.bar.el_.ownerDocument;j(),this.removeClass("vjs-sliding"),this.trigger("sliderinactive"),this.off(t,"mousemove",this.handleMouseMove),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchmove",this.handleMouseMove),this.off(t,"touchend",this.handleMouseUp),this.update()},e.prototype.update=function(){if(this.el_){var t=this.getPercent(),e=this.bar;if(e){("number"!=typeof t||t!==t||t<0||t===1/0)&&(t=0);var i=(100*t).toFixed(2)+"%",n=e.el().style;return this.vertical()?n.height=i:n.width=i,t}}},e.prototype.calculateDistance=function(t){var e=P(this.el_,t);return this.vertical()?e.y:e.x},e.prototype.handleFocus=function(){this.on(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)},e.prototype.handleKeyPress=function(t){37===t.which||40===t.which?(t.preventDefault(),this.stepBack()):38!==t.which&&39!==t.which||(t.preventDefault(),this.stepForward())},e.prototype.handleBlur=function(){this.off(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)},e.prototype.handleClick=function(t){t.stopImmediatePropagation(),t.preventDefault()},e.prototype.vertical=function(t){return void 0===t?this.vertical_||!1:(this.vertical_=!!t,void(this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal")))},e}(Ti);Ti.registerComponent("Slider",hr);var fr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.partEls_=[],r.on(i,"progress",r.update),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-load-progress",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Loaded")+"</span>: 0%</span>"})},e.prototype.update=function(t){var e=this.player_.buffered(),i=this.player_.duration(),n=this.player_.bufferedEnd(),r=this.partEls_,o=function(t,e){var i=t/e||0;return 100*(i>=1?1:i)+"%"};this.el_.style.width=o(n,i);for(var s=0;s<e.length;s++){var a=e.start(s),l=e.end(s),u=r[s];u||(u=this.el_.appendChild(v()),r[s]=u),u.style.left=o(a,n),u.style.width=o(l-a,n)}for(var c=r.length;c>e.length;c--)this.el_.removeChild(r[c-1]);r.length=e.length},e}(Ti);Ti.registerComponent("LoadProgressBar",fr);var vr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-time-tooltip"})},e.prototype.update=function(t,e,i){var n=O(this.el_),r=O(this.player_.el()),o=t.width*e;if(r&&n){var s=t.left-r.left+o,a=t.width-o+(r.right-t.right),l=n.width/2;s<l?l+=l-s:a<l&&(l=a),l<0?l=0:l>n.width&&(l=n.width),this.el_.style.right="-"+l+"px",y(this.el_,i)}},e}(Ti);Ti.registerComponent("TimeTooltip",vr);var yr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-play-progress vjs-slider-bar",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Progress")+"</span>: 0%</span>"})},e.prototype.update=function(t,e){var i=this;this.rafId_&&this.cancelAnimationFrame(this.rafId_),this.rafId_=this.requestAnimationFrame(function(){var n=i.player_.scrubbing()?i.player_.getCache().currentTime:i.player_.currentTime(),r=Jt(n,i.player_.duration()),o=i.getChild("timeTooltip");o&&o.update(t,e,r)})},e}(Ti);yr.prototype.options_={children:[]},Oe&&!(Oe>8)||me||_e||yr.prototype.options_.children.push("timeTooltip"),Ti.registerComponent("PlayProgressBar",yr);var gr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.update=ci(ui(r,r.update),25),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-mouse-display"})},e.prototype.update=function(t,e){var i=this;this.rafId_&&this.cancelAnimationFrame(this.rafId_),this.rafId_=this.requestAnimationFrame(function(){var n=i.player_.duration(),r=Jt(e*n,n);i.el_.style.left=t.width*e+"px",i.getChild("timeTooltip").update(t,e,r)})},e}(Ti);gr.prototype.options_={children:["timeTooltip"]},Ti.registerComponent("MouseTimeDisplay",gr);var mr=5,br=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.update=ci(ui(r,r.update),50),r.on(i,"timeupdate",r.update),r.on(i,"ended",r.handleEnded),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-progress-holder"},{"aria-label":this.localize("Progress Bar")})},e.prototype.update_=function(t,e){var i=this.player_.duration();this.el_.setAttribute("aria-valuenow",(100*e).toFixed(2)),this.el_.setAttribute("aria-valuetext",this.localize("progress bar timing: currentTime={1} duration={2}",[Jt(t,i),Jt(i,i)],"{1} of {2}")),this.bar.update(O(this.el_),e)},e.prototype.update=function(e){var i=t.prototype.update.call(this);return this.update_(this.getCurrentTime_(),i),i},e.prototype.getCurrentTime_=function(){return this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime()},e.prototype.handleEnded=function(t){this.update_(this.player_.duration(),1)},e.prototype.getPercent=function(){var t=this.getCurrentTime_()/this.player_.duration();return t>=1?1:t},e.prototype.handleMouseDown=function(e){this.player_.scrubbing(!0),this.videoWasPlaying=!this.player_.paused(),this.player_.pause(),t.prototype.handleMouseDown.call(this,e)},e.prototype.handleMouseMove=function(t){var e=this.calculateDistance(t)*this.player_.duration();e===this.player_.duration()&&(e-=.1),this.player_.currentTime(e)},e.prototype.enable=function(){t.prototype.enable.call(this);var e=this.getChild("mouseTimeDisplay");e&&e.show()},e.prototype.disable=function(){t.prototype.disable.call(this);var e=this.getChild("mouseTimeDisplay");e&&e.hide()},e.prototype.handleMouseUp=function(e){t.prototype.handleMouseUp.call(this,e),this.player_.scrubbing(!1),this.videoWasPlaying&&this.player_.play()},e.prototype.stepForward=function(){this.player_.currentTime(this.player_.currentTime()+mr)},e.prototype.stepBack=function(){this.player_.currentTime(this.player_.currentTime()-mr)},e.prototype.handleAction=function(t){this.player_.paused()?this.player_.play():this.player_.pause()},e.prototype.handleKeyPress=function(e){32===e.which||13===e.which?(e.preventDefault(),this.handleAction(e)):t.prototype.handleKeyPress&&t.prototype.handleKeyPress.call(this,e)},e}(hr);br.prototype.options_={children:["loadProgressBar","playProgressBar"],barName:"playProgressBar"},Oe&&!(Oe>8)||me||_e||br.prototype.options_.children.splice(1,0,"mouseTimeDisplay"),br.prototype.playerEvent="timeupdate",Ti.registerComponent("SeekBar",br);var _r=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.handleMouseMove=ci(ui(r,r.handleMouseMove),25),r.throttledHandleMouseSeek=ci(ui(r,r.handleMouseSeek),25),r.enable(),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-progress-control vjs-control"})},e.prototype.handleMouseMove=function(t){var e=this.getChild("seekBar"),i=e.getChild("mouseTimeDisplay"),n=e.el(),r=O(n),o=P(n,t).x;o>1?o=1:o<0&&(o=0),i&&i.update(r,o)},e.prototype.handleMouseSeek=function(t){var e=this.getChild("seekBar");e.handleMouseMove(t)},e.prototype.enabled=function(){return this.enabled_},e.prototype.disable=function(){this.children().forEach(function(t){return t.disable&&t.disable()}),this.enabled()&&(this.off(["mousedown","touchstart"],this.handleMouseDown),this.off(this.el_,"mousemove",this.handleMouseMove),this.handleMouseUp(),this.addClass("disabled"),this.enabled_=!1)},e.prototype.enable=function(){this.children().forEach(function(t){return t.enable&&t.enable()}),this.enabled()||(this.on(["mousedown","touchstart"],this.handleMouseDown),this.on(this.el_,"mousemove",this.handleMouseMove),this.removeClass("disabled"),this.enabled_=!0)},e.prototype.handleMouseDown=function(t){var e=this.el_.ownerDocument;this.on(e,"mousemove",this.throttledHandleMouseSeek),this.on(e,"touchmove",this.throttledHandleMouseSeek),this.on(e,"mouseup",this.handleMouseUp),this.on(e,"touchend",this.handleMouseUp)},e.prototype.handleMouseUp=function(t){var e=this.el_.ownerDocument;this.off(e,"mousemove",this.throttledHandleMouseSeek),this.off(e,"touchmove",this.throttledHandleMouseSeek),this.off(e,"mouseup",this.handleMouseUp),this.off(e,"touchend",this.handleMouseUp)},e}(Ti);_r.prototype.options_={children:["seekBar"]},Ti.registerComponent("ProgressControl",_r);var Tr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"fullscreenchange",r.handleFullscreenChange),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-fullscreen-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleFullscreenChange=function(t){this.player_.isFullscreen()?this.controlText("Non-Fullscreen"):this.controlText("Fullscreen")},e.prototype.handleClick=function(t){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()},e}(nr);Tr.prototype.controlText_="Fullscreen",Ti.registerComponent("FullscreenToggle",Tr);var wr=function(t,e){e.tech_&&!e.tech_.featuresVolumeControl&&t.addClass("vjs-hidden"),t.on(e,"loadstart",function(){e.tech_.featuresVolumeControl?t.removeClass("vjs-hidden"):t.addClass("vjs-hidden")})},kr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})},e}(Ti);Ti.registerComponent("VolumeLevel",kr);var Cr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on("slideractive",r.updateLastVolume_),r.on(i,"volumechange",r.updateARIAAttributes),i.ready(function(){return r.updateARIAAttributes()}),r}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":this.localize("Volume Level"),"aria-live":"polite"})},e.prototype.handleMouseMove=function(t){this.checkMuted(),this.player_.volume(this.calculateDistance(t))},e.prototype.checkMuted=function(){this.player_.muted()&&this.player_.muted(!1)},e.prototype.getPercent=function(){return this.player_.muted()?0:this.player_.volume()},e.prototype.stepForward=function(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)},e.prototype.stepBack=function(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)},e.prototype.updateARIAAttributes=function(t){var e=this.player_.muted()?0:this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow",e),this.el_.setAttribute("aria-valuetext",e+"%")},e.prototype.volumeAsPercentage_=function(){return Math.round(100*this.player_.volume())},e.prototype.updateLastVolume_=function(){var t=this,e=this.player_.volume();this.one("sliderinactive",function(){0===t.player_.volume()&&t.player_.lastVolume_(e)})},e}(hr);Cr.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},Cr.prototype.playerEvent="volumechange",Ti.registerComponent("VolumeBar",Cr);var Sr=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Le(this,e),n.vertical=n.vertical||!1,("undefined"==typeof n.volumeBar||o(n.volumeBar))&&(n.volumeBar=n.volumeBar||{},n.volumeBar.vertical=n.vertical);var r=Be(this,t.call(this,i,n));return wr(r,i),r.throttledHandleMouseMove=ci(ui(r,r.handleMouseMove),25),r.on("mousedown",r.handleMouseDown),r.on("touchstart",r.handleMouseDown),r.on(r.volumeBar,["focus","slideractive"],function(){r.volumeBar.addClass("vjs-slider-active"),r.addClass("vjs-slider-active"),r.trigger("slideractive")}),r.on(r.volumeBar,["blur","sliderinactive"],function(){r.volumeBar.removeClass("vjs-slider-active"),r.removeClass("vjs-slider-active"),r.trigger("sliderinactive")}),r}return Fe(e,t),e.prototype.createEl=function(){var e="vjs-volume-horizontal";return this.options_.vertical&&(e="vjs-volume-vertical"),t.prototype.createEl.call(this,"div",{className:"vjs-volume-control vjs-control "+e})},e.prototype.handleMouseDown=function(t){var e=this.el_.ownerDocument;this.on(e,"mousemove",this.throttledHandleMouseMove),this.on(e,"touchmove",this.throttledHandleMouseMove),this.on(e,"mouseup",this.handleMouseUp),this.on(e,"touchend",this.handleMouseUp)},e.prototype.handleMouseUp=function(t){var e=this.el_.ownerDocument;this.off(e,"mousemove",this.throttledHandleMouseMove),this.off(e,"touchmove",this.throttledHandleMouseMove),this.off(e,"mouseup",this.handleMouseUp),this.off(e,"touchend",this.handleMouseUp)},e.prototype.handleMouseMove=function(t){this.volumeBar.handleMouseMove(t)},e}(Ti);Sr.prototype.options_={children:["volumeBar"]},Ti.registerComponent("VolumeControl",Sr);var Er=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return wr(r,i),r.on(i,["loadstart","volumechange"],r.update),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-mute-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(t){var e=this.player_.volume(),i=this.player_.lastVolume_();if(0===e){var n=i<.1?.1:i;this.player_.volume(n),this.player_.muted(!1)}else this.player_.muted(!this.player_.muted())},e.prototype.update=function(t){this.updateIcon_(),this.updateControlText_()},e.prototype.updateIcon_=function(){var t=this.player_.volume(),e=3;0===t||this.player_.muted()?e=0:t<.33?e=1:t<.67&&(e=2);for(var i=0;i<4;i++)_(this.el_,"vjs-vol-"+i);b(this.el_,"vjs-vol-"+e)},e.prototype.updateControlText_=function(){var t=this.player_.muted()||0===this.player_.volume(),e=t?"Unmute":"Mute";this.controlText()!==e&&this.controlText(e)},e}(nr);Er.prototype.controlText_="Mute",Ti.registerComponent("MuteToggle",Er);var xr=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Le(this,e),"undefined"!=typeof n.inline?n.inline=n.inline:n.inline=!0,("undefined"==typeof n.volumeControl||o(n.volumeControl))&&(n.volumeControl=n.volumeControl||{},n.volumeControl.vertical=!n.inline);var r=Be(this,t.call(this,i,n));return wr(r,i),r.on(r.volumeControl,["slideractive"],r.sliderActive_),r.on(r.muteToggle,"focus",r.sliderActive_),r.on(r.volumeControl,["sliderinactive"],r.sliderInactive_),r.on(r.muteToggle,"blur",r.sliderInactive_),r}return Fe(e,t),e.prototype.sliderActive_=function(){this.addClass("vjs-slider-active")},e.prototype.sliderInactive_=function(){this.removeClass("vjs-slider-active")},e.prototype.createEl=function(){var e="vjs-volume-panel-horizontal";return this.options_.inline||(e="vjs-volume-panel-vertical"),t.prototype.createEl.call(this,"div",{className:"vjs-volume-panel vjs-control "+e})},e}(Ti);xr.prototype.options_={children:["muteToggle","volumeControl"]},Ti.registerComponent("VolumePanel",xr);var jr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return n&&(r.menuButton_=n.menuButton),r.focusedChild_=-1,r.on("keydown",r.handleKeyPress),r}return Fe(e,t),e.prototype.addItem=function(t){this.addChild(t),t.on("click",ui(this,function(e){this.menuButton_&&(this.menuButton_.unpressButton(),"CaptionSettingsMenuItem"!==t.name()&&this.menuButton_.focus())}))},e.prototype.createEl=function(){var e=this.options_.contentElType||"ul";this.contentEl_=v(e,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");var i=t.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return i.appendChild(this.contentEl_),U(i,"click",function(t){t.preventDefault(),t.stopImmediatePropagation()}),i},e.prototype.handleKeyPress=function(t){37===t.which||40===t.which?(t.preventDefault(),this.stepForward()):38!==t.which&&39!==t.which||(t.preventDefault(),this.stepBack())},e.prototype.stepForward=function(){var t=0;void 0!==this.focusedChild_&&(t=this.focusedChild_+1),this.focus(t)},e.prototype.stepBack=function(){var t=0;void 0!==this.focusedChild_&&(t=this.focusedChild_-1),this.focus(t)},e.prototype.focus=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=this.children().slice(),i=e.length&&e[0].className&&/vjs-menu-title/.test(e[0].className);i&&e.shift(),e.length>0&&(t<0?t=0:t>=e.length&&(t=e.length-1),this.focusedChild_=t,e[t].el_.focus())},e}(Ti);Ti.registerComponent("Menu",jr);var Or=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Le(this,e);var r=Be(this,t.call(this,i,n));r.menuButton_=new nr(i,n),r.menuButton_.controlText(r.controlText_),r.menuButton_.el_.setAttribute("aria-haspopup","true");var o=nr.prototype.buildCSSClass();return r.menuButton_.el_.className=r.buildCSSClass()+" "+o,r.menuButton_.removeClass("vjs-control"),r.addChild(r.menuButton_),r.update(),r.enabled_=!0,r.on(r.menuButton_,"tap",r.handleClick),r.on(r.menuButton_,"click",r.handleClick),r.on(r.menuButton_,"focus",r.handleFocus),r.on(r.menuButton_,"blur",r.handleBlur),r.on("keydown",r.handleSubmenuKeyPress),r}return Fe(e,t),e.prototype.update=function(){var t=this.createMenu();this.menu&&this.removeChild(this.menu),this.menu=t,this.addChild(t),this.buttonPressed_=!1,this.menuButton_.el_.setAttribute("aria-expanded","false"),this.items&&this.items.length<=this.hideThreshold_?this.hide():this.show()},e.prototype.createMenu=function(){var t=new jr(this.player_,{menuButton:this});if(this.hideThreshold_=0,this.options_.title){var e=v("li",{className:"vjs-menu-title",innerHTML:J(this.options_.title),tabIndex:-1});this.hideThreshold_+=1,t.children_.unshift(e),g(e,t.contentEl())}if(this.items=this.createItems(),this.items)for(var i=0;i<this.items.length;i++)t.addItem(this.items[i]);return t},e.prototype.createItems=function(){},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildWrapperCSSClass()},{})},e.prototype.buildWrapperCSSClass=function(){var e="vjs-menu-button";e+=this.options_.inline===!0?"-inline":"-popup";var i=nr.prototype.buildCSSClass();return"vjs-menu-button "+e+" "+i+" "+t.prototype.buildCSSClass.call(this)},e.prototype.buildCSSClass=function(){var e="vjs-menu-button";return e+=this.options_.inline===!0?"-inline":"-popup","vjs-menu-button "+e+" "+t.prototype.buildCSSClass.call(this)},e.prototype.controlText=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.menuButton_.el();return this.menuButton_.controlText(t,e)},e.prototype.handleClick=function(t){this.one(this.menu.contentEl(),"mouseleave",ui(this,function(t){this.unpressButton(),this.el_.blur()})),this.buttonPressed_?this.unpressButton():this.pressButton()},e.prototype.focus=function(){this.menuButton_.focus()},e.prototype.blur=function(){this.menuButton_.blur()},e.prototype.handleFocus=function(){U(de,"keydown",ui(this,this.handleKeyPress))},e.prototype.handleBlur=function(){W(de,"keydown",ui(this,this.handleKeyPress))},e.prototype.handleKeyPress=function(t){27===t.which||9===t.which?(this.buttonPressed_&&this.unpressButton(),9!==t.which&&(t.preventDefault(),this.menuButton_.el_.focus())):38!==t.which&&40!==t.which||this.buttonPressed_||(this.pressButton(),t.preventDefault())},e.prototype.handleSubmenuKeyPress=function(t){27!==t.which&&9!==t.which||(this.buttonPressed_&&this.unpressButton(),9!==t.which&&(t.preventDefault(),this.menuButton_.el_.focus()))},e.prototype.pressButton=function(){this.enabled_&&(this.buttonPressed_=!0,this.menu.lockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","true"),me||h()||this.menu.focus())},e.prototype.unpressButton=function(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","false"))},e.prototype.disable=function(){this.unpressButton(),this.enabled_=!1,this.addClass("vjs-disabled"),this.menuButton_.disable()},e.prototype.enable=function(){this.enabled_=!0,this.removeClass("vjs-disabled"),this.menuButton_.enable()},e}(Ti);Ti.registerComponent("MenuButton",Or);var Ar=function(t){function e(i,n){Le(this,e);var r=n.tracks,o=Be(this,t.call(this,i,n));if(o.items.length<=1&&o.hide(),!r)return Be(o);var s=ui(o,o.update);return r.addEventListener("removetrack",s),r.addEventListener("addtrack",s),o.player_.on("ready",s),o.player_.on("dispose",function(){r.removeEventListener("removetrack",s),r.removeEventListener("addtrack",s)}),o}return Fe(e,t),e}(Or);Ti.registerComponent("TrackButton",Ar);var Pr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.selectable=n.selectable,r.selected(n.selected),r.selectable?r.el_.setAttribute("role","menuitemcheckbox"):r.el_.setAttribute("role","menuitem"),r}return Fe(e,t),e.prototype.createEl=function(e,i,r){return this.nonIconControl=!0,t.prototype.createEl.call(this,"li",n({className:"vjs-menu-item",innerHTML:'<span class="vjs-menu-item-text">'+this.localize(this.options_.label)+"</span>",tabIndex:-1},i),r)},e.prototype.handleClick=function(t){this.selected(!0)},e.prototype.selected=function(t){this.selectable&&(t?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),this.controlText(", selected")):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),this.controlText(" ")))},e}(Kn);Ti.registerComponent("MenuItem",Pr);var Dr=function(t){function e(i,n){Le(this,e);var r=n.track,o=i.textTracks();n.label=r.label||r.language||"Unknown",n.selected="showing"===r.mode;var s=Be(this,t.call(this,i,n));s.track=r;var a=ui(s,s.handleTracksChange),l=ui(s,s.handleSelectedLanguageChange);if(i.on(["loadstart","texttrackchange"],a),o.addEventListener("change",a),o.addEventListener("selectedlanguagechange",l),s.on("dispose",function(){o.removeEventListener("change",a),o.removeEventListener("selectedlanguagechange",l)}),void 0===o.onchange){var u=void 0;s.on(["tap","click"],function(){if("object"!==Ne(se.Event))try{u=new se.Event("change")}catch(t){}u||(u=de.createEvent("Event"),u.initEvent("change",!0,!0)),o.dispatchEvent(u)})}return s}return Fe(e,t),e.prototype.handleClick=function(e){var i=this.track.kind,n=this.track.kinds,r=this.player_.textTracks();if(n||(n=[i]),t.prototype.handleClick.call(this,e),r)for(var o=0;o<r.length;o++){var s=r[o];s===this.track&&n.indexOf(s.kind)>-1?"showing"!==s.mode&&(s.mode="showing"):"disabled"!==s.mode&&(s.mode="disabled")}},e.prototype.handleTracksChange=function(t){this.selected("showing"===this.track.mode)},e.prototype.handleSelectedLanguageChange=function(t){if("showing"===this.track.mode){var e=this.player_.cache_.selectedLanguage;if(e&&e.enabled&&e.language===this.track.language&&e.kind!==this.track.kind)return;this.player_.cache_.selectedLanguage={enabled:!0,language:this.track.language,kind:this.track.kind}}},e}(Pr);Ti.registerComponent("TextTrackMenuItem",Dr);var Mr=function(t){function e(i,n){Le(this,e),n.track={player:i,kind:n.kind,kinds:n.kinds,"default":!1,mode:"disabled"},n.kinds||(n.kinds=[n.kind]),n.label?n.track.label=n.label:n.track.label=n.kinds.join(" and ")+" off",n.selectable=!0;var r=Be(this,t.call(this,i,n));return r.selected(!0),r}return Fe(e,t),e.prototype.handleTracksChange=function(t){for(var e=this.player().textTracks(),i=!0,n=0,r=e.length;n<r;n++){var o=e[n];if(this.options_.kinds.indexOf(o.kind)>-1&&"showing"===o.mode){i=!1;break}}this.selected(i)},e.prototype.handleSelectedLanguageChange=function(t){for(var e=this.player().textTracks(),i=!0,n=0,r=e.length;n<r;n++){var o=e[n];if(["captions","descriptions","subtitles"].indexOf(o.kind)>-1&&"showing"===o.mode){i=!1;break}}i&&(this.player_.cache_.selectedLanguage={enabled:!1})},e}(Dr);Ti.registerComponent("OffTextTrackMenuItem",Mr);var Ir=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Le(this,e),n.tracks=i.textTracks(),Be(this,t.call(this,i,n))}return Fe(e,t),e.prototype.createItems=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Dr,i=void 0;this.label_&&(i=this.label_+" off"),t.push(new Mr(this.player_,{kinds:this.kinds_,kind:this.kind_,label:i})),this.hideThreshold_+=1;var n=this.player_.textTracks();Array.isArray(this.kinds_)||(this.kinds_=[this.kind_]);for(var r=0;r<n.length;r++){var o=n[r];if(this.kinds_.indexOf(o.kind)>-1){var s=new e(this.player_,{track:o,selectable:!0});s.addClass("vjs-"+o.kind+"-menu-item"),t.push(s)}}return t},e}(Ar);Ti.registerComponent("TextTrackButton",Ir);var Nr=function(t){function e(i,n){Le(this,e);var r=n.track,o=n.cue,s=i.currentTime();n.selectable=!0,n.label=o.text,n.selected=o.startTime<=s&&s<o.endTime;var a=Be(this,t.call(this,i,n));return a.track=r,a.cue=o,r.addEventListener("cuechange",ui(a,a.update)),a}return Fe(e,t),e.prototype.handleClick=function(e){t.prototype.handleClick.call(this),this.player_.currentTime(this.cue.startTime),this.update(this.cue.startTime)},e.prototype.update=function(t){var e=this.cue,i=this.player_.currentTime();this.selected(e.startTime<=i&&i<e.endTime)},e}(Pr);Ti.registerComponent("ChaptersTrackMenuItem",Nr);var Lr=function(t){function e(i,n,r){return Le(this,e),Be(this,t.call(this,i,n,r))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-chapters-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-chapters-button "+t.prototype.buildWrapperCSSClass.call(this)},e.prototype.update=function(e){this.track_&&(!e||"addtrack"!==e.type&&"removetrack"!==e.type)||this.setTrack(this.findChaptersTrack()),t.prototype.update.call(this)},e.prototype.setTrack=function(t){if(this.track_!==t){if(this.updateHandler_||(this.updateHandler_=this.update.bind(this)),this.track_){var e=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);e&&e.removeEventListener("load",this.updateHandler_),this.track_=null}if(this.track_=t,this.track_){this.track_.mode="hidden";var i=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);i&&i.addEventListener("load",this.updateHandler_)}}},e.prototype.findChaptersTrack=function(){for(var t=this.player_.textTracks()||[],e=t.length-1;e>=0;e--){var i=t[e];if(i.kind===this.kind_)return i}},e.prototype.getMenuCaption=function(){return this.track_&&this.track_.label?this.track_.label:this.localize(J(this.kind_))},e.prototype.createMenu=function(){return this.options_.title=this.getMenuCaption(),t.prototype.createMenu.call(this)},e.prototype.createItems=function(){var t=[];if(!this.track_)return t;var e=this.track_.cues;if(!e)return t;for(var i=0,n=e.length;i<n;i++){var r=e[i],o=new Nr(this.player_,{track:this.track_,cue:r});t.push(o)}return t},e}(Ir);Lr.prototype.kind_="chapters",Lr.prototype.controlText_="Chapters",Ti.registerComponent("ChaptersButton",Lr);var Fr=function(t){function e(i,n,r){Le(this,e);var o=Be(this,t.call(this,i,n,r)),s=i.textTracks(),a=ui(o,o.handleTracksChange);return s.addEventListener("change",a),o.on("dispose",function(){s.removeEventListener("change",a)}),o}return Fe(e,t),e.prototype.handleTracksChange=function(t){
for(var e=this.player().textTracks(),i=!1,n=0,r=e.length;n<r;n++){var o=e[n];if(o.kind!==this.kind_&&"showing"===o.mode){i=!0;break}}i?this.disable():this.enable()},e.prototype.buildCSSClass=function(){return"vjs-descriptions-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-descriptions-button "+t.prototype.buildWrapperCSSClass.call(this)},e}(Ir);Fr.prototype.kind_="descriptions",Fr.prototype.controlText_="Descriptions",Ti.registerComponent("DescriptionsButton",Fr);var Br=function(t){function e(i,n,r){return Le(this,e),Be(this,t.call(this,i,n,r))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-subtitles-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-subtitles-button "+t.prototype.buildWrapperCSSClass.call(this)},e}(Ir);Br.prototype.kind_="subtitles",Br.prototype.controlText_="Subtitles",Ti.registerComponent("SubtitlesButton",Br);var $r=function(t){function e(i,n){Le(this,e),n.track={player:i,kind:n.kind,label:n.kind+" settings",selectable:!1,"default":!1,mode:"disabled"},n.selectable=!1,n.name="CaptionSettingsMenuItem";var r=Be(this,t.call(this,i,n));return r.addClass("vjs-texttrack-settings"),r.controlText(", opens "+n.kind+" settings dialog"),r}return Fe(e,t),e.prototype.handleClick=function(t){this.player().getChild("textTrackSettings").open()},e}(Dr);Ti.registerComponent("CaptionSettingsMenuItem",$r);var Rr=function(t){function e(i,n,r){return Le(this,e),Be(this,t.call(this,i,n,r))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-captions-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-captions-button "+t.prototype.buildWrapperCSSClass.call(this)},e.prototype.createItems=function(){var e=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||(e.push(new $r(this.player_,{kind:this.kind_})),this.hideThreshold_+=1),t.prototype.createItems.call(this,e)},e}(Ir);Rr.prototype.kind_="captions",Rr.prototype.controlText_="Captions",Ti.registerComponent("CaptionsButton",Rr);var Hr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(e,i,r){var o='<span class="vjs-menu-item-text">'+this.localize(this.options_.label);"captions"===this.options_.track.kind&&(o+='\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> '+this.localize("Captions")+"</span>\n      "),o+="</span>";var s=t.prototype.createEl.call(this,e,n({innerHTML:o},i),r);return s},e}(Dr);Ti.registerComponent("SubsCapsMenuItem",Hr);var zr=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Le(this,e);var r=Be(this,t.call(this,i,n));return r.label_="subtitles",["en","en-us","en-ca","fr-ca"].indexOf(r.player_.language_)>-1&&(r.label_="captions"),r.menuButton_.controlText(J(r.label_)),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-subs-caps-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-subs-caps-button "+t.prototype.buildWrapperCSSClass.call(this)},e.prototype.createItems=function(){var e=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||(e.push(new $r(this.player_,{kind:this.label_})),this.hideThreshold_+=1),e=t.prototype.createItems.call(this,e,Hr)},e}(Ir);zr.prototype.kinds_=["captions","subtitles"],zr.prototype.controlText_="Subtitles",Ti.registerComponent("SubsCapsButton",zr);var Vr=function(t){function e(i,n){Le(this,e);var r=n.track,o=i.audioTracks();n.label=r.label||r.language||"Unknown",n.selected=r.enabled;var s=Be(this,t.call(this,i,n));s.track=r;var a=ui(s,s.handleTracksChange);return o.addEventListener("change",a),s.on("dispose",function(){o.removeEventListener("change",a)}),s}return Fe(e,t),e.prototype.handleClick=function(e){var i=this.player_.audioTracks();t.prototype.handleClick.call(this,e);for(var n=0;n<i.length;n++){var r=i[n];r.enabled=r===this.track}},e.prototype.handleTracksChange=function(t){this.selected(this.track.enabled)},e}(Pr);Ti.registerComponent("AudioTrackMenuItem",Vr);var Ur=function(t){function e(i){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Le(this,e),n.tracks=i.audioTracks(),Be(this,t.call(this,i,n))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-audio-button "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-audio-button "+t.prototype.buildWrapperCSSClass.call(this)},e.prototype.createItems=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.hideThreshold_=1;for(var e=this.player_.audioTracks(),i=0;i<e.length;i++){var n=e[i];t.push(new Vr(this.player_,{track:n,selectable:!0}))}return t},e}(Ar);Ur.prototype.controlText_="Audio Track",Ti.registerComponent("AudioTrackButton",Ur);var Wr=function(t){function e(i,n){Le(this,e);var r=n.rate,o=parseFloat(r,10);n.label=r,n.selected=1===o,n.selectable=!0;var s=Be(this,t.call(this,i,n));return s.label=r,s.rate=o,s.on(i,"ratechange",s.update),s}return Fe(e,t),e.prototype.handleClick=function(e){t.prototype.handleClick.call(this),this.player().playbackRate(this.rate)},e.prototype.update=function(t){this.selected(this.player().playbackRate()===this.rate)},e}(Pr);Wr.prototype.contentElType="button",Ti.registerComponent("PlaybackRateMenuItem",Wr);var qr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.updateVisibility(),r.updateLabel(),r.on(i,"loadstart",r.updateVisibility),r.on(i,"ratechange",r.updateLabel),r}return Fe(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this);return this.labelEl_=v("div",{className:"vjs-playback-rate-value",innerHTML:"1x"}),e.appendChild(this.labelEl_),e},e.prototype.buildCSSClass=function(){return"vjs-playback-rate "+t.prototype.buildCSSClass.call(this)},e.prototype.buildWrapperCSSClass=function(){return"vjs-playback-rate "+t.prototype.buildWrapperCSSClass.call(this)},e.prototype.createMenu=function(){var t=new jr(this.player()),e=this.playbackRates();if(e)for(var i=e.length-1;i>=0;i--)t.addChild(new Wr(this.player(),{rate:e[i]+"x"}));return t},e.prototype.updateARIAAttributes=function(){this.el().setAttribute("aria-valuenow",this.player().playbackRate())},e.prototype.handleClick=function(t){for(var e=this.player().playbackRate(),i=this.playbackRates(),n=i[0],r=0;r<i.length;r++)if(i[r]>e){n=i[r];break}this.player().playbackRate(n)},e.prototype.playbackRates=function(){return this.options_.playbackRates||this.options_.playerOptions&&this.options_.playerOptions.playbackRates},e.prototype.playbackRateSupported=function(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0},e.prototype.updateVisibility=function(t){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")},e.prototype.updateLabel=function(t){this.playbackRateSupported()&&(this.labelEl_.innerHTML=this.player().playbackRate()+"x")},e}(Or);qr.prototype.controlText_="Playback Rate",Ti.registerComponent("PlaybackRateMenuButton",qr);var Xr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-spacer "+t.prototype.buildCSSClass.call(this)},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},e}(Ti);Ti.registerComponent("Spacer",Xr);var Yr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-custom-control-spacer "+t.prototype.buildCSSClass.call(this)},e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,{className:this.buildCSSClass()});return e.innerHTML="&nbsp;",e},e}(Xr);Ti.registerComponent("CustomControlSpacer",Yr);var Gr=function(t){function e(){return Le(this,e),Be(this,t.apply(this,arguments))}return Fe(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-control-bar",dir:"ltr"},{role:"group"})},e}(Ti);Gr.prototype.options_={children:["playToggle","volumePanel","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subsCapsButton","audioTrackButton","fullscreenToggle"]},Ti.registerComponent("ControlBar",Gr);var Kr=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n));return r.on(i,"error",r.open),r}return Fe(e,t),e.prototype.buildCSSClass=function(){return"vjs-error-display "+t.prototype.buildCSSClass.call(this)},e.prototype.content=function(){var t=this.player().error();return t?this.localize(t.message):""},e}(Li);Kr.prototype.options_=Z(Li.prototype.options_,{pauseOnOpen:!1,fillAlways:!0,temporary:!1,uncloseable:!0}),Ti.registerComponent("ErrorDisplay",Kr);var Jr="vjs-text-track-settings",Qr=["#000","Black"],Zr=["#00F","Blue"],to=["#0FF","Cyan"],eo=["#0F0","Green"],io=["#F0F","Magenta"],no=["#F00","Red"],ro=["#FFF","White"],oo=["#FF0","Yellow"],so=["1","Opaque"],ao=["0.5","Semi-Transparent"],lo=["0","Transparent"],uo={backgroundColor:{selector:".vjs-bg-color > select",id:"captions-background-color-%s",label:"Color",options:[Qr,ro,no,eo,Zr,oo,io,to]},backgroundOpacity:{selector:".vjs-bg-opacity > select",id:"captions-background-opacity-%s",label:"Transparency",options:[so,ao,lo]},color:{selector:".vjs-fg-color > select",id:"captions-foreground-color-%s",label:"Color",options:[ro,Qr,no,eo,Zr,oo,io,to]},edgeStyle:{selector:".vjs-edge-style > select",id:"%s",label:"Text Edge Style",options:[["none","None"],["raised","Raised"],["depressed","Depressed"],["uniform","Uniform"],["dropshadow","Dropshadow"]]},fontFamily:{selector:".vjs-font-family > select",id:"captions-font-family-%s",label:"Font Family",options:[["proportionalSansSerif","Proportional Sans-Serif"],["monospaceSansSerif","Monospace Sans-Serif"],["proportionalSerif","Proportional Serif"],["monospaceSerif","Monospace Serif"],["casual","Casual"],["script","Script"],["small-caps","Small Caps"]]},fontPercent:{selector:".vjs-font-percent > select",id:"captions-font-size-%s",label:"Font Size",options:[["0.50","50%"],["0.75","75%"],["1.00","100%"],["1.25","125%"],["1.50","150%"],["1.75","175%"],["2.00","200%"],["3.00","300%"],["4.00","400%"]],"default":2,parser:function(t){return"1.00"===t?null:Number(t)}},textOpacity:{selector:".vjs-text-opacity > select",id:"captions-foreground-opacity-%s",label:"Transparency",options:[so,ao]},windowColor:{selector:".vjs-window-color > select",id:"captions-window-color-%s",label:"Color"},windowOpacity:{selector:".vjs-window-opacity > select",id:"captions-window-opacity-%s",label:"Transparency",options:[lo,ao,so]}};uo.windowColor.options=uo.backgroundColor.options;var co=function(t){function n(i,r){Le(this,n),r.temporary=!1;var o=Be(this,t.call(this,i,r));return o.updateDisplay=ui(o,o.updateDisplay),o.fill(),o.hasBeenOpened_=o.hasBeenFilled_=!0,o.endDialog=v("p",{className:"vjs-control-text",textContent:o.localize("End of dialog window.")}),o.el().appendChild(o.endDialog),o.setDefaults(),void 0===r.persistTextTrackSettings&&(o.options_.persistTextTrackSettings=o.options_.playerOptions.persistTextTrackSettings),o.on(o.$(".vjs-done-button"),"click",function(){o.saveSettings(),o.close()}),o.on(o.$(".vjs-default-button"),"click",function(){o.setDefaults(),o.updateDisplay()}),e(uo,function(t){o.on(o.$(t.selector),"change",o.updateDisplay)}),o.options_.persistTextTrackSettings&&o.restoreSettings(),o}return Fe(n,t),n.prototype.createElSelect_=function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"label",r=uo[t],o=r.id.replace("%s",this.id_);return["<"+n+' id="'+o+'" class="'+("label"===n?"vjs-label":"")+'">',this.localize(r.label),"</"+n+">",'<select aria-labelledby="'+(""!==i?i+" ":"")+o+'">'].concat(r.options.map(function(t){var n=o+"-"+t[1];return['<option id="'+n+'" value="'+t[0]+'" ','aria-labelledby="'+(""!==i?i+" ":"")+o+" "+n+'">',e.localize(t[1]),"</option>"].join("")})).concat("</select>").join("")},n.prototype.createElFgColor_=function(){var t="captions-text-legend-"+this.id_;return['<fieldset class="vjs-fg-color vjs-track-setting">','<legend id="'+t+'">',this.localize("Text"),"</legend>",this.createElSelect_("color",t),'<span class="vjs-text-opacity vjs-opacity">',this.createElSelect_("textOpacity",t),"</span>","</fieldset>"].join("")},n.prototype.createElBgColor_=function(){var t="captions-background-"+this.id_;return['<fieldset class="vjs-bg-color vjs-track-setting">','<legend id="'+t+'">',this.localize("Background"),"</legend>",this.createElSelect_("backgroundColor",t),'<span class="vjs-bg-opacity vjs-opacity">',this.createElSelect_("backgroundOpacity",t),"</span>","</fieldset>"].join("")},n.prototype.createElWinColor_=function(){var t="captions-window-"+this.id_;return['<fieldset class="vjs-window-color vjs-track-setting">','<legend id="'+t+'">',this.localize("Window"),"</legend>",this.createElSelect_("windowColor",t),'<span class="vjs-window-opacity vjs-opacity">',this.createElSelect_("windowOpacity",t),"</span>","</fieldset>"].join("")},n.prototype.createElColors_=function(){return v("div",{className:"vjs-track-settings-colors",innerHTML:[this.createElFgColor_(),this.createElBgColor_(),this.createElWinColor_()].join("")})},n.prototype.createElFont_=function(){return v("div",{className:'vjs-track-settings-font">',innerHTML:['<fieldset class="vjs-font-percent vjs-track-setting">',this.createElSelect_("fontPercent","","legend"),"</fieldset>",'<fieldset class="vjs-edge-style vjs-track-setting">',this.createElSelect_("edgeStyle","","legend"),"</fieldset>",'<fieldset class="vjs-font-family vjs-track-setting">',this.createElSelect_("fontFamily","","legend"),"</fieldset>"].join("")})},n.prototype.createElControls_=function(){var t=this.localize("restore all settings to the default values");return v("div",{className:"vjs-track-settings-controls",innerHTML:['<button class="vjs-default-button" title="'+t+'">',this.localize("Reset"),'<span class="vjs-control-text"> '+t+"</span>","</button>",'<button class="vjs-done-button">'+this.localize("Done")+"</button>"].join("")})},n.prototype.content=function(){return[this.createElColors_(),this.createElFont_(),this.createElControls_()]},n.prototype.label=function(){return this.localize("Caption Settings Dialog")},n.prototype.description=function(){return this.localize("Beginning of dialog window. Escape will cancel and close the window.")},n.prototype.buildCSSClass=function(){return t.prototype.buildCSSClass.call(this)+" vjs-text-track-settings"},n.prototype.getValues=function(){var t=this;return i(uo,function(e,i,n){var r=Zt(t.$(i.selector),i.parser);return void 0!==r&&(e[n]=r),e},{})},n.prototype.setValues=function(t){var i=this;e(uo,function(e,n){te(i.$(e.selector),t[n],e.parser)})},n.prototype.setDefaults=function(){var t=this;e(uo,function(e){var i=e.hasOwnProperty("default")?e["default"]:0;t.$(e.selector).selectedIndex=i})},n.prototype.restoreSettings=function(){var t=void 0;try{t=JSON.parse(se.localStorage.getItem(Jr))}catch(e){qe.warn(e)}t&&this.setValues(t)},n.prototype.saveSettings=function(){if(this.options_.persistTextTrackSettings){var t=this.getValues();try{Object.keys(t).length?se.localStorage.setItem(Jr,JSON.stringify(t)):se.localStorage.removeItem(Jr)}catch(e){qe.warn(e)}}},n.prototype.updateDisplay=function(){var t=this.player_.getChild("textTrackDisplay");t&&t.updateDisplay()},n.prototype.conditionalBlur_=function(){this.previouslyActiveEl_=null,this.off(de,"keydown",this.handleKeyDown);var t=this.player_.controlBar,e=t&&t.subsCapsButton,i=t&&t.captionsButton;e?e.focus():i&&i.focus()},n}(Li);Ti.registerComponent("TextTrackSettings",co);var po=$e(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."],["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]),ho=function(t){function e(i,n){Le(this,e);var r=Be(this,t.call(this,i,n)),o=i.source,s=!1;if(o&&(r.el_.currentSrc!==o.src||i.tag&&3===i.tag.initNetworkState_)?r.setSource(o):r.handleLateInit_(r.el_),r.el_.hasChildNodes()){for(var a=r.el_.childNodes,l=a.length,u=[];l--;){var c=a[l],d=c.nodeName.toLowerCase();"track"===d&&(r.featuresNativeTextTracks?(r.remoteTextTrackEls().addTrackElement_(c),r.remoteTextTracks().addTrack(c.track),r.textTracks().addTrack(c.track),s||r.el_.hasAttribute("crossorigin")||!tn(c.src)||(s=!0)):u.push(c))}for(var p=0;p<u.length;p++)r.el_.removeChild(u[p])}return r.proxyNativeTracks_(),r.featuresNativeTextTracks&&s&&qe.warn(Xe(po)),r.restoreMetadataTracksInIOSNativePlayer_(),(De||ye||ke)&&i.nativeControlsForTouch===!0&&r.setControls(!0),r.proxyWebkitFullscreen_(),r.triggerReady(),r}return Fe(e,t),e.prototype.dispose=function(){e.disposeMediaElement(this.el_),t.prototype.dispose.call(this)},e.prototype.restoreMetadataTracksInIOSNativePlayer_=function(){var t=this.textTracks(),e=void 0,i=function(){e=[];for(var i=0;i<t.length;i++){var n=t[i];"metadata"===n.kind&&e.push({track:n,storedMode:n.mode})}};i(),t.addEventListener("change",i);var n=function r(){for(var i=0;i<e.length;i++){var n=e[i];"disabled"===n.track.mode&&n.track.mode!==n.storedMode&&(n.track.mode=n.storedMode)}t.removeEventListener("change",r)};this.on("webkitbeginfullscreen",function(){t.removeEventListener("change",i),t.removeEventListener("change",n),t.addEventListener("change",n)}),this.on("webkitendfullscreen",function(){t.removeEventListener("change",i),t.addEventListener("change",i),t.removeEventListener("change",n)})},e.prototype.proxyNativeTracks_=function(){var t=this;Cn.names.forEach(function(e){var i=Cn[e],n=t.el()[i.getterName],r=t[i.getterName]();if(t["featuresNative"+i.capitalName+"Tracks"]&&n&&n.addEventListener){var o={change:function(t){r.trigger({type:"change",target:r,currentTarget:r,srcElement:r})},addtrack:function(t){r.addTrack(t.track)},removetrack:function(t){r.removeTrack(t.track)}},s=function(){for(var t=[],e=0;e<r.length;e++){for(var i=!1,o=0;o<n.length;o++)if(n[o]===r[e]){i=!0;break}i||t.push(r[e])}for(;t.length;)r.removeTrack(t.shift())};Object.keys(o).forEach(function(e){var i=o[e];n.addEventListener(e,i),t.on("dispose",function(t){return n.removeEventListener(e,i)})}),t.on("loadstart",s),t.on("dispose",function(e){return t.off("loadstart",s)})}})},e.prototype.createEl=function(){var t=this.options_.tag;if(!t||!this.options_.playerElIngest&&!this.movingMediaElementInDOM){if(t){var i=t.cloneNode(!0);t.parentNode&&t.parentNode.insertBefore(i,t),e.disposeMediaElement(t),t=i}else{t=de.createElement("video");var r=this.options_.tag&&k(this.options_.tag),o=Z({},r);De&&this.options_.nativeControlsForTouch===!0||delete o.controls,w(t,n(o,{id:this.options_.techId,"class":"vjs-tech"}))}t.playerId=this.options_.playerId}"undefined"!=typeof this.options_.preload&&S(t,"preload",this.options_.preload);for(var s=["loop","muted","playsinline","autoplay"],a=s.length-1;a>=0;a--){var l=s[a],u=this.options_[l];"undefined"!=typeof u&&(u?S(t,l,l):E(t,l),t[l]=u)}return t},e.prototype.handleLateInit_=function(t){if(0!==t.networkState&&3!==t.networkState){if(0===t.readyState){var e=!1,i=function(){e=!0};this.on("loadstart",i);var n=function(){e||this.trigger("loadstart")};return this.on("loadedmetadata",n),void this.ready(function(){this.off("loadstart",i),this.off("loadedmetadata",n),e||this.trigger("loadstart")})}var r=["loadstart"];r.push("loadedmetadata"),t.readyState>=2&&r.push("loadeddata"),t.readyState>=3&&r.push("canplay"),t.readyState>=4&&r.push("canplaythrough"),this.ready(function(){r.forEach(function(t){this.trigger(t)},this)})}},e.prototype.setCurrentTime=function(t){try{this.el_.currentTime=t}catch(e){qe(e,"Video is not ready. (Video.js)")}},e.prototype.duration=function(){var t=this;if(this.el_.duration===1/0&&_e&&Ee&&0===this.el_.currentTime){var e=function i(){t.el_.currentTime>0&&(t.el_.duration===1/0&&t.trigger("durationchange"),t.off("timeupdate",i))};return this.on("timeupdate",e),NaN}return this.el_.duration||NaN},e.prototype.width=function(){return this.el_.offsetWidth},e.prototype.height=function(){return this.el_.offsetHeight},e.prototype.proxyWebkitFullscreen_=function(){var t=this;if("webkitDisplayingFullscreen"in this.el_){var e=function(){this.trigger("fullscreenchange",{isFullscreen:!1})},i=function(){"webkitPresentationMode"in this.el_&&"picture-in-picture"!==this.el_.webkitPresentationMode&&(this.one("webkitendfullscreen",e),this.trigger("fullscreenchange",{isFullscreen:!0}))};this.on("webkitbeginfullscreen",i),this.on("dispose",function(){t.off("webkitbeginfullscreen",i),t.off("webkitendfullscreen",e)})}},e.prototype.supportsFullScreen=function(){if("function"==typeof this.el_.webkitEnterFullScreen){var t=se.navigator&&se.navigator.userAgent||"";if(/Android/.test(t)||!/Chrome|Mac OS X 10.5/.test(t))return!0}return!1},e.prototype.enterFullScreen=function(){var t=this.el_;t.paused&&t.networkState<=t.HAVE_METADATA?(this.el_.play(),this.setTimeout(function(){t.pause(),t.webkitEnterFullScreen()},0)):t.webkitEnterFullScreen()},e.prototype.exitFullScreen=function(){this.el_.webkitExitFullScreen()},e.prototype.src=function(t){return void 0===t?this.el_.src:void this.setSrc(t)},e.prototype.reset=function(){e.resetMediaElement(this.el_)},e.prototype.currentSrc=function(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc},e.prototype.setControls=function(t){this.el_.controls=!!t},e.prototype.addTextTrack=function(e,i,n){return this.featuresNativeTextTracks?this.el_.addTextTrack(e,i,n):t.prototype.addTextTrack.call(this,e,i,n)},e.prototype.createRemoteTextTrack=function(e){if(!this.featuresNativeTextTracks)return t.prototype.createRemoteTextTrack.call(this,e);var i=de.createElement("track");return e.kind&&(i.kind=e.kind),e.label&&(i.label=e.label),(e.language||e.srclang)&&(i.srclang=e.language||e.srclang),e["default"]&&(i["default"]=e["default"]),e.id&&(i.id=e.id),e.src&&(i.src=e.src),i},e.prototype.addRemoteTextTrack=function(e,i){var n=t.prototype.addRemoteTextTrack.call(this,e,i);return this.featuresNativeTextTracks&&this.el().appendChild(n),n},e.prototype.removeRemoteTextTrack=function(e){if(t.prototype.removeRemoteTextTrack.call(this,e),this.featuresNativeTextTracks)for(var i=this.$$("track"),n=i.length;n--;)e!==i[n]&&e!==i[n].track||this.el().removeChild(i[n])},e.prototype.getVideoPlaybackQuality=function(){if("function"==typeof this.el().getVideoPlaybackQuality)return this.el().getVideoPlaybackQuality();var t={};return"undefined"!=typeof this.el().webkitDroppedFrameCount&&"undefined"!=typeof this.el().webkitDecodedFrameCount&&(t.droppedVideoFrames=this.el().webkitDroppedFrameCount,t.totalVideoFrames=this.el().webkitDecodedFrameCount),se.performance&&"function"==typeof se.performance.now?t.creationTime=se.performance.now():se.performance&&se.performance.timing&&"number"==typeof se.performance.timing.navigationStart&&(t.creationTime=se.Date.now()-se.performance.timing.navigationStart),t},e}(Un);if(d()){ho.TEST_VID=de.createElement("video");var fo=de.createElement("track");fo.kind="captions",fo.srclang="en",fo.label="English",ho.TEST_VID.appendChild(fo)}ho.isSupported=function(){try{ho.TEST_VID.volume=.5}catch(t){return!1}return!(!ho.TEST_VID||!ho.TEST_VID.canPlayType)},ho.canPlayType=function(t){return ho.TEST_VID.canPlayType(t)},ho.canPlaySource=function(t,e){return ho.canPlayType(t.type)},ho.canControlVolume=function(){try{var t=ho.TEST_VID.volume;return ho.TEST_VID.volume=t/2+.1,t!==ho.TEST_VID.volume}catch(e){return!1}},ho.canControlPlaybackRate=function(){if(_e&&Ee&&xe<58)return!1;try{var t=ho.TEST_VID.playbackRate;return ho.TEST_VID.playbackRate=t/2+.1,t!==ho.TEST_VID.playbackRate}catch(e){return!1}},ho.supportsNativeTextTracks=function(){return Pe},ho.supportsNativeVideoTracks=function(){return!(!ho.TEST_VID||!ho.TEST_VID.videoTracks)},ho.supportsNativeAudioTracks=function(){return!(!ho.TEST_VID||!ho.TEST_VID.audioTracks)},ho.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","resize","volumechange"],ho.prototype.featuresVolumeControl=ho.canControlVolume(),ho.prototype.featuresPlaybackRate=ho.canControlPlaybackRate(),ho.prototype.movingMediaElementInDOM=!me,ho.prototype.featuresFullscreenResize=!0,ho.prototype.featuresProgressEvents=!0,ho.prototype.featuresTimeupdateEvents=!0,ho.prototype.featuresNativeTextTracks=ho.supportsNativeTextTracks(),ho.prototype.featuresNativeVideoTracks=ho.supportsNativeVideoTracks(),ho.prototype.featuresNativeAudioTracks=ho.supportsNativeAudioTracks();var vo=ho.TEST_VID&&ho.TEST_VID.constructor.prototype.canPlayType,yo=/^application\/(?:x-|vnd\.apple\.)mpegurl/i,go=/^video\/mp4/i;ho.patchCanPlayType=function(){Te>=4&&!Ce?ho.TEST_VID.constructor.prototype.canPlayType=function(t){return t&&yo.test(t)?"maybe":vo.call(this,t)}:we&&(ho.TEST_VID.constructor.prototype.canPlayType=function(t){return t&&go.test(t)?"maybe":vo.call(this,t)})},ho.unpatchCanPlayType=function(){var t=ho.TEST_VID.constructor.prototype.canPlayType;return ho.TEST_VID.constructor.prototype.canPlayType=vo,t},ho.patchCanPlayType(),ho.disposeMediaElement=function(t){if(t){for(t.parentNode&&t.parentNode.removeChild(t);t.hasChildNodes();)t.removeChild(t.firstChild);t.removeAttribute("src"),"function"==typeof t.load&&!function(){try{t.load()}catch(e){}}()}},ho.resetMediaElement=function(t){if(t){for(var e=t.querySelectorAll("source"),i=e.length;i--;)t.removeChild(e[i]);t.removeAttribute("src"),"function"==typeof t.load&&!function(){try{t.load()}catch(e){}}()}},["muted","defaultMuted","autoplay","controls","loop","playsinline"].forEach(function(t){ho.prototype[t]=function(){return this.el_[t]||this.el_.hasAttribute(t)}}),["muted","defaultMuted","autoplay","loop","playsinline"].forEach(function(t){ho.prototype["set"+J(t)]=function(e){this.el_[t]=e,e?this.el_.setAttribute(t,t):this.el_.removeAttribute(t)}}),["paused","currentTime","buffered","volume","poster","preload","error","seeking","seekable","ended","playbackRate","defaultPlaybackRate","played","networkState","readyState","videoWidth","videoHeight"].forEach(function(t){ho.prototype[t]=function(){return this.el_[t]}}),["volume","src","poster","preload","playbackRate","defaultPlaybackRate"].forEach(function(t){ho.prototype["set"+J(t)]=function(e){this.el_[t]=e}}),["pause","load","play"].forEach(function(t){ho.prototype[t]=function(){return this.el_[t]()}}),Un.withSourceHandlers(ho),ho.nativeSourceHandler={},ho.nativeSourceHandler.canPlayType=function(t){try{return ho.TEST_VID.canPlayType(t)}catch(e){return""}},ho.nativeSourceHandler.canHandleSource=function(t,e){if(t.type)return ho.nativeSourceHandler.canPlayType(t.type);if(t.src){var i=Zi(t.src);return ho.nativeSourceHandler.canPlayType("video/"+i)}return""},ho.nativeSourceHandler.handleSource=function(t,e,i){e.setSrc(t.src)},ho.nativeSourceHandler.dispose=function(){},ho.registerSourceHandler(ho.nativeSourceHandler),Un.registerTech("Html5",ho);var mo=$e(["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "],["\n        Using the tech directly can be dangerous. I hope you know what you're doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      "]),bo=["progress","abort","suspend","emptied","stalled","loadedmetadata","loadeddata","timeupdate","ratechange","resize","volumechange","texttrackchange"],_o=function(t){function e(i,r,o){if(Le(this,e),i.id=i.id||"vjs_video_"+F(),r=n(e.getTagSettings(i),r),r.initChildren=!1,r.createEl=!1,r.reportTouchActivity=!1,!r.language)if("function"==typeof i.closest){var s=i.closest("[lang]");s&&(r.language=s.getAttribute("lang"))}else for(var a=i;a&&1===a.nodeType;){if(k(a).hasOwnProperty("lang")){r.language=a.getAttribute("lang");break}a=a.parentNode}var l=Be(this,t.call(this,null,r,o));if(l.isReady_=!1,l.hasStarted_=!1,!l.options_||!l.options_.techOrder||!l.options_.techOrder.length)throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");if(l.tag=i,l.tagAttributes=i&&k(i),l.language(l.options_.language),r.languages){var u={};Object.getOwnPropertyNames(r.languages).forEach(function(t){u[t.toLowerCase()]=r.languages[t]}),l.languages_=u}else l.languages_=e.prototype.options_.languages;l.cache_={},l.poster_=r.poster||"",l.controls_=!!r.controls,l.cache_.lastVolume=1,i.controls=!1,l.scrubbing_=!1,l.el_=l.createEl(),G(l,{eventBusKey:"el_"});var c=Z(l.options_);if(r.plugins){var d=r.plugins;Object.keys(d).forEach(function(t){if("function"!=typeof this[t])throw new Error('plugin "'+t+'" does not exist');this[t](d[t])},l)}l.options_.playerOptions=c,l.middleware_=[],l.initChildren(),l.isAudio("audio"===i.nodeName.toLowerCase()),l.controls()?l.addClass("vjs-controls-enabled"):l.addClass("vjs-controls-disabled"),l.el_.setAttribute("role","region"),l.isAudio()?l.el_.setAttribute("aria-label",l.localize("Audio Player")):l.el_.setAttribute("aria-label",l.localize("Video Player")),l.isAudio()&&l.addClass("vjs-audio"),l.flexNotSupported_()&&l.addClass("vjs-no-flex"),me||l.addClass("vjs-workinghover"),e.players[l.id_]=l;var p=ne.split(".")[0];return l.addClass("vjs-v"+p),l.userActive(!0),l.reportUserActivity(),l.listenForUserActivity_(),l.on("fullscreenchange",l.handleFullscreenChange_),l.on("stageclick",l.handleStageClick_),l.changingSrc_=!1,l}return Fe(e,t),e.prototype.dispose=function(){this.trigger("dispose"),this.off("dispose"),this.styleEl_&&this.styleEl_.parentNode&&this.styleEl_.parentNode.removeChild(this.styleEl_),e.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&this.tech_.dispose(),t.prototype.dispose.call(this)},e.prototype.createEl=function(){var e=this.tag,i=void 0,n=this.playerElIngest_=e.parentNode&&e.parentNode.hasAttribute&&e.parentNode.hasAttribute("data-vjs-player");i=n?this.el_=e.parentNode:this.el_=t.prototype.createEl.call(this,"div"),e.setAttribute("tabindex","-1"),e.removeAttribute("width"),e.removeAttribute("height");var r=k(e);if(Object.getOwnPropertyNames(r).forEach(function(t){"class"===t?i.className+=" "+r[t]:i.setAttribute(t,r[t])}),e.playerId=e.id,e.id+="_html5_api",e.className="vjs-tech",e.player=i.player=this,this.addClass("vjs-paused"),se.VIDEOJS_NO_DYNAMIC_STYLE!==!0){this.styleEl_=ai("vjs-styles-dimensions");var o=Ge(".vjs-styles-defaults"),s=Ge("head");s.insertBefore(this.styleEl_,o?o.nextSibling:s.firstChild)}this.width(this.options_.width),this.height(this.options_.height),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio);for(var a=e.getElementsByTagName("a"),l=0;l<a.length;l++){var u=a.item(l);b(u,"vjs-hidden"),u.setAttribute("hidden","hidden")}return e.initNetworkState_=e.networkState,e.parentNode&&!n&&e.parentNode.insertBefore(i,e),g(e,i),this.children_.unshift(e),this.el_.setAttribute("lang",this.language_),this.el_=i,i},e.prototype.width=function(t){return this.dimension("width",t)},e.prototype.height=function(t){return this.dimension("height",t)},e.prototype.dimension=function(t,e){var i=t+"_";if(void 0===e)return this[i]||0;if(""===e)return this[i]=void 0,void this.updateStyleEl_();var n=parseFloat(e);return isNaN(n)?void qe.error('Improper value "'+e+'" supplied for for '+t):(this[i]=n,void this.updateStyleEl_())},e.prototype.fluid=function(t){return void 0===t?!!this.fluid_:(this.fluid_=!!t,t?this.addClass("vjs-fluid"):this.removeClass("vjs-fluid"),
void this.updateStyleEl_())},e.prototype.aspectRatio=function(t){if(void 0===t)return this.aspectRatio_;if(!/^\d+\:\d+$/.test(t))throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=t,this.fluid(!0),this.updateStyleEl_()},e.prototype.updateStyleEl_=function(){if(se.VIDEOJS_NO_DYNAMIC_STYLE===!0){var t="number"==typeof this.width_?this.width_:this.options_.width,e="number"==typeof this.height_?this.height_:this.options_.height,i=this.tech_&&this.tech_.el();return void(i&&(t>=0&&(i.width=t),e>=0&&(i.height=e)))}var n=void 0,r=void 0,o=void 0,s=void 0;o=void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()>0?this.videoWidth()+":"+this.videoHeight():"16:9";var a=o.split(":"),l=a[1]/a[0];n=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/l:this.videoWidth()||300,r=void 0!==this.height_?this.height_:n*l,s=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",this.addClass(s),li(this.styleEl_,"\n      ."+s+" {\n        width: "+n+"px;\n        height: "+r+"px;\n      }\n\n      ."+s+".vjs-fluid {\n        padding-top: "+100*l+"%;\n      }\n    ")},e.prototype.loadTech_=function(t,e){var i=this;this.tech_&&this.unloadTech_();var r=J(t),o=t.charAt(0).toLowerCase()+t.slice(1);"Html5"!==r&&this.tag&&(Un.getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=r,this.isReady_=!1;var s={source:e,nativeControlsForTouch:this.options_.nativeControlsForTouch,playerId:this.id(),techId:this.id()+"_"+r+"_api",autoplay:this.options_.autoplay,playsinline:this.options_.playsinline,preload:this.options_.preload,loop:this.options_.loop,muted:this.options_.muted,poster:this.poster(),language:this.language(),playerElIngest:this.playerElIngest_||!1,"vtt.js":this.options_["vtt.js"]};En.names.forEach(function(t){var e=En[t];s[e.getterName]=i[e.privateName]}),n(s,this.options_[r]),n(s,this.options_[o]),n(s,this.options_[t.toLowerCase()]),this.tag&&(s.tag=this.tag),e&&e.src===this.cache_.src&&this.cache_.currentTime>0&&(s.startTime=this.cache_.currentTime);var a=Un.getTech(t);if(!a)throw new Error("No Tech named '"+r+"' exists! '"+r+"' should be registered using videojs.registerTech()'");this.tech_=new a(s),this.tech_.ready(ui(this,this.handleTechReady_),!0),Mi.jsonToTextTracks(this.textTracksJson_||[],this.tech_),bo.forEach(function(t){i.on(i.tech_,t,i["handleTech"+J(t)+"_"])}),this.on(this.tech_,"loadstart",this.handleTechLoadStart_),this.on(this.tech_,"waiting",this.handleTechWaiting_),this.on(this.tech_,"canplay",this.handleTechCanPlay_),this.on(this.tech_,"canplaythrough",this.handleTechCanPlayThrough_),this.on(this.tech_,"playing",this.handleTechPlaying_),this.on(this.tech_,"ended",this.handleTechEnded_),this.on(this.tech_,"seeking",this.handleTechSeeking_),this.on(this.tech_,"seeked",this.handleTechSeeked_),this.on(this.tech_,"play",this.handleTechPlay_),this.on(this.tech_,"firstplay",this.handleTechFirstPlay_),this.on(this.tech_,"pause",this.handleTechPause_),this.on(this.tech_,"durationchange",this.handleTechDurationChange_),this.on(this.tech_,"fullscreenchange",this.handleTechFullscreenChange_),this.on(this.tech_,"error",this.handleTechError_),this.on(this.tech_,"loadedmetadata",this.updateStyleEl_),this.on(this.tech_,"posterchange",this.handleTechPosterChange_),this.on(this.tech_,"textdata",this.handleTechTextData_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===r&&this.tag||g(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)},e.prototype.unloadTech_=function(){var t=this;En.names.forEach(function(e){var i=En[e];t[i.privateName]=t[i.getterName]()}),this.textTracksJson_=Mi.textTracksToJson(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1},e.prototype.tech=function(t){return void 0===t&&qe.warn(Xe(mo)),this.tech_},e.prototype.addTechControlsListeners_=function(){this.removeTechControlsListeners_(),this.on(this.tech_,"mousedown",this.handleTechClick_),this.on(this.tech_,"touchstart",this.handleTechTouchStart_),this.on(this.tech_,"touchmove",this.handleTechTouchMove_),this.on(this.tech_,"touchend",this.handleTechTouchEnd_),this.on(this.tech_,"tap",this.handleTechTap_)},e.prototype.removeTechControlsListeners_=function(){this.off(this.tech_,"tap",this.handleTechTap_),this.off(this.tech_,"touchstart",this.handleTechTouchStart_),this.off(this.tech_,"touchmove",this.handleTechTouchMove_),this.off(this.tech_,"touchend",this.handleTechTouchEnd_),this.off(this.tech_,"mousedown",this.handleTechClick_)},e.prototype.handleTechReady_=function(){if(this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),this.handleTechPosterChange_(),this.handleTechDurationChange_(),(this.src()||this.currentSrc())&&this.tag&&this.options_.autoplay&&this.paused())try{delete this.tag.poster}catch(t){qe("deleting tag.poster throws in some browsers",t)}},e.prototype.handleTechLoadStart_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-seeking"),this.error(null),this.paused()?(this.hasStarted(!1),this.trigger("loadstart")):(this.trigger("loadstart"),this.trigger("firstplay"))},e.prototype.hasStarted=function(t){return void 0===t?this.hasStarted_:void(t!==this.hasStarted_&&(this.hasStarted_=t,this.hasStarted_?(this.addClass("vjs-has-started"),this.trigger("firstplay")):this.removeClass("vjs-has-started")))},e.prototype.handleTechPlay_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.hasStarted(!0),this.trigger("play")},e.prototype.handleTechWaiting_=function(){var t=this;this.addClass("vjs-waiting"),this.trigger("waiting"),this.one("timeupdate",function(){return t.removeClass("vjs-waiting")})},e.prototype.handleTechCanPlay_=function(){this.removeClass("vjs-waiting"),this.trigger("canplay")},e.prototype.handleTechCanPlayThrough_=function(){this.removeClass("vjs-waiting"),this.trigger("canplaythrough")},e.prototype.handleTechPlaying_=function(){this.removeClass("vjs-waiting"),this.trigger("playing")},e.prototype.handleTechSeeking_=function(){this.addClass("vjs-seeking"),this.trigger("seeking")},e.prototype.handleTechSeeked_=function(){this.removeClass("vjs-seeking"),this.trigger("seeked")},e.prototype.handleTechFirstPlay_=function(){this.options_.starttime&&(qe.warn("Passing the `starttime` option to the player will be deprecated in 6.0"),this.currentTime(this.options_.starttime)),this.addClass("vjs-has-started"),this.trigger("firstplay")},e.prototype.handleTechPause_=function(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.trigger("pause")},e.prototype.handleTechEnded_=function(){this.addClass("vjs-ended"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),this.trigger("ended")},e.prototype.handleTechDurationChange_=function(){this.duration(this.techGet_("duration"))},e.prototype.handleTechClick_=function(t){0===t.button&&this.controls()&&(this.paused()?this.play():this.pause())},e.prototype.handleTechTap_=function(){this.userActive(!this.userActive())},e.prototype.handleTechTouchStart_=function(){this.userWasActive=this.userActive()},e.prototype.handleTechTouchMove_=function(){this.userWasActive&&this.reportUserActivity()},e.prototype.handleTechTouchEnd_=function(t){t.preventDefault()},e.prototype.handleFullscreenChange_=function(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")},e.prototype.handleStageClick_=function(){this.reportUserActivity()},e.prototype.handleTechFullscreenChange_=function(t,e){e&&this.isFullscreen(e.isFullscreen),this.trigger("fullscreenchange")},e.prototype.handleTechError_=function(){var t=this.tech_.error();this.error(t)},e.prototype.handleTechTextData_=function(){var t=null;arguments.length>1&&(t=arguments[1]),this.trigger("textdata",t)},e.prototype.getCache=function(){return this.cache_},e.prototype.techCall_=function(t,e){this.ready(function(){if(t in Xn)return qt(this.middleware_,this.tech_,t,e);try{this.tech_&&this.tech_[t](e)}catch(i){throw qe(i),i}},!0)},e.prototype.techGet_=function(t){if(this.tech_&&this.tech_.isReady_){if(t in qn)return Wt(this.middleware_,this.tech_,t);try{return this.tech_[t]()}catch(e){if(void 0===this.tech_[t])throw qe("Video.js: "+t+" method not defined for "+this.techName_+" playback technology.",e),e;if("TypeError"===e.name)throw qe("Video.js: "+t+" unavailable on "+this.techName_+" playback technology element.",e),this.tech_.isReady_=!1,e;throw qe(e),e}}},e.prototype.play=function(){if(this.changingSrc_)this.ready(function(){var t=this.techGet_("play");void 0!==t&&"function"==typeof t.then&&t.then(null,function(t){})});else{if(this.isReady_&&(this.src()||this.currentSrc()))return this.techGet_("play");this.ready(function(){this.tech_.one("loadstart",function(){var t=this.play();void 0!==t&&"function"==typeof t.then&&t.then(null,function(t){})})})}},e.prototype.pause=function(){this.techCall_("pause")},e.prototype.paused=function(){return this.techGet_("paused")!==!1},e.prototype.played=function(){return this.techGet_("played")||nt(0,0)},e.prototype.scrubbing=function(t){return"undefined"==typeof t?this.scrubbing_:(this.scrubbing_=!!t,void(t?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing")))},e.prototype.currentTime=function(t){return"undefined"!=typeof t?void this.techCall_("setCurrentTime",t):(this.cache_.currentTime=this.techGet_("currentTime")||0,this.cache_.currentTime)},e.prototype.duration=function(t){return void 0===t?void 0!==this.cache_.duration?this.cache_.duration:NaN:(t=parseFloat(t),t<0&&(t=1/0),void(t!==this.cache_.duration&&(this.cache_.duration=t,t===1/0?this.addClass("vjs-live"):this.removeClass("vjs-live"),this.trigger("durationchange"))))},e.prototype.remainingTime=function(){return this.duration()-this.currentTime()},e.prototype.remainingTimeDisplay=function(){return Math.floor(this.duration())-Math.floor(this.currentTime())},e.prototype.buffered=function i(){var i=this.techGet_("buffered");return i&&i.length||(i=nt(0,0)),i},e.prototype.bufferedPercent=function(){return rt(this.buffered(),this.duration())},e.prototype.bufferedEnd=function(){var t=this.buffered(),e=this.duration(),i=t.end(t.length-1);return i>e&&(i=e),i},e.prototype.volume=function(t){var e=void 0;return void 0!==t?(e=Math.max(0,Math.min(1,parseFloat(t))),this.cache_.volume=e,this.techCall_("setVolume",e),void(e>0&&this.lastVolume_(e))):(e=parseFloat(this.techGet_("volume")),isNaN(e)?1:e)},e.prototype.muted=function(t){return void 0!==t?void this.techCall_("setMuted",t):this.techGet_("muted")||!1},e.prototype.defaultMuted=function(t){return void 0!==t?this.techCall_("setDefaultMuted",t):this.techGet_("defaultMuted")||!1},e.prototype.lastVolume_=function(t){return void 0!==t&&0!==t?void(this.cache_.lastVolume=t):this.cache_.lastVolume},e.prototype.supportsFullScreen=function(){return this.techGet_("supportsFullScreen")||!1},e.prototype.isFullscreen=function(t){return void 0!==t?void(this.isFullscreen_=!!t):!!this.isFullscreen_},e.prototype.requestFullscreen=function(){var t=wi;this.isFullscreen(!0),t.requestFullscreen?(U(de,t.fullscreenchange,ui(this,function e(i){this.isFullscreen(de[t.fullscreenElement]),this.isFullscreen()===!1&&W(de,t.fullscreenchange,e),this.trigger("fullscreenchange")})),this.el_[t.requestFullscreen]()):this.tech_.supportsFullScreen()?this.techCall_("enterFullScreen"):(this.enterFullWindow(),this.trigger("fullscreenchange"))},e.prototype.exitFullscreen=function(){var t=wi;this.isFullscreen(!1),t.requestFullscreen?de[t.exitFullscreen]():this.tech_.supportsFullScreen()?this.techCall_("exitFullScreen"):(this.exitFullWindow(),this.trigger("fullscreenchange"))},e.prototype.enterFullWindow=function(){this.isFullWindow=!0,this.docOrigOverflow=de.documentElement.style.overflow,U(de,"keydown",ui(this,this.fullWindowOnEscKey)),de.documentElement.style.overflow="hidden",b(de.body,"vjs-full-window"),this.trigger("enterFullWindow")},e.prototype.fullWindowOnEscKey=function(t){27===t.keyCode&&(this.isFullscreen()===!0?this.exitFullscreen():this.exitFullWindow())},e.prototype.exitFullWindow=function(){this.isFullWindow=!1,W(de,"keydown",this.fullWindowOnEscKey),de.documentElement.style.overflow=this.docOrigOverflow,_(de.body,"vjs-full-window"),this.trigger("exitFullWindow")},e.prototype.canPlayType=function(t){for(var e=void 0,i=0,n=this.options_.techOrder;i<n.length;i++){var r=n[i],o=Un.getTech(r);if(o||(o=Ti.getComponent(r)),o){if(o.isSupported()&&(e=o.canPlayType(t)))return e}else qe.error('The "'+r+'" tech is undefined. Skipped browser support check for that tech.')}return""},e.prototype.selectSource=function(t){var e=this,i=this.options_.techOrder.map(function(t){return[t,Un.getTech(t)]}).filter(function(t){var e=t[0],i=t[1];return i?i.isSupported():(qe.error('The "'+e+'" tech is undefined. Skipped browser support check for that tech.'),!1)}),n=function(t,e,i){var n=void 0;return t.some(function(t){return e.some(function(e){if(n=i(t,e))return!0})}),n},r=void 0,o=function(t){return function(e,i){return t(i,e)}},s=function(t,i){var n=t[0],r=t[1];if(r.canPlaySource(i,e.options_[n.toLowerCase()]))return{source:i,tech:n}};return r=this.options_.sourceOrder?n(t,i,o(s)):n(i,t,s),r||!1},e.prototype.src=function(t){var e=this;if("undefined"==typeof t)return this.cache_.src||"";var i=Yn(t);return i.length?(this.cache_.sources=i,this.changingSrc_=!0,this.cache_.source=i[0],void Vt(this,i[0],function(t,n){e.middleware_=n;var r=e.src_(t);return r?i.length>1?e.src(i.slice(1)):(e.setTimeout(function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})},0),void e.triggerReady()):(e.changingSrc_=!1,e.cache_.src=t.src,void Ut(n,e.tech_))})):void this.setTimeout(function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})},0)},e.prototype.src_=function(t){var e=this.selectSource([t]);return!e||(Q(e.tech,this.techName_)?(this.ready(function(){this.tech_.constructor.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",t):this.techCall_("src",t.src),"auto"===this.options_.preload&&this.load()},!0),!1):(this.changingSrc_=!0,this.loadTech_(e.tech,e.source),!1))},e.prototype.load=function(){this.techCall_("load")},e.prototype.reset=function(){this.loadTech_(this.options_.techOrder[0],null),this.techCall_("reset")},e.prototype.currentSources=function(){var t=this.currentSource(),e=[];return 0!==Object.keys(t).length&&e.push(t),this.cache_.sources||e},e.prototype.currentSource=function(){return this.cache_.source||{}},e.prototype.currentSrc=function(){return this.currentSource()&&this.currentSource().src||""},e.prototype.currentType=function(){return this.currentSource()&&this.currentSource().type||""},e.prototype.preload=function(t){return void 0!==t?(this.techCall_("setPreload",t),void(this.options_.preload=t)):this.techGet_("preload")},e.prototype.autoplay=function(t){return void 0!==t?(this.techCall_("setAutoplay",t),void(this.options_.autoplay=t)):this.techGet_("autoplay",t)},e.prototype.playsinline=function(t){return void 0!==t?(this.techCall_("setPlaysinline",t),this.options_.playsinline=t,this):this.techGet_("playsinline")},e.prototype.loop=function(t){return void 0!==t?(this.techCall_("setLoop",t),void(this.options_.loop=t)):this.techGet_("loop")},e.prototype.poster=function(t){return void 0===t?this.poster_:(t||(t=""),this.poster_=t,this.techCall_("setPoster",t),void this.trigger("posterchange"))},e.prototype.handleTechPosterChange_=function(){!this.poster_&&this.tech_&&this.tech_.poster&&(this.poster_=this.tech_.poster()||"",this.trigger("posterchange"))},e.prototype.controls=function(t){return void 0!==t?(t=!!t,void(this.controls_!==t&&(this.controls_=t,this.usingNativeControls()&&this.techCall_("setControls",t),t?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_())))):!!this.controls_},e.prototype.usingNativeControls=function(t){return void 0!==t?(t=!!t,void(this.usingNativeControls_!==t&&(this.usingNativeControls_=t,t?(this.addClass("vjs-using-native-controls"),this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),this.trigger("usingcustomcontrols"))))):!!this.usingNativeControls_},e.prototype.error=function(t){return void 0===t?this.error_||null:null===t?(this.error_=t,this.removeClass("vjs-error"),void(this.errorDisplay&&this.errorDisplay.close())):(this.error_=new ot(t),this.addClass("vjs-error"),qe.error("(CODE:"+this.error_.code+" "+ot.errorTypes[this.error_.code]+")",this.error_.message,this.error_),void this.trigger("error"))},e.prototype.reportUserActivity=function(t){this.userActivity_=!0},e.prototype.userActive=function(t){return void 0!==t?(t=!!t,void(t!==this.userActive_&&(this.userActive_=t,t?(this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),this.trigger("useractive")):(this.userActivity_=!1,this.tech_&&this.tech_.one("mousemove",function(t){t.stopPropagation(),t.preventDefault()}),this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),this.trigger("userinactive"))))):this.userActive_},e.prototype.listenForUserActivity_=function(){var t=void 0,e=void 0,i=void 0,n=ui(this,this.reportUserActivity),r=function(t){t.screenX===e&&t.screenY===i||(e=t.screenX,i=t.screenY,n())},o=function(){n(),this.clearInterval(t),t=this.setInterval(n,250)},s=function(e){n(),this.clearInterval(t)};this.on("mousedown",o),this.on("mousemove",r),this.on("mouseup",s),this.on("keydown",n),this.on("keyup",n);var a=void 0;this.setInterval(function(){if(this.userActivity_){this.userActivity_=!1,this.userActive(!0),this.clearTimeout(a);var t=this.options_.inactivityTimeout;t>0&&(a=this.setTimeout(function(){this.userActivity_||this.userActive(!1)},t))}},250)},e.prototype.playbackRate=function(t){return void 0!==t?void this.techCall_("setPlaybackRate",t):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("playbackRate"):1},e.prototype.defaultPlaybackRate=function(t){return void 0!==t?this.techCall_("setDefaultPlaybackRate",t):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("defaultPlaybackRate"):1},e.prototype.isAudio=function(t){return void 0!==t?void(this.isAudio_=!!t):!!this.isAudio_},e.prototype.addTextTrack=function(t,e,i){if(this.tech_)return this.tech_.addTextTrack(t,e,i)},e.prototype.addRemoteTextTrack=function(t,e){if(this.tech_)return this.tech_.addRemoteTextTrack(t,e)},e.prototype.removeRemoteTextTrack=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.track,i=void 0===e?arguments[0]:e;if(this.tech_)return this.tech_.removeRemoteTextTrack(i)},e.prototype.getVideoPlaybackQuality=function(){return this.techGet_("getVideoPlaybackQuality")},e.prototype.videoWidth=function(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0},e.prototype.videoHeight=function(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0},e.prototype.language=function(t){return void 0===t?this.language_:void(this.language_=String(t).toLowerCase())},e.prototype.languages=function(){return Z(e.prototype.options_.languages,this.languages_)},e.prototype.toJSON=function(){var t=Z(this.options_),e=t.tracks;t.tracks=[];for(var i=0;i<e.length;i++){var n=e[i];n=Z(n),n.player=void 0,t.tracks[i]=n}return t},e.prototype.createModal=function(t,e){var i=this;e=e||{},e.content=t||"";var n=new Li(this,e);return this.addChild(n),n.on("dispose",function(){i.removeChild(n)}),n.open(),n},e.getTagSettings=function(t){var e={sources:[],tracks:[]},i=k(t),r=i["data-setup"];if(m(t,"vjs-fluid")&&(i.fluid=!0),null!==r){var o=Oi(r||"{}"),s=o[0],a=o[1];s&&qe.error(s),n(i,a)}if(n(e,i),t.hasChildNodes())for(var l=t.childNodes,u=0,c=l.length;u<c;u++){var d=l[u],p=d.nodeName.toLowerCase();"source"===p?e.sources.push(k(d)):"track"===p&&e.tracks.push(k(d))}return e},e.prototype.flexNotSupported_=function(){var t=de.createElement("i");return!("flexBasis"in t.style||"webkitFlexBasis"in t.style||"mozFlexBasis"in t.style||"msFlexBasis"in t.style||"msFlexOrder"in t.style)},e}(Ti);En.names.forEach(function(t){var e=En[t];_o.prototype[e.getterName]=function(){return this.tech_?this.tech_[e.getterName]():(this[e.privateName]=this[e.privateName]||new e.ListClass,this[e.privateName])}}),_o.players={};var To=se.navigator;_o.prototype.options_={techOrder:Un.defaultTechOrder_,html5:{},flash:{},inactivityTimeout:2e3,playbackRates:[],children:["mediaLoader","posterImage","textTrackDisplay","loadingSpinner","bigPlayButton","controlBar","errorDisplay","textTrackSettings"],language:To&&(To.languages&&To.languages[0]||To.userLanguage||To.language)||"en",languages:{},notSupportedMessage:"No compatible source was found for this media."},["ended","seeking","seekable","networkState","readyState"].forEach(function(t){_o.prototype[t]=function(){return this.techGet_(t)}}),bo.forEach(function(t){_o.prototype["handleTech"+J(t)+"_"]=function(){return this.trigger(t)}}),Ti.registerComponent("Player",_o);var wo="plugin",ko="activePlugins_",Co={},So=function(t){return Co.hasOwnProperty(t)},Eo=function(t){return So(t)?Co[t]:void 0},xo=function(t,e){t[ko]=t[ko]||{},t[ko][e]=!0},jo=function(t,e,i){var n=(i?"before":"")+"pluginsetup";t.trigger(n,e),t.trigger(n+":"+e.name,e)},Oo=function(t,e){var i=function(){jo(this,{name:t,plugin:e,instance:null},!0);var i=e.apply(this,arguments);return xo(this,t),jo(this,{name:t,plugin:e,instance:i}),i};return Object.keys(e).forEach(function(t){i[t]=e[t]}),i},Ao=function(t,e){return e.prototype.name=t,function(){jo(this,{name:t,plugin:e,instance:null},!0);for(var i=arguments.length,n=Array(i),r=0;r<i;r++)n[r]=arguments[r];var o=new(Function.prototype.bind.apply(e,[null].concat([this].concat(n))));return this[t]=function(){return o},jo(this,o.getEventHash()),o}},Po=function(){function t(e){if(Le(this,t),this.constructor===t)throw new Error("Plugin must be sub-classed; not directly instantiated.");this.player=e,G(this),delete this.trigger,K(this,this.constructor.defaultState),xo(e,this.name),this.dispose=ui(this,this.dispose),e.on("dispose",this.dispose)}return t.prototype.getEventHash=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t.name=this.name,t.plugin=this.constructor,t.instance=this,t},t.prototype.trigger=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return q(this.eventBusEl_,t,this.getEventHash(e))},t.prototype.handleStateChanged=function(t){},t.prototype.dispose=function(){var t=this.name,e=this.player;this.trigger("dispose"),this.off(),e.off("dispose",this.dispose),e[ko][t]=!1,this.player=this.state=null,e[t]=Ao(t,Co[t])},t.isBasic=function(e){var i="string"==typeof e?Eo(e):e;return"function"==typeof i&&!t.prototype.isPrototypeOf(i.prototype)},t.registerPlugin=function(e,i){if("string"!=typeof e)throw new Error('Illegal plugin name, "'+e+'", must be a string, was '+("undefined"==typeof e?"undefined":Ne(e))+".");if(So(e))qe.warn('A plugin named "'+e+'" already exists. You may want to avoid re-registering plugins!');else if(_o.prototype.hasOwnProperty(e))throw new Error('Illegal plugin name, "'+e+'", cannot share a name with an existing player method!');if("function"!=typeof i)throw new Error('Illegal plugin for "'+e+'", must be a function, was '+("undefined"==typeof i?"undefined":Ne(i))+".");return Co[e]=i,e!==wo&&(t.isBasic(i)?_o.prototype[e]=Oo(e,i):_o.prototype[e]=Ao(e,i)),i},t.deregisterPlugin=function(t){if(t===wo)throw new Error("Cannot de-register base plugin.");So(t)&&(delete Co[t],delete _o.prototype[t])},t.getPlugins=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.keys(Co),e=void 0;return t.forEach(function(t){var i=Eo(t);i&&(e=e||{},e[t]=i)}),e},t.getPluginVersion=function(t){var e=Eo(t);return e&&e.VERSION||""},t}();Po.getPlugin=Eo,Po.BASE_PLUGIN_NAME=wo,Po.registerPlugin(wo,Po),_o.prototype.usingPlugin=function(t){return!!this[ko]&&this[ko][t]===!0},_o.prototype.hasPlugin=function(t){return!!So(t)};var Do=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof e?"undefined":Ne(e)));t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.super_=e)},Mo=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=function(){t.apply(this,arguments)},n={};"object"===("undefined"==typeof e?"undefined":Ne(e))?(e.constructor!==Object.prototype.constructor&&(i=e.constructor),n=e):"function"==typeof e&&(i=e),Do(i,t);for(var r in n)n.hasOwnProperty(r)&&(i.prototype[r]=n[r]);return i};if("undefined"==typeof HTMLVideoElement&&d()&&(de.createElement("video"),de.createElement("audio"),de.createElement("track")),ee.hooks_={},ee.hooks=function(t,e){return ee.hooks_[t]=ee.hooks_[t]||[],e&&(ee.hooks_[t]=ee.hooks_[t].concat(e)),ee.hooks_[t]},ee.hook=function(t,e){ee.hooks(t,e)},ee.hookOnce=function(t,e){ee.hooks(t,[].concat(e).map(function(e){var i=function n(){ee.removeHook(t,n),e.apply(void 0,arguments)};return i}))},ee.removeHook=function(t,e){var i=ee.hooks(t).indexOf(e);return!(i<=-1)&&(ee.hooks_[t]=ee.hooks_[t].slice(),ee.hooks_[t].splice(i,1),!0)},se.VIDEOJS_NO_DYNAMIC_STYLE!==!0&&d()){var Io=Ge(".vjs-styles-defaults");if(!Io){Io=ai("vjs-styles-defaults");var No=Ge("head");No&&No.insertBefore(Io,No.firstChild),li(Io,"\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")}}return Y(1,ee),ee.VERSION=ne,ee.options=_o.prototype.options_,ee.getPlayers=function(){return _o.players},ee.players=_o.players,ee.getComponent=Ti.getComponent,ee.registerComponent=function(t,e){Un.isTech(e)&&qe.warn("The "+t+" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"),Ti.registerComponent.call(Ti,t,e)},ee.getTech=Un.getTech,ee.registerTech=Un.registerTech,ee.use=zt,ee.browser=Ie,ee.TOUCH_ENABLED=De,ee.extend=Mo,ee.mergeOptions=Z,ee.bind=ui,ee.registerPlugin=Po.registerPlugin,ee.plugin=function(t,e){return qe.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"),Po.registerPlugin(t,e)},ee.getPlugins=Po.getPlugins,ee.getPlugin=Po.getPlugin,ee.getPluginVersion=Po.getPluginVersion,ee.addLanguage=function(t,e){var i;return t=(""+t).toLowerCase(),ee.options.languages=Z(ee.options.languages,(i={},i[t]=e,i)),ee.options.languages[t]},ee.log=qe,ee.createTimeRange=ee.createTimeRanges=nt,ee.formatTime=Jt,ee.parseUrl=Ji,ee.isCrossOrigin=tn,ee.EventTarget=di,ee.on=U,ee.one=X,ee.off=W,ee.trigger=q,ee.xhr=hn,ee.TextTrack=yn,ee.AudioTrack=gn,ee.VideoTrack=mn,["isEl","isTextNode","createEl","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","emptyEl","appendContent","insertContent"].forEach(function(t){ee[t]=function(){return qe.warn("videojs."+t+"() is deprecated; use videojs.dom."+t+"() instead"),Je[t].apply(null,arguments)}}),ee.computedStyle=a,ee.dom=Je,ee.url=en,ee}),!function(){!function(t){var e=t&&t.videojs;e&&(e.CDN_VERSION="6.4.0")}(window),function(t,e,i,n,r,o,s){e&&e.HELP_IMPROVE_VIDEOJS!==!1&&(r.random()>.01||(o=e.location,s=e.videojs||{},t.src="//www.google-analytics.com/__utm.gif?utmwv=5.4.2&utmac=UA-16505296-3&utmn=1&utmhn="+n(o.hostname)+"&utmsr="+e.screen.availWidth+"x"+e.screen.availHeight+"&utmul="+(i.language||i.userLanguage||"").toLowerCase()+"&utmr="+n(o.href)+"&utmp="+n(o.hostname+o.pathname)+"&utmcc=__utma%3D1."+r.floor(1e10*r.random())+".1.1.1.1%3B&utme=8(vjsv*cdnv)9("+s.VERSION+"*"+s.CDN_VERSION+")"))}(new Image,window,navigator,encodeURIComponent,Math)}(),!function(t,e){"undefined"==typeof t.HTMLVideoElement&&(e.createElement("video"),e.createElement("audio"),e.createElement("track")),function(t,e){"use strict";"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e():t.returnExports=e()}(this,function(){var e,i=Array,n=i.prototype,r=Object,o=r.prototype,s=Function.prototype,a=String,l=a.prototype,u=Number,c=u.prototype,d=n.slice,p=n.splice,h=n.push,f=n.unshift,v=n.concat,y=s.call,g=s.apply,m=Math.max,b=Math.min,_=o.toString,T="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,w=Function.prototype.toString,k=function(t){try{return w.call(t),!0}catch(e){return!1}},C="[object Function]",S="[object GeneratorFunction]";e=function(t){if("function"!=typeof t)return!1;if(T)return k(t);var e=_.call(t);return e===C||e===S};var E,x=RegExp.prototype.exec,j=function(t){try{return x.call(t),!0}catch(e){return!1}},O="[object RegExp]";E=function(t){return"object"==typeof t&&(T?j(t):_.call(t)===O)};var A,P=String.prototype.valueOf,D=function(t){try{return P.call(t),!0}catch(e){return!1}},M="[object String]";A=function(t){return"string"==typeof t||"object"==typeof t&&(T?D(t):_.call(t)===M)};var I=r.defineProperty&&function(){try{var t={};r.defineProperty(t,"x",{enumerable:!1,value:t});for(var e in t)return!1;return t.x===t}catch(i){return!1}}(),N=function(t){var e;return e=I?function(t,e,i,n){!n&&e in t||r.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:i})}:function(t,e,i,n){!n&&e in t||(t[e]=i)},function(i,n,r){for(var o in n)t.call(n,o)&&e(i,o,n[o],r)}}(o.hasOwnProperty),L=function(t){var e=typeof t;return null===t||"object"!==e&&"function"!==e},F=u.isNaN||function(t){return t!==t},B={ToInteger:function(t){var e=+t;return F(e)?e=0:0!==e&&e!==1/0&&e!==-(1/0)&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e},ToPrimitive:function(t){var i,n,r;if(L(t))return t;if(n=t.valueOf,e(n)&&(i=n.call(t),L(i)))return i;if(r=t.toString,e(r)&&(i=r.call(t),L(i)))return i;throw new TypeError},ToObject:function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return r(t)},ToUint32:function(t){return t>>>0}},$=function(){};N(s,{bind:function(t){var i=this;if(!e(i))throw new TypeError("Function.prototype.bind called on incompatible "+i);for(var n,o=d.call(arguments,1),s=function(){if(this instanceof n){var e=i.apply(this,v.call(o,d.call(arguments)));return r(e)===e?e:this}return i.apply(t,v.call(o,d.call(arguments)))},a=m(0,i.length-o.length),l=[],u=0;a>u;u++)h.call(l,"$"+u);return n=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this, arguments); }")(s),i.prototype&&($.prototype=i.prototype,n.prototype=new $,$.prototype=null),n}});var R=y.bind(o.hasOwnProperty),H=y.bind(o.toString),z=y.bind(d),V=g.bind(d),U=y.bind(l.slice),W=y.bind(l.split),q=y.bind(l.indexOf),X=y.bind(h),Y=y.bind(o.propertyIsEnumerable),G=y.bind(n.sort),K=i.isArray||function(t){return"[object Array]"===H(t)},J=1!==[].unshift(0);N(n,{unshift:function(){return f.apply(this,arguments),this.length}},J),N(i,{isArray:K});var Q=r("a"),Z="a"!==Q[0]||!(0 in Q),tt=function(t){var e=!0,i=!0,n=!1;if(t)try{t.call("foo",function(t,i,n){"object"!=typeof n&&(e=!1)}),t.call([1],function(){"use strict";i="string"==typeof this},"x")}catch(r){n=!0}return!!t&&!n&&e&&i};N(n,{forEach:function(t){var i,n=B.ToObject(this),r=Z&&A(this)?W(this,""):n,o=-1,s=B.ToUint32(r.length);if(arguments.length>1&&(i=arguments[1]),!e(t))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++o<s;)o in r&&("undefined"==typeof i?t(r[o],o,n):t.call(i,r[o],o,n))}},!tt(n.forEach)),N(n,{map:function(t){var n,r=B.ToObject(this),o=Z&&A(this)?W(this,""):r,s=B.ToUint32(o.length),a=i(s);if(arguments.length>1&&(n=arguments[1]),!e(t))throw new TypeError("Array.prototype.map callback must be a function");for(var l=0;s>l;l++)l in o&&("undefined"==typeof n?a[l]=t(o[l],l,r):a[l]=t.call(n,o[l],l,r));return a}},!tt(n.map)),N(n,{
filter:function(t){var i,n,r=B.ToObject(this),o=Z&&A(this)?W(this,""):r,s=B.ToUint32(o.length),a=[];if(arguments.length>1&&(n=arguments[1]),!e(t))throw new TypeError("Array.prototype.filter callback must be a function");for(var l=0;s>l;l++)l in o&&(i=o[l],("undefined"==typeof n?t(i,l,r):t.call(n,i,l,r))&&X(a,i));return a}},!tt(n.filter)),N(n,{every:function(t){var i,n=B.ToObject(this),r=Z&&A(this)?W(this,""):n,o=B.ToUint32(r.length);if(arguments.length>1&&(i=arguments[1]),!e(t))throw new TypeError("Array.prototype.every callback must be a function");for(var s=0;o>s;s++)if(s in r&&!("undefined"==typeof i?t(r[s],s,n):t.call(i,r[s],s,n)))return!1;return!0}},!tt(n.every)),N(n,{some:function(t){var i,n=B.ToObject(this),r=Z&&A(this)?W(this,""):n,o=B.ToUint32(r.length);if(arguments.length>1&&(i=arguments[1]),!e(t))throw new TypeError("Array.prototype.some callback must be a function");for(var s=0;o>s;s++)if(s in r&&("undefined"==typeof i?t(r[s],s,n):t.call(i,r[s],s,n)))return!0;return!1}},!tt(n.some));var et=!1;n.reduce&&(et="object"==typeof n.reduce.call("es5",function(t,e,i,n){return n})),N(n,{reduce:function(t){var i=B.ToObject(this),n=Z&&A(this)?W(this,""):i,r=B.ToUint32(n.length);if(!e(t))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===r&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var o,s=0;if(arguments.length>=2)o=arguments[1];else for(;;){if(s in n){o=n[s++];break}if(++s>=r)throw new TypeError("reduce of empty array with no initial value")}for(;r>s;s++)s in n&&(o=t(o,n[s],s,i));return o}},!et);var it=!1;n.reduceRight&&(it="object"==typeof n.reduceRight.call("es5",function(t,e,i,n){return n})),N(n,{reduceRight:function(t){var i=B.ToObject(this),n=Z&&A(this)?W(this,""):i,r=B.ToUint32(n.length);if(!e(t))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===r&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var o,s=r-1;if(arguments.length>=2)o=arguments[1];else for(;;){if(s in n){o=n[s--];break}if(--s<0)throw new TypeError("reduceRight of empty array with no initial value")}if(0>s)return o;do s in n&&(o=t(o,n[s],s,i));while(s--);return o}},!it);var nt=n.indexOf&&-1!==[0,1].indexOf(1,2);N(n,{indexOf:function(t){var e=Z&&A(this)?W(this,""):B.ToObject(this),i=B.ToUint32(e.length);if(0===i)return-1;var n=0;for(arguments.length>1&&(n=B.ToInteger(arguments[1])),n=n>=0?n:m(0,i+n);i>n;n++)if(n in e&&e[n]===t)return n;return-1}},nt);var rt=n.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);N(n,{lastIndexOf:function(t){var e=Z&&A(this)?W(this,""):B.ToObject(this),i=B.ToUint32(e.length);if(0===i)return-1;var n=i-1;for(arguments.length>1&&(n=b(n,B.ToInteger(arguments[1]))),n=n>=0?n:i-Math.abs(n);n>=0;n--)if(n in e&&t===e[n])return n;return-1}},rt);var ot=function(){var t=[1,2],e=t.splice();return 2===t.length&&K(e)&&0===e.length}();N(n,{splice:function(t,e){return 0===arguments.length?[]:p.apply(this,arguments)}},!ot);var st=function(){var t={};return n.splice.call(t,0,0,1),1===t.length}();N(n,{splice:function(t,e){if(0===arguments.length)return[];var i=arguments;return this.length=m(B.ToInteger(this.length),0),arguments.length>0&&"number"!=typeof e&&(i=z(arguments),i.length<2?X(i,this.length-t):i[1]=B.ToInteger(e)),p.apply(this,i)}},!st);var at=function(){var t=new i(1e5);return t[8]="x",t.splice(1,1),7===t.indexOf("x")}(),lt=function(){var t=256,e=[];return e[t]="a",e.splice(t+1,0,"b"),"a"===e[t]}();N(n,{splice:function(t,e){for(var i,n=B.ToObject(this),r=[],o=B.ToUint32(n.length),s=B.ToInteger(t),l=0>s?m(o+s,0):b(s,o),u=b(m(B.ToInteger(e),0),o-l),c=0;u>c;)i=a(l+c),R(n,i)&&(r[c]=n[i]),c+=1;var d,p=z(arguments,2),h=p.length;if(u>h){for(c=l;o-u>c;)i=a(c+u),d=a(c+h),R(n,i)?n[d]=n[i]:delete n[d],c+=1;for(c=o;c>o-u+h;)delete n[c-1],c-=1}else if(h>u)for(c=o-u;c>l;)i=a(c+u-1),d=a(c+h-1),R(n,i)?n[d]=n[i]:delete n[d],c-=1;c=l;for(var f=0;f<p.length;++f)n[c]=p[f],c+=1;return n.length=o-u+h,r}},!at||!lt);var ut,ct=n.join;try{ut="1,2,3"!==Array.prototype.join.call("123",",")}catch(dt){ut=!0}ut&&N(n,{join:function(t){var e="undefined"==typeof t?",":t;return ct.call(A(this)?W(this,""):this,e)}},ut);var pt="1,2"!==[1,2].join(void 0);pt&&N(n,{join:function(t){var e="undefined"==typeof t?",":t;return ct.call(this,e)}},pt);var ht=function(t){for(var e=B.ToObject(this),i=B.ToUint32(e.length),n=0;n<arguments.length;)e[i+n]=arguments[n],n+=1;return e.length=i+n,i+n},ft=function(){var t={},e=Array.prototype.push.call(t,void 0);return 1!==e||1!==t.length||"undefined"!=typeof t[0]||!R(t,0)}();N(n,{push:function(t){return K(this)?h.apply(this,arguments):ht.apply(this,arguments)}},ft);var vt=function(){var t=[],e=t.push(void 0);return 1!==e||1!==t.length||"undefined"!=typeof t[0]||!R(t,0)}();N(n,{push:ht},vt),N(n,{slice:function(t,e){var i=A(this)?W(this,""):this;return V(i,arguments)}},Z);var yt=function(){try{return[1,2].sort(null),[1,2].sort({}),!0}catch(t){}return!1}(),gt=function(){try{return[1,2].sort(/a/),!1}catch(t){}return!0}(),mt=function(){try{return[1,2].sort(void 0),!0}catch(t){}return!1}();N(n,{sort:function(t){if("undefined"==typeof t)return G(this);if(!e(t))throw new TypeError("Array.prototype.sort callback must be a function");return G(this,t)}},yt||!mt||!gt);var bt=!{toString:null}.propertyIsEnumerable("toString"),_t=function(){}.propertyIsEnumerable("prototype"),Tt=!R("x","0"),wt=function(t){var e=t.constructor;return e&&e.prototype===t},kt={$window:!0,$console:!0,$parent:!0,$self:!0,$frame:!0,$frames:!0,$frameElement:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$external:!0},Ct=function(){if("undefined"==typeof t)return!1;for(var e in t)try{!kt["$"+e]&&R(t,e)&&null!==t[e]&&"object"==typeof t[e]&&wt(t[e])}catch(i){return!0}return!1}(),St=function(e){if("undefined"==typeof t||!Ct)return wt(e);try{return wt(e)}catch(i){return!1}},Et=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],xt=Et.length,jt=function(t){return"[object Arguments]"===H(t)},Ot=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&!K(t)&&e(t.callee)},At=jt(arguments)?jt:Ot;N(r,{keys:function(t){var i=e(t),n=At(t),r=null!==t&&"object"==typeof t,o=r&&A(t);if(!r&&!i&&!n)throw new TypeError("Object.keys called on a non-object");var s=[],l=_t&&i;if(o&&Tt||n)for(var u=0;u<t.length;++u)X(s,a(u));if(!n)for(var c in t)l&&"prototype"===c||!R(t,c)||X(s,a(c));if(bt)for(var d=St(t),p=0;xt>p;p++){var h=Et[p];d&&"constructor"===h||!R(t,h)||X(s,h)}return s}});var Pt=r.keys&&function(){return 2===r.keys(arguments).length}(1,2),Dt=r.keys&&function(){var t=r.keys(arguments);return 1!==arguments.length||1!==t.length||1!==t[0]}(1),Mt=r.keys;N(r,{keys:function(t){return Mt(At(t)?z(t):t)}},!Pt||Dt);var It,Nt,Lt=0!==new Date((-0xc782b5b342b24)).getUTCMonth(),Ft=new Date((-0x55d318d56a724)),Bt=new Date(14496624e5),$t="Mon, 01 Jan -45875 11:59:59 GMT"!==Ft.toUTCString(),Rt=Ft.getTimezoneOffset();-720>Rt?(It="Tue Jan 02 -45875"!==Ft.toDateString(),Nt=!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(Bt.toString())):(It="Mon Jan 01 -45875"!==Ft.toDateString(),Nt=!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/.test(Bt.toString()));var Ht=y.bind(Date.prototype.getFullYear),zt=y.bind(Date.prototype.getMonth),Vt=y.bind(Date.prototype.getDate),Ut=y.bind(Date.prototype.getUTCFullYear),Wt=y.bind(Date.prototype.getUTCMonth),qt=y.bind(Date.prototype.getUTCDate),Xt=y.bind(Date.prototype.getUTCDay),Yt=y.bind(Date.prototype.getUTCHours),Gt=y.bind(Date.prototype.getUTCMinutes),Kt=y.bind(Date.prototype.getUTCSeconds),Jt=y.bind(Date.prototype.getUTCMilliseconds),Qt=["Sun","Mon","Tue","Wed","Thu","Fri"],Zt=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],te=function(t,e){return Vt(new Date(e,t,0))};N(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ht(this);return 0>t&&zt(this)>11?t+1:t},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ht(this),e=zt(this);return 0>t&&e>11?0:e},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ht(this),e=zt(this),i=Vt(this);if(0>t&&e>11){if(12===e)return i;var n=te(0,t+1);return n-i+1}return i},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ut(this);return 0>t&&Wt(this)>11?t+1:t},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ut(this),e=Wt(this);return 0>t&&e>11?0:e},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Ut(this),e=Wt(this),i=qt(this);if(0>t&&e>11){if(12===e)return i;var n=te(0,t+1);return n-i+1}return i}},Lt),N(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Xt(this),e=qt(this),i=Wt(this),n=Ut(this),r=Yt(this),o=Gt(this),s=Kt(this);return Qt[t]+", "+(10>e?"0"+e:e)+" "+Zt[i]+" "+n+" "+(10>r?"0"+r:r)+":"+(10>o?"0"+o:o)+":"+(10>s?"0"+s:s)+" GMT"}},Lt||$t),N(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),i=this.getMonth(),n=this.getFullYear();return Qt[t]+" "+Zt[i]+" "+(10>e?"0"+e:e)+" "+n}},Lt||It),(Lt||Nt)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),i=this.getMonth(),n=this.getFullYear(),r=this.getHours(),o=this.getMinutes(),s=this.getSeconds(),a=this.getTimezoneOffset(),l=Math.floor(Math.abs(a)/60),u=Math.floor(Math.abs(a)%60);return Qt[t]+" "+Zt[i]+" "+(10>e?"0"+e:e)+" "+n+" "+(10>r?"0"+r:r)+":"+(10>o?"0"+o:o)+":"+(10>s?"0"+s:s)+" GMT"+(a>0?"-":"+")+(10>l?"0"+l:l)+(10>u?"0"+u:u)},I&&r.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var ee=-621987552e5,ie="-000001",ne=Date.prototype.toISOString&&-1===new Date(ee).toISOString().indexOf(ie),re=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date((-1)).toISOString();N(Date.prototype,{toISOString:function(){if(!isFinite(this))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var t=Ut(this),e=Wt(this);t+=Math.floor(e/12),e=(e%12+12)%12;var i=[e+1,qt(this),Yt(this),Gt(this),Kt(this)];t=(0>t?"-":t>9999?"+":"")+U("00000"+Math.abs(t),t>=0&&9999>=t?-4:-6);for(var n=0;n<i.length;++n)i[n]=U("00"+i[n],-2);return t+"-"+z(i,0,2).join("-")+"T"+z(i,2).join(":")+"."+U("000"+Jt(this),-3)+"Z"}},ne||re);var oe=function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(ee).toJSON().indexOf(ie)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(t){return!1}}();oe||(Date.prototype.toJSON=function(t){var i=r(this),n=B.ToPrimitive(i);if("number"==typeof n&&!isFinite(n))return null;var o=i.toISOString;if(!e(o))throw new TypeError("toISOString property is not callable");return o.call(i)});var se=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),ae=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z")),le=isNaN(Date.parse("2000-01-01T00:00:00.000Z"));if(le||ae||!se){var ue=Math.pow(2,31)-1,ce=F(new Date(1970,0,1,0,0,0,ue+1).getTime());Date=function(t){var e=function(i,n,r,o,s,l,u){var c,d=arguments.length;if(this instanceof t){var p=l,h=u;if(ce&&d>=7&&u>ue){var f=Math.floor(u/ue)*ue,v=Math.floor(f/1e3);p+=v,h-=1e3*v}c=1===d&&a(i)===i?new t(e.parse(i)):d>=7?new t(i,n,r,o,s,p,h):d>=6?new t(i,n,r,o,s,p):d>=5?new t(i,n,r,o,s):d>=4?new t(i,n,r,o):d>=3?new t(i,n,r):d>=2?new t(i,n):d>=1?new t(i):new t}else c=t.apply(this,arguments);return L(c)||N(c,{constructor:e},!0),c},i=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),n=[0,31,59,90,120,151,181,212,243,273,304,334,365],r=function(t,e){var i=e>1?1:0;return n[e]+Math.floor((t-1969+i)/4)-Math.floor((t-1901+i)/100)+Math.floor((t-1601+i)/400)+365*(t-1970)},o=function(e){var i=0,n=e;if(ce&&n>ue){var r=Math.floor(n/ue)*ue,o=Math.floor(r/1e3);i+=o,n-=1e3*o}return u(new t(1970,0,1,0,0,i,n))};for(var s in t)R(t,s)&&(e[s]=t[s]);N(e,{now:t.now,UTC:t.UTC},!0),e.prototype=t.prototype,N(e.prototype,{constructor:e},!0);var l=function(e){var n=i.exec(e);if(n){var s,a=u(n[1]),l=u(n[2]||1)-1,c=u(n[3]||1)-1,d=u(n[4]||0),p=u(n[5]||0),h=u(n[6]||0),f=Math.floor(1e3*u(n[7]||0)),v=Boolean(n[4]&&!n[8]),y="-"===n[9]?1:-1,g=u(n[10]||0),m=u(n[11]||0),b=p>0||h>0||f>0;return(b?24:25)>d&&60>p&&60>h&&1e3>f&&l>-1&&12>l&&24>g&&60>m&&c>-1&&c<r(a,l+1)-r(a,l)&&(s=60*(24*(r(a,l)+c)+d+g*y),s=1e3*(60*(s+p+m*y)+h)+f,v&&(s=o(s)),s>=-864e13&&864e13>=s)?s:NaN}return t.parse.apply(this,arguments)};return N(e,{parse:l}),e}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var de=c.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0)),pe={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(t,e){for(var i=-1,n=e;++i<pe.size;)n+=t*pe.data[i],pe.data[i]=n%pe.base,n=Math.floor(n/pe.base)},divide:function(t){for(var e=pe.size,i=0;--e>=0;)i+=pe.data[e],pe.data[e]=Math.floor(i/t),i=i%t*pe.base},numToString:function(){for(var t=pe.size,e="";--t>=0;)if(""!==e||0===t||0!==pe.data[t]){var i=a(pe.data[t]);""===e?e=i:e+=U("0000000",0,7-i.length)+i}return e},pow:function De(t,e,i){return 0===e?i:e%2===1?De(t,e-1,i*t):De(t*t,e/2,i)},log:function(t){for(var e=0,i=t;i>=4096;)e+=12,i/=4096;for(;i>=2;)e+=1,i/=2;return e}},he=function(t){var e,i,n,r,o,s,l,c;if(e=u(t),e=F(e)?0:Math.floor(e),0>e||e>20)throw new RangeError("Number.toFixed called with invalid number of decimals");if(i=u(this),F(i))return"NaN";if(-1e21>=i||i>=1e21)return a(i);if(n="",0>i&&(n="-",i=-i),r="0",i>1e-21)if(o=pe.log(i*pe.pow(2,69,1))-69,s=0>o?i*pe.pow(2,-o,1):i/pe.pow(2,o,1),s*=4503599627370496,o=52-o,o>0){for(pe.multiply(0,s),l=e;l>=7;)pe.multiply(1e7,0),l-=7;for(pe.multiply(pe.pow(10,l,1),0),l=o-1;l>=23;)pe.divide(1<<23),l-=23;pe.divide(1<<l),pe.multiply(1,1),pe.divide(2),r=pe.numToString()}else pe.multiply(0,s),pe.multiply(1<<-o,0),r=pe.numToString()+U("0.00000000000000000000",2,2+e);return e>0?(c=r.length,r=e>=c?n+U("0.0000000000000000000",0,e-c+2)+r:n+U(r,0,c-e)+"."+U(r,c-e)):r=n+r,r};N(c,{toFixed:he},de);var fe=function(){try{return"1"===1..toPrecision(void 0)}catch(t){return!0}}(),ve=c.toPrecision;N(c,{toPrecision:function(t){return"undefined"==typeof t?ve.call(this):ve.call(this,t)}},fe),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?!function(){var t="undefined"==typeof/()??/.exec("")[1],e=Math.pow(2,32)-1;l.split=function(i,n){var r=String(this);if("undefined"==typeof i&&0===n)return[];if(!E(i))return W(this,i,n);var o,s,a,l,u=[],c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(i.sticky?"y":""),d=0,p=new RegExp(i.source,c+"g");t||(o=new RegExp("^"+p.source+"$(?!\\s)",c));var f="undefined"==typeof n?e:B.ToUint32(n);for(s=p.exec(r);s&&(a=s.index+s[0].length,!(a>d&&(X(u,U(r,d,s.index)),!t&&s.length>1&&s[0].replace(o,function(){for(var t=1;t<arguments.length-2;t++)"undefined"==typeof arguments[t]&&(s[t]=void 0)}),s.length>1&&s.index<r.length&&h.apply(u,z(s,1)),l=s[0].length,d=a,u.length>=f)));)p.lastIndex===s.index&&p.lastIndex++,s=p.exec(r);return d===r.length?(l||!p.test(""))&&X(u,""):X(u,U(r,d)),u.length>f?U(u,0,f):u}}():"0".split(void 0,0).length&&(l.split=function(t,e){return"undefined"==typeof t&&0===e?[]:W(this,t,e)});var ye=l.replace,ge=function(){var t=[];return"x".replace(/x(.)?/g,function(e,i){X(t,i)}),1===t.length&&"undefined"==typeof t[0]}();ge||(l.replace=function(t,i){var n=e(i),r=E(t)&&/\)[*?]/.test(t.source);if(n&&r){var o=function(e){var n=arguments.length,r=t.lastIndex;t.lastIndex=0;var o=t.exec(e)||[];return t.lastIndex=r,X(o,arguments[n-2],arguments[n-1]),i.apply(this,o)};return ye.call(this,t,o)}return ye.call(this,t,i)});var me=l.substr,be="".substr&&"b"!=="0b".substr(-1);N(l,{substr:function(t,e){var i=t;return 0>t&&(i=m(this.length+t,0)),me.call(this,i,e)}},be);var _e="\t\n\x0B\f\r   ᠎             　\u2028\u2029\ufeff",Te="​",we="["+_e+"]",ke=new RegExp("^"+we+we+"*"),Ce=new RegExp(we+we+"*$"),Se=l.trim&&(_e.trim()||!Te.trim());N(l,{trim:function(){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");return a(this).replace(ke,"").replace(Ce,"")}},Se);var Ee=y.bind(String.prototype.trim),xe=l.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);N(l,{lastIndexOf:function(t){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");for(var e=a(this),i=a(t),n=arguments.length>1?u(arguments[1]):NaN,r=F(n)?1/0:B.ToInteger(n),o=b(m(r,0),e.length),s=i.length,l=o+s;l>0;){l=m(0,l-s);var c=q(U(e,l,o+s),i);if(-1!==c)return l+c}return-1}},xe);var je=l.lastIndexOf;if(N(l,{lastIndexOf:function(t){return je.apply(this,arguments)}},1!==l.lastIndexOf.length),(8!==parseInt(_e+"08")||22!==parseInt(_e+"0x16"))&&(parseInt=function(t){var e=/^[\-+]?0[xX]/;return function(i,n){var r=Ee(i),o=u(n)||(e.test(r)?16:10);return t(r,o)}}(parseInt)),1/parseFloat("-0")!==-(1/0)&&(parseFloat=function(t){return function(e){var i=Ee(e),n=t(i);return 0===n&&"-"===U(i,0,1)?-0:n}}(parseFloat)),"RangeError: test"!==String(new RangeError("test"))){var Oe=function(){if("undefined"==typeof this||null===this)throw new TypeError("can't convert "+this+" to object");var t=this.name;"undefined"==typeof t?t="Error":"string"!=typeof t&&(t=a(t));var e=this.message;return"undefined"==typeof e?e="":"string"!=typeof e&&(e=a(e)),t?e?t+": "+e:t:e};Error.prototype.toString=Oe}if(I){var Ae=function(t,e){if(Y(t,e)){var i=Object.getOwnPropertyDescriptor(t,e);i.enumerable=!1,Object.defineProperty(t,e,i)}};Ae(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),Ae(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){var Pe=function(){var t="/"+this.source+"/";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),t};RegExp.prototype.toString=Pe}}),function(t,e){"use strict";"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e():t.returnExports=e()}(this,function(){var t,i,n,r,o=Function.call,s=Object.prototype,a=o.bind(s.hasOwnProperty),l=o.bind(s.propertyIsEnumerable),u=o.bind(s.toString),c=a(s,"__defineGetter__");c&&(t=o.bind(s.__defineGetter__),i=o.bind(s.__defineSetter__),n=o.bind(s.__lookupGetter__),r=o.bind(s.__lookupSetter__)),Object.getPrototypeOf||(Object.getPrototypeOf=function(t){var e=t.__proto__;return e||null===e?e:"[object Function]"===u(t.constructor)?t.constructor.prototype:t instanceof Object?s:null});var d=function(t){try{return t.sentinel=0,0===Object.getOwnPropertyDescriptor(t,"sentinel").value}catch(e){return!1}};if(Object.defineProperty){var p=d({}),h="undefined"==typeof e||d(e.createElement("div"));if(!h||!p)var f=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||f){var v="Object.getOwnPropertyDescriptor called on a non-object: ";Object.getOwnPropertyDescriptor=function(t,e){if("object"!=typeof t&&"function"!=typeof t||null===t)throw new TypeError(v+t);if(f)try{return f.call(Object,t,e)}catch(i){}var o;if(!a(t,e))return o;if(o={enumerable:l(t,e),configurable:!0},c){var u=t.__proto__,d=t!==s;d&&(t.__proto__=s);var p=n(t,e),h=r(t,e);if(d&&(t.__proto__=u),p||h)return p&&(o.get=p),h&&(o.set=h),o}return o.value=t[e],o.writable=!0,o}}if(Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(t){return Object.keys(t)}),!Object.create){var y,g=!({__proto__:null}instanceof Object),m=function(){if(!e.domain)return!1;try{return!!new ActiveXObject("htmlfile")}catch(t){return!1}},b=function(){var t,e;return e=new ActiveXObject("htmlfile"),e.write("<script></script>"),e.close(),t=e.parentWindow.Object.prototype,e=null,t},_=function(){var t,i=e.createElement("iframe"),n=e.body||e.documentElement;return i.style.display="none",n.appendChild(i),i.src="javascript:",t=i.contentWindow.Object.prototype,n.removeChild(i),i=null,t};y=g||"undefined"==typeof e?function(){return{__proto__:null}}:function(){var t=m()?b():_();delete t.constructor,delete t.hasOwnProperty,delete t.propertyIsEnumerable,delete t.isPrototypeOf,delete t.toLocaleString,delete t.toString,delete t.valueOf;var e=function(){};return e.prototype=t,y=function(){return new e},new e},Object.create=function(t,e){var i,n=function(){};if(null===t)i=y();else{if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object prototype may only be an Object or null");n.prototype=t,i=new n,i.__proto__=t}return void 0!==e&&Object.defineProperties(i,e),i}}var T=function(t){try{return Object.defineProperty(t,"sentinel",{}),"sentinel"in t}catch(e){return!1}};if(Object.defineProperty){var w=T({}),k="undefined"==typeof e||T(e.createElement("div"));if(!w||!k)var C=Object.defineProperty,S=Object.defineProperties}if(!Object.defineProperty||C){var E="Property description must be an object: ",x="Object.defineProperty called on non-object: ",j="getters & setters can not be defined on this javascript engine";Object.defineProperty=function(e,o,a){if("object"!=typeof e&&"function"!=typeof e||null===e)throw new TypeError(x+e);if("object"!=typeof a&&"function"!=typeof a||null===a)throw new TypeError(E+a);if(C)try{return C.call(Object,e,o,a)}catch(l){}if("value"in a)if(c&&(n(e,o)||r(e,o))){var u=e.__proto__;e.__proto__=s,delete e[o],e[o]=a.value,e.__proto__=u}else e[o]=a.value;else{if(!c&&("get"in a||"set"in a))throw new TypeError(j);"get"in a&&t(e,o,a.get),"set"in a&&i(e,o,a.set)}return e}}(!Object.defineProperties||S)&&(Object.defineProperties=function(t,e){if(S)try{return S.call(Object,t,e)}catch(i){}return Object.keys(e).forEach(function(i){"__proto__"!==i&&Object.defineProperty(t,i,e[i])}),t}),Object.seal||(Object.seal=function(t){if(Object(t)!==t)throw new TypeError("Object.seal can only be called on Objects.");return t}),Object.freeze||(Object.freeze=function(t){if(Object(t)!==t)throw new TypeError("Object.freeze can only be called on Objects.");return t});try{Object.freeze(function(){})}catch(O){Object.freeze=function(t){return function(e){return"function"==typeof e?e:t(e)}}(Object.freeze)}Object.preventExtensions||(Object.preventExtensions=function(t){if(Object(t)!==t)throw new TypeError("Object.preventExtensions can only be called on Objects.");return t}),Object.isSealed||(Object.isSealed=function(t){if(Object(t)!==t)throw new TypeError("Object.isSealed can only be called on Objects.");return!1}),Object.isFrozen||(Object.isFrozen=function(t){if(Object(t)!==t)throw new TypeError("Object.isFrozen can only be called on Objects.");return!1}),Object.isExtensible||(Object.isExtensible=function(t){if(Object(t)!==t)throw new TypeError("Object.isExtensible can only be called on Objects.");for(var e="";a(t,e);)e+="?";t[e]=!0;var i=a(t,e);return delete t[e],i})})}(window,document),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t:t(jQuery)}(function(t){function e(e){var s=e||window.event,a=l.call(arguments,1),u=0,d=0,p=0,h=0,f=0,v=0;if(e=t.event.fix(s),e.type="mousewheel","detail"in s&&(p=s.detail*-1),"wheelDelta"in s&&(p=s.wheelDelta),"wheelDeltaY"in s&&(p=s.wheelDeltaY),"wheelDeltaX"in s&&(d=s.wheelDeltaX*-1),"axis"in s&&s.axis===s.HORIZONTAL_AXIS&&(d=p*-1,p=0),u=0===p?d:p,"deltaY"in s&&(p=s.deltaY*-1,u=p),"deltaX"in s&&(d=s.deltaX,0===p&&(u=d*-1)),0!==p||0!==d){if(1===s.deltaMode){var y=t.data(this,"mousewheel-line-height");u*=y,p*=y,d*=y}else if(2===s.deltaMode){var g=t.data(this,"mousewheel-page-height");u*=g,p*=g,d*=g}if(h=Math.max(Math.abs(p),Math.abs(d)),(!o||h<o)&&(o=h,n(s,h)&&(o/=40)),n(s,h)&&(u/=40,d/=40,p/=40),u=Math[u>=1?"floor":"ceil"](u/o),d=Math[d>=1?"floor":"ceil"](d/o),p=Math[p>=1?"floor":"ceil"](p/o),c.settings.normalizeOffset&&this.getBoundingClientRect){var m=this.getBoundingClientRect();f=e.clientX-m.left,v=e.clientY-m.top}return e.deltaX=d,e.deltaY=p,e.deltaFactor=o,e.offsetX=f,e.offsetY=v,e.deltaMode=0,a.unshift(e,u,d,p),r&&clearTimeout(r),r=setTimeout(i,200),(t.event.dispatch||t.event.handle).apply(this,a)}}function i(){o=null}function n(t,e){return c.settings.adjustOldDeltas&&"mousewheel"===t.type&&e%120===0}var r,o,s=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],a="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],l=Array.prototype.slice;if(t.event.fixHooks)for(var u=s.length;u;)t.event.fixHooks[s[--u]]=t.event.mouseHooks;var c=t.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var i=a.length;i;)this.addEventListener(a[--i],e,!1);else this.onmousewheel=e;t.data(this,"mousewheel-line-height",c.getLineHeight(this)),t.data(this,"mousewheel-page-height",c.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var i=a.length;i;)this.removeEventListener(a[--i],e,!1);else this.onmousewheel=null;t.removeData(this,"mousewheel-line-height"),t.removeData(this,"mousewheel-page-height")},getLineHeight:function(e){var i=t(e),n=i["offsetParent"in t.fn?"offsetParent":"parent"]();return n.length||(n=t("body")),parseInt(n.css("fontSize"),10)||parseInt(i.css("fontSize"),10)||16},getPageHeight:function(e){return t(e).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};t.fn.extend({mousewheel:function(t){return t?this.bind("mousewheel",t):this.trigger("mousewheel")},unmousewheel:function(t){return this.unbind("mousewheel",t)}})});var _extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.LazyLoad=e()}(this,function(){"use strict";var t={elements_selector:"img",container:document,threshold:300,data_src:"src",data_srcset:"srcset",class_loading:"loading",class_loaded:"loaded",class_error:"error",callback_load:null,callback_error:null,callback_set:null},e=function(t,e){return t.getAttribute("data-"+e)},i=function(t,e,i){return t.setAttribute("data-"+e,i)},n=function(t){return t.filter(function(t){return!e(t,"was-processed")})},r=function(t,e){var i=new t(e),n=new CustomEvent("LazyLoad::Initialized",{detail:{instance:i}});window.dispatchEvent(n)},o=function(t,i){var n=i.data_srcset,r=t.parentElement;if("PICTURE"===r.tagName)for(var o,s=0;o=r.children[s];s+=1)if("SOURCE"===o.tagName){var a=e(o,n);a&&o.setAttribute("srcset",a)}},s=function(t,i){var n=i.data_src,r=i.data_srcset,s=t.tagName,a=e(t,n);if("IMG"===s){o(t,i);var l=e(t,r);return l&&t.setAttribute("srcset",l),void(a&&t.setAttribute("src",a))}"IFRAME"!==s?a&&(t.style.backgroundImage='url("'+a+'")'):a&&t.setAttribute("src",a)},a=!!document.body.classList,l=function(t,e){a?t.classList.add(e):t.className+=(t.className?" ":"")+e},u=function(t,e){a?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\s+)"+e+"(\\s+|$)")," ").replace(/^\s+/,"").replace(/\s+$/,"")},c=function(t,e){t&&t(e)},d=function(t,e,i){t.removeEventListener("load",e),t.removeEventListener("error",i)},p=function(t,e){var i=function r(i){h(i,!0,e),d(t,r,n)},n=function o(n){h(n,!1,e),d(t,i,o)};t.addEventListener("load",i),t.addEventListener("error",n)},h=function(t,e,i){var n=t.target;u(n,i.class_loading),l(n,e?i.class_loaded:i.class_error),c(e?i.callback_load:i.callback_error,n)},f=function(t,e){["IMG","IFRAME"].indexOf(t.tagName)>-1&&(p(t,e),l(t,e.class_loading)),s(t,e),i(t,"was-processed",!0),c(e.callback_set,t)},v=function(e,i){this._settings=_extends({},t,e),this._setObserver(),this.update(i)};v.prototype={_setObserver:function(){var t=this;if("IntersectionObserver"in window){var e=this._settings;this._observer=new IntersectionObserver(function(i){i.forEach(function(i){if(i.intersectionRatio>0){var n=i.target;f(n,e),t._observer.unobserve(n)}}),t._elements=n(t._elements)},{root:e.container===document?null:e.container,rootMargin:e.threshold+"px"})}},update:function(t){var e=this,i=this._settings,r=t||i.container.querySelectorAll(i.elements_selector);this._elements=n(Array.prototype.slice.call(r)),this._observer?this._elements.forEach(function(t){e._observer.observe(t)}):(this._elements.forEach(function(t){f(t,i)}),this._elements=n(this._elements))},destroy:function(){var t=this;this._observer&&(n(this._elements).forEach(function(e){t._observer.unobserve(e)}),this._observer=null),this._elements=null,this._settings=null}};var y=window.lazyLoadOptions;return y&&function(t,e){if(e.length)for(var i,n=0;i=e[n];n+=1)r(t,i);else r(t,e)}(v,y),v}),!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};(e=function(){var e=0;return function(i,n){var r,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=t(i),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,r=t(i).data("slick")||{},o.options=t.extend({},o.defaults,n,r),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=t.proxy(o.autoPlay,o),o.autoPlayClear=t.proxy(o.autoPlayClear,o),o.autoPlayIterator=t.proxy(o.autoPlayIterator,o),o.changeSlide=t.proxy(o.changeSlide,o),o.clickHandler=t.proxy(o.clickHandler,o),o.selectHandler=t.proxy(o.selectHandler,o),o.setPosition=t.proxy(o.setPosition,o),o.swipeHandler=t.proxy(o.swipeHandler,o),o.dragHandler=t.proxy(o.dragHandler,o),
o.keyHandler=t.proxy(o.keyHandler,o),o.instanceUid=e++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,n){var r=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=r.slideCount)return!1;r.unload(),"number"==typeof i?0===i&&0===r.$slides.length?t(e).appendTo(r.$slideTrack):n?t(e).insertBefore(r.$slides.eq(i)):t(e).insertAfter(r.$slides.eq(i)):!0===n?t(e).prependTo(r.$slideTrack):t(e).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),r.$slidesCache=r.$slides,r.reinit()},e.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},e.prototype.animateSlide=function(e,i){var n={},r=this;r.animateHeight(),!0===r.options.rtl&&!1===r.options.vertical&&(e=-e),!1===r.transformsEnabled?!1===r.options.vertical?r.$slideTrack.animate({left:e},r.options.speed,r.options.easing,i):r.$slideTrack.animate({top:e},r.options.speed,r.options.easing,i):!1===r.cssTransitions?(!0===r.options.rtl&&(r.currentLeft=-r.currentLeft),t({animStart:r.currentLeft}).animate({animStart:e},{duration:r.options.speed,easing:r.options.easing,step:function(t){t=Math.ceil(t),!1===r.options.vertical?(n[r.animType]="translate("+t+"px, 0px)",r.$slideTrack.css(n)):(n[r.animType]="translate(0px,"+t+"px)",r.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(r.applyTransition(),e=Math.ceil(e),!1===r.options.vertical?n[r.animType]="translate3d("+e+"px, 0px, 0px)":n[r.animType]="translate3d(0px,"+e+"px, 0px)",r.$slideTrack.css(n),i&&setTimeout(function(){r.disableTransition(),i.call()},r.options.speed))},e.prototype.getNavTarget=function(){var e=this,i=e.options.asNavFor;return i&&null!==i&&(i=t(i).not(e.$slider)),i},e.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},e.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){var t=this;t.autoPlayTimer&&clearInterval(t.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},e.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=t(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=t(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i,n=this;if(!0===n.options.dots){for(n.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)i.append(t("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?t('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),t("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,n,r,o,s,a=this;if(n=document.createDocumentFragment(),o=a.$slider.children(),a.options.rows>1){for(s=a.options.slidesPerRow*a.options.rows,r=Math.ceil(o.length/s),t=0;t<r;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var u=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=t*s+(e*a.options.slidesPerRow+i);o.get(c)&&u.appendChild(o.get(c))}l.appendChild(u)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var n,r,o,s=this,a=!1,l=s.$slider.width(),u=window.innerWidth||t(window).width();if("window"===s.respondTo?o=u:"slider"===s.respondTo?o=l:"min"===s.respondTo&&(o=Math.min(u,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){r=null;for(n in s.breakpoints)s.breakpoints.hasOwnProperty(n)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[n]&&(r=s.breakpoints[n]):o>s.breakpoints[n]&&(r=s.breakpoints[n]));null!==r?null!==s.activeBreakpoint?(r!==s.activeBreakpoint||i)&&(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=t.extend({},s.originalSettings,s.breakpointSettings[r]),!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e)),a=r):(s.activeBreakpoint=r,"unslick"===s.breakpointSettings[r]?s.unslick(r):(s.options=t.extend({},s.originalSettings,s.breakpointSettings[r]),!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e)),a=r):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===e&&(s.currentSlide=s.options.initialSlide),s.refresh(e),a=r),e||!1===a||s.$slider.trigger("breakpoint",[s,a])}},e.prototype.changeSlide=function(e,i){var n,r,o,s=this,a=t(e.currentTarget);switch(a.is("a")&&e.preventDefault(),a.is("li")||(a=a.closest("li")),o=s.slideCount%s.options.slidesToScroll!=0,n=o?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,e.data.message){case"previous":r=0===n?s.options.slidesToScroll:s.options.slidesToShow-n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-r,!1,i);break;case"next":r=0===n?s.options.slidesToScroll:n,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+r,!1,i);break;case"index":var l=0===e.data.index?0:e.data.index||a.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(l),!1,i),a.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i;if(e=this.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},e.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(t("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",t.proxy(e.interrupt,e,!0)).off("mouseleave.slick",t.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),t(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().off("click.slick",e.selectHandler),t(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),t(window).off("resize.slick.slick-"+e.instanceUid,e.resize),t("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),t(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},e.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.cleanUpRows=function(){var t,e=this;e.options.rows>1&&((t=e.$slides.children().children()).removeAttr("style"),e.$slider.empty().append(t))},e.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),t(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){t(this).attr("style",t(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,e||i.$slider.trigger("destroy",[i])},e.prototype.disableTransition=function(t){var e=this,i={};i[e.transitionType]="",!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var n=t(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=n.is(":focus"),e.autoPlay())},0)})},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide},e.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},e.prototype.getLeft=function(t){var e,i,n,r,o=this,s=0;return o.slideOffset=0,i=o.$slides.first().outerHeight(!0),!0===o.options.infinite?(o.slideCount>o.options.slidesToShow&&(o.slideOffset=o.slideWidth*o.options.slidesToShow*-1,r=-1,!0===o.options.vertical&&!0===o.options.centerMode&&(2===o.options.slidesToShow?r=-1.5:1===o.options.slidesToShow&&(r=-2)),s=i*o.options.slidesToShow*r),o.slideCount%o.options.slidesToScroll!=0&&t+o.options.slidesToScroll>o.slideCount&&o.slideCount>o.options.slidesToShow&&(t>o.slideCount?(o.slideOffset=(o.options.slidesToShow-(t-o.slideCount))*o.slideWidth*-1,s=(o.options.slidesToShow-(t-o.slideCount))*i*-1):(o.slideOffset=o.slideCount%o.options.slidesToScroll*o.slideWidth*-1,s=o.slideCount%o.options.slidesToScroll*i*-1))):t+o.options.slidesToShow>o.slideCount&&(o.slideOffset=(t+o.options.slidesToShow-o.slideCount)*o.slideWidth,s=(t+o.options.slidesToShow-o.slideCount)*i),o.slideCount<=o.options.slidesToShow&&(o.slideOffset=0,s=0),!0===o.options.centerMode&&o.slideCount<=o.options.slidesToShow?o.slideOffset=o.slideWidth*Math.floor(o.options.slidesToShow)/2-o.slideWidth*o.slideCount/2:!0===o.options.centerMode&&!0===o.options.infinite?o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)-o.slideWidth:!0===o.options.centerMode&&(o.slideOffset=0,o.slideOffset+=o.slideWidth*Math.floor(o.options.slidesToShow/2)),e=!1===o.options.vertical?t*o.slideWidth*-1+o.slideOffset:t*i*-1+s,!0===o.options.variableWidth&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(t):o.$slideTrack.children(".slick-slide").eq(t+o.options.slidesToShow),e=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===o.options.centerMode&&(n=o.slideCount<=o.options.slidesToShow||!1===o.options.infinite?o.$slideTrack.children(".slick-slide").eq(t):o.$slideTrack.children(".slick-slide").eq(t+o.options.slidesToShow+1),e=!0===o.options.rtl?n[0]?-1*(o.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,e+=(o.$list.width()-n.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){return this.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,r=[];for(!1===e.options.infinite?t=e.slideCount:(i=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,t=2*e.slideCount);i<t;)r.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return r},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(r,o){if(o.offsetLeft-i+t(o).outerWidth()/2>-1*n.swipeLeft)return e=o,!1}),Math.abs(t(e).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){var i=this;t(i.$slider).hasClass("slick-initialized")||(t(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),e&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),n=e.getNavigableIndexes().filter(function(t){return t>=0&&t<e.slideCount});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(i){var r=n.indexOf(i);t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==r&&t(this).attr({"aria-describedby":"slick-slide-control"+e.instanceUid+r})}),e.$dots.attr("role","tablist").find("li").each(function(r){var o=n[r];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+r,"aria-controls":"slick-slide"+e.instanceUid+o,"aria-label":r+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=e.currentSlide,o=r+e.options.slidesToShow;r<o;r++)e.$slides.eq(r).attr("tabindex",0);e.activateADA()},e.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},e.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&(t("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&t("li",e.$dots).on("mouseenter.slick",t.proxy(e.interrupt,e,!0)).on("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",t.proxy(e.interrupt,e,!1)))},e.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),t(document).on(e.visibilityChange,t.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),t(window).on("orientationchange.slick.slick-"+e.instanceUid,t.proxy(e.orientationChange,e)),t(window).on("resize.slick.slick-"+e.instanceUid,t.proxy(e.resize,e)),t("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),t(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),t(e.setPosition)},e.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},e.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),n=t(this).attr("data-srcset"),r=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),r&&e.attr("sizes",r)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,i])})},s.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},s.src=i})}var i,n,r,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?r=(n=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(n=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),r=o.options.slidesToShow/2+1+2+o.currentSlide):(n=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,r=Math.ceil(n+o.options.slidesToShow),!0===o.options.fade&&(n>0&&n--,r<=o.slideCount&&r++)),i=o.$slider.find(".slick-slide").slice(n,r),"anticipated"===o.options.lazyLoad)for(var s=n-1,a=r,l=o.$slider.find(".slick-slide"),u=0;u<o.options.slidesToScroll;u++)s<0&&(s=o.slideCount-1),i=(i=i.add(l.eq(s))).add(l.eq(a)),s--,a++;e(i),o.slideCount<=o.options.slidesToShow?e(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?e(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&e(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},e.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){var t=this;t.checkResponsive(),t.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){var t=this;t.autoPlayClear(),t.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},e.prototype.postSlide=function(e){var i=this;i.unslicked||(i.$slider.trigger("afterChange",[i,e]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange&&t(i.$slides.get(i.currentSlide)).attr("tabindex",0).focus()))},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,n,r,o,s,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),r=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){r&&(i.attr("srcset",r),o&&i.attr("sizes",o)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},s.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},s.src=n):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,n,r=this;n=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>n&&(r.currentSlide=n),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),i=r.currentSlide,r.destroy(!0),t.extend(r,r.initials,{currentSlide:i}),r.init(),e||r.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,n,r=this,o=r.options.responsive||null;if("array"===t.type(o)&&o.length){r.respondTo=r.options.respondTo||"window";for(e in o)if(n=r.breakpoints.length-1,o.hasOwnProperty(e)){for(i=o[e].breakpoint;n>=0;)r.breakpoints[n]&&r.breakpoints[n]===i&&r.breakpoints.splice(n,1),n--;r.breakpoints.push(i),r.breakpointSettings[i]=o[e].settings}r.breakpoints.sort(function(t,e){return r.options.mobileFirst?t-e:e-t})}},e.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){var n=this;return t="boolean"==typeof t?!0===(e=t)?0:n.slideCount-1:!0===e?--t:t,!(n.slideCount<1||t<0||t>n.slideCount-1)&&(n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit(),void 0)},e.prototype.setCSS=function(t){var e,i,n=this,r={};!0===n.options.rtl&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",r[n.positionProp]=t,!1===n.transformsEnabled?n.$slideTrack.css(r):(r={},!1===n.cssTransitions?(r[n.animType]="translate("+e+", "+i+")",n.$slideTrack.css(r)):(r[n.animType]="translate3d("+e+", "+i+", 0px)",n.$slideTrack.css(r)))},e.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(n,r){e=i.slideWidth*n*-1,!0===i.options.rtl?t(r).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(r).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,n,r,o,s=this,a=!1;if("object"===t.type(arguments[0])?(n=arguments[0],a=arguments[1],o="multiple"):"string"===t.type(arguments[0])&&(n=arguments[0],r=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[n]=r;else if("multiple"===o)t.each(n,function(t,e){s.options[t]=e});else if("responsive"===o)for(i in r)if("array"!==t.type(s.options.responsive))s.options.responsive=[r[i]];else{for(e=s.options.responsive.length-1;e>=0;)s.options.responsive[e].breakpoint===r[i].breakpoint&&s.options.responsive.splice(e,1),e--;s.options.responsive.push(r[i])}a&&(s.unload(),s.reinit())},e.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},e.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},e.prototype.setSlideClasses=function(t){var e,i,n,r,o=this;if(i=o.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),o.$slides.eq(t).addClass("slick-current"),!0===o.options.centerMode){var s=o.options.slidesToShow%2==0?1:0;e=Math.floor(o.options.slidesToShow/2),!0===o.options.infinite&&(t>=e&&t<=o.slideCount-1-e?o.$slides.slice(t-e+s,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=o.options.slidesToShow+t,i.slice(n-e+1+s,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-o.options.slidesToShow).addClass("slick-center"):t===o.slideCount-1&&i.eq(o.options.slidesToShow).addClass("slick-center")),o.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=o.slideCount-o.options.slidesToShow?o.$slides.slice(t,t+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=o.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(r=o.slideCount%o.options.slidesToShow,n=!0===o.options.infinite?o.options.slidesToShow+t:t,o.options.slidesToShow==o.options.slidesToScroll&&o.slideCount-t<o.options.slidesToShow?i.slice(n-(o.options.slidesToShow-r),n+r).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+o.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==o.options.lazyLoad&&"anticipated"!==o.options.lazyLoad||o.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,n,r=this;if(!0===r.options.fade&&(r.options.centerMode=!1),!0===r.options.infinite&&!1===r.options.fade&&(i=null,r.slideCount>r.options.slidesToShow)){for(n=!0===r.options.centerMode?r.options.slidesToShow+1:r.options.slidesToShow,e=r.slideCount;e>r.slideCount-n;e-=1)i=e-1,t(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");
for(e=0;e<n+r.slideCount;e+=1)i=e,t(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.interrupt=function(t){var e=this;t||e.autoPlay(),e.interrupted=t},e.prototype.selectHandler=function(e){var i=this,n=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),r=parseInt(n.attr("data-slick-index"));r||(r=0),i.slideCount<=i.options.slidesToShow?i.slideHandler(r,!1,!0):i.slideHandler(r)},e.prototype.slideHandler=function(t,e,i){var n,r,o,s,a,l=null,u=this;if(e=e||!1,!(!0===u.animating&&!0===u.options.waitForAnimate||!0===u.options.fade&&u.currentSlide===t))if(!1===e&&u.asNavFor(t),n=t,l=u.getLeft(n),s=u.getLeft(u.currentSlide),u.currentLeft=null===u.swipeLeft?s:u.swipeLeft,!1===u.options.infinite&&!1===u.options.centerMode&&(t<0||t>u.getDotCount()*u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else if(!1===u.options.infinite&&!0===u.options.centerMode&&(t<0||t>u.slideCount-u.options.slidesToScroll))!1===u.options.fade&&(n=u.currentSlide,!0!==i?u.animateSlide(s,function(){u.postSlide(n)}):u.postSlide(n));else{if(u.options.autoplay&&clearInterval(u.autoPlayTimer),r=n<0?u.slideCount%u.options.slidesToScroll!=0?u.slideCount-u.slideCount%u.options.slidesToScroll:u.slideCount+n:n>=u.slideCount?u.slideCount%u.options.slidesToScroll!=0?0:n-u.slideCount:n,u.animating=!0,u.$slider.trigger("beforeChange",[u,u.currentSlide,r]),o=u.currentSlide,u.currentSlide=r,u.setSlideClasses(u.currentSlide),u.options.asNavFor&&(a=(a=u.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(u.currentSlide),u.updateDots(),u.updateArrows(),!0===u.options.fade)return!0!==i?(u.fadeSlideOut(o),u.fadeSlide(r,function(){u.postSlide(r)})):u.postSlide(r),void u.animateHeight();!0!==i?u.animateSlide(l,function(){u.postSlide(r)}):u.postSlide(r)}},e.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,n,r=this;return t=r.touchObject.startX-r.touchObject.curX,e=r.touchObject.startY-r.touchObject.curY,i=Math.atan2(e,t),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0?!1===r.options.rtl?"left":"right":n<=360&&n>=315?!1===r.options.rtl?"left":"right":n>=135&&n<=225?!1===r.options.rtl?"right":"left":!0===r.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},e.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,n,r,o,s,a=this;return o=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||o&&1!==o.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,a.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),i=a.swipeDirection(),void 0!==t.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,t.preventDefault()),r=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(r=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+n*r:a.swipeLeft=e+n*(a.$list.height()/a.listWidth)*r,!0===a.options.verticalSwiping&&(a.swipeLeft=e+n*r),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},e.prototype.swipeStart=function(t){var e,i=this;return i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow?(i.touchObject={},!1):(void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0,void 0)},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},e.prototype.unload=function(){var e=this;t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){var e=this;e.$slider.trigger("unslick",[e,t]),e.destroy()},e.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode?(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){var t=this;t.options.autoplay&&(document[t.hidden]?t.interrupted=!0:t.interrupted=!1)},t.fn.slick=function(){var t,i,n=this,r=arguments[0],o=Array.prototype.slice.call(arguments,1),s=n.length;for(t=0;t<s;t++)if("object"==typeof r||void 0===r?n[t].slick=new e(n[t],r):i=n[t].slick[r].apply(n[t].slick,o),void 0!==i)return i;return n}}),function(){function t(t){var e=[],i=0;if(this.trie=this.createTrie(t.patterns),this.leftMin=t.leftmin,this.rightMin=t.rightmin,this.exceptions={},t.exceptions)for(e=t.exceptions.split(/,\s?/g);i<e.length;i+=1)this.exceptions[e[i].replace(/\u2027/g,"").toLowerCase()]=new RegExp("("+e[i].split("‧").join(")(")+")","i")}var e={exports:null};t.TrieNode,t.prototype.createTrie=function(t){var e,i=0,n=0,r=0,o=0,s=null,a=null,l=null,u=null,c={_points:[]};for(i in t)if(t.hasOwnProperty(i))for(e=t[i].match(new RegExp(".{1,"+ +i+"}","g")),n=0;n<e.length;n+=1){for(s=e[n].replace(/[0-9]/g,"").split(""),a=e[n].split(/\D/),u=c,r=0;r<s.length;r+=1)l=s[r].charCodeAt(0),u[l]||(u[l]={}),u=u[l];for(u._points=[],o=0;o<a.length;o+=1)u._points[o]=a[o]||0}return c},t.prototype.hyphenateText=function(t,e){e=e||4;for(var i=t.split(/([a-zA-Z0-9_\u0027\u00DF-\u00EA\u00EC-\u00EF\u00F1-\u00F6\u00F8-\u00FD\u0101\u0103\u0105\u0107\u0109\u010D\u010F\u0111\u0113\u0117\u0119\u011B\u011D\u011F\u0123\u0125\u012B\u012F\u0131\u0135\u0137\u013C\u013E\u0142\u0144\u0146\u0148\u0151\u0153\u0155\u0159\u015B\u015D\u015F\u0161\u0165\u016B\u016D\u016F\u0171\u0173\u017A\u017C\u017E\u017F\u0219\u021B\u02BC\u0390\u03AC-\u03CE\u03F2\u0401\u0410-\u044F\u0451\u0454\u0456\u0457\u045E\u0491\u0531-\u0556\u0561-\u0587\u0902\u0903\u0905-\u090B\u090E-\u0910\u0912\u0914-\u0928\u092A-\u0939\u093E-\u0943\u0946-\u0948\u094A-\u094D\u0982\u0983\u0985-\u098B\u098F\u0990\u0994-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BE-\u09C3\u09C7\u09C8\u09CB-\u09CD\u09D7\u0A02\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A14-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A82\u0A83\u0A85-\u0A8B\u0A8F\u0A90\u0A94-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABE-\u0AC3\u0AC7\u0AC8\u0ACB-\u0ACD\u0B02\u0B03\u0B05-\u0B0B\u0B0F\u0B10\u0B14-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3E-\u0B43\u0B47\u0B48\u0B4B-\u0B4D\u0B57\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB5\u0BB7-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C02\u0C03\u0C05-\u0C0B\u0C0E-\u0C10\u0C12\u0C14-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3E-\u0C43\u0C46-\u0C48\u0C4A-\u0C4D\u0C82\u0C83\u0C85-\u0C8B\u0C8E-\u0C90\u0C92\u0C94-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBE-\u0CC3\u0CC6-\u0CC8\u0CCA-\u0CCD\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D3E-\u0D43\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D60\u0D61\u0D7A-\u0D7F\u1F00-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB2-\u1FB4\u1FB6\u1FB7\u1FBD\u1FBF\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD2\u1FD3\u1FD6\u1FD7\u1FE2-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u200D\u2019]+)/g),n=0;n<i.length;n+=1)i[n].indexOf("/")!==-1?0===n||n===i.length-1||/\s+\/|\/\s+/.test(i[n])||(i[n]+="​"):i[n].length>e&&(i[n]=this.hyphenate(i[n]).join("­"));return i.join("")},t.prototype.hyphenate=function(t){var e,i,n,r,o,s,a,l,u,c=[],d=[],p=t.toLowerCase(),h=Math.max,f=this.trie,v=[""];if(this.exceptions.hasOwnProperty(p))return t.match(this.exceptions[p]).slice(1);if(t.indexOf("­")!==-1)return[t];for(t="_"+t+"_",e=t.toLowerCase().split(""),i=t.split(""),a=e.length,n=0;n<a;n+=1)d[n]=0,c[n]=e[n].charCodeAt(0);for(n=0;n<a;n+=1)for(s=f,r=n;r<a&&(s=s[c[r]],s);r+=1)if(l=s._points)for(o=0,u=l.length;o<u;o+=1)d[n+o]=h(d[n+o],l[o]);for(n=1;n<a-1;n+=1)n>this.leftMin&&n<a-this.rightMin&&d[n]%2?v.push(i[n]):v[v.length-1]+=i[n];return v},e.exports=t,window.Hypher=e.exports,window.Hypher.languages={}}(),function(t){t.fn.hyphenate=function(t){if(window.Hypher.languages[t])return this.each(function(){for(var e=0,i=this.childNodes.length;e<i;e+=1)3===this.childNodes[e].nodeType&&(this.childNodes[e].nodeValue=window.Hypher.languages[t].hyphenateText(this.childNodes[e].nodeValue))})}}(jQuery),!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.videojsContribHls=t()}}(function(){return function t(e,i,n){function r(s,a){if(!i[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=i[s]={exports:{}};e[s][0].call(c.exports,function(t){var i=e[s][1][t];return r(i?i:t)},c,c.exports,t,e,i,n)}return i[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),o=function(){var t=[[[],[],[],[],[]],[[],[],[],[],[]]],e=t[0],i=t[1],n=e[4],r=i[4],o=void 0,s=void 0,a=void 0,l=[],u=[],c=void 0,d=void 0,p=void 0,h=void 0,f=void 0,v=void 0;for(o=0;256>o;o++)u[(l[o]=o<<1^283*(o>>7))^o]=o;for(s=a=0;!n[s];s^=c||1,a=u[a]||1)for(h=a^a<<1^a<<2^a<<3^a<<4,h=h>>8^255&h^99,n[s]=h,r[h]=s,p=l[d=l[c=l[s]]],v=16843009*p^65537*d^257*c^16843008*s,f=257*l[h]^16843008*h,o=0;4>o;o++)e[o][s]=f=f<<24^f>>>8,i[o][h]=v=v<<24^v>>>8;for(o=0;5>o;o++)e[o]=e[o].slice(0),i[o]=i[o].slice(0);return t},s=null,a=function(){function t(e){n(this,t),s||(s=o()),this._tables=[[s[0][0].slice(),s[0][1].slice(),s[0][2].slice(),s[0][3].slice(),s[0][4].slice()],[s[1][0].slice(),s[1][1].slice(),s[1][2].slice(),s[1][3].slice(),s[1][4].slice()]];var i=void 0,r=void 0,a=void 0,l=void 0,u=void 0,c=this._tables[0][4],d=this._tables[1],p=e.length,h=1;if(4!==p&&6!==p&&8!==p)throw new Error("Invalid aes key size");for(l=e.slice(0),u=[],this._key=[l,u],i=p;4*p+28>i;i++)a=l[i-1],(i%p===0||8===p&&i%p===4)&&(a=c[a>>>24]<<24^c[a>>16&255]<<16^c[a>>8&255]<<8^c[255&a],i%p===0&&(a=a<<8^a>>>24^h<<24,h=h<<1^283*(h>>7))),l[i]=l[i-p]^a;for(r=0;i;r++,i--)a=l[3&r?i:i-4],4>=i||4>r?u[r]=a:u[r]=d[0][c[a>>>24]]^d[1][c[a>>16&255]]^d[2][c[a>>8&255]]^d[3][c[255&a]]}return r(t,[{key:"decrypt",value:function(t,e,i,n,r,o){var s=this._key[1],a=t^s[0],l=n^s[1],u=i^s[2],c=e^s[3],d=void 0,p=void 0,h=void 0,f=s.length/4-2,v=void 0,y=4,g=this._tables[1],m=g[0],b=g[1],_=g[2],T=g[3],w=g[4];for(v=0;f>v;v++)d=m[a>>>24]^b[l>>16&255]^_[u>>8&255]^T[255&c]^s[y],p=m[l>>>24]^b[u>>16&255]^_[c>>8&255]^T[255&a]^s[y+1],h=m[u>>>24]^b[c>>16&255]^_[a>>8&255]^T[255&l]^s[y+2],c=m[c>>>24]^b[a>>16&255]^_[l>>8&255]^T[255&u]^s[y+3],y+=4,a=d,l=p,u=h;for(v=0;4>v;v++)r[(3&-v)+o]=w[a>>>24]<<24^w[l>>16&255]<<16^w[u>>8&255]<<8^w[255&c]^s[y++],d=a,a=l,l=u,u=c,c=d}}]),t}();i["default"]=a,e.exports=i["default"]},{}],2:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),a=function(t,e,i){for(var n=!0;n;){var r=t,o=e,s=i;n=!1,null===r&&(r=Function.prototype);var a=Object.getOwnPropertyDescriptor(r,o);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=o,i=s,n=!0,a=u=void 0}},l=t("../stream"),u=n(l),c=function(t){function e(){r(this,e),a(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,u["default"]),this.jobs=[],this.delay=1,this.timeout_=null}return o(e,t),s(e,[{key:"processJob_",value:function(){this.jobs.shift()(),this.jobs.length?this.timeout_=setTimeout(this.processJob_.bind(this),this.delay):this.timeout_=null}},{key:"push",value:function(t){this.jobs.push(t),this.timeout_||(this.timeout_=setTimeout(this.processJob_.bind(this),this.delay))}}]),e}(u["default"]);i["default"]=c,e.exports=i["default"]},{"../stream":12}],3:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),s=t("./aes"),a=n(s),l=t("./async-stream"),u=n(l),c=t("pkcs7"),d=function(t){return t<<24|(65280&t)<<8|(16711680&t)>>8|t>>>24},p=function(t,e,i){var n=new Int32Array(t.buffer,t.byteOffset,t.byteLength>>2),r=new a["default"](Array.prototype.slice.call(e)),o=new Uint8Array(t.byteLength),s=new Int32Array(o.buffer),l=void 0,u=void 0,c=void 0,p=void 0,h=void 0,f=void 0,v=void 0,y=void 0,g=void 0;for(l=i[0],u=i[1],c=i[2],p=i[3],g=0;g<n.length;g+=4)h=d(n[g]),f=d(n[g+1]),v=d(n[g+2]),y=d(n[g+3]),r.decrypt(h,f,v,y,s,g),s[g]=d(s[g]^l),s[g+1]=d(s[g+1]^u),s[g+2]=d(s[g+2]^c),s[g+3]=d(s[g+3]^p),l=h,u=f,c=v,p=y;return o};i.decrypt=p;var h=function(){function t(e,i,n,o){r(this,t);var s=t.STEP,a=new Int32Array(e.buffer),l=new Uint8Array(e.byteLength),p=0;for(this.asyncStream_=new u["default"],this.asyncStream_.push(this.decryptChunk_(a.subarray(p,p+s),i,n,l)),p=s;p<a.length;p+=s)n=new Uint32Array([d(a[p-4]),d(a[p-3]),d(a[p-2]),d(a[p-1])]),this.asyncStream_.push(this.decryptChunk_(a.subarray(p,p+s),i,n,l));this.asyncStream_.push(function(){o(null,(0,c.unpad)(l))})}return o(t,[{key:"decryptChunk_",value:function(t,e,i,n){return function(){var r=p(t,e,i);n.set(r,t.byteOffset)}}}]),t}();i.Decrypter=h,h.STEP=32e3,i["default"]={Decrypter:h,decrypt:p}},{"./aes":1,"./async-stream":2,pkcs7:17}],4:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var r=t("./decrypter"),o=t("./async-stream"),s=n(o);i["default"]={decrypt:r.decrypt,Decrypter:r.Decrypter,AsyncStream:s["default"]},e.exports=i["default"]},{"./async-stream":2,"./decrypter":3}],5:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var r=t("./line-stream"),o=n(r),s=t("./parse-stream"),a=n(s),l=t("./parser"),u=n(l);i["default"]={LineStream:o["default"],ParseStream:a["default"],Parser:u["default"]},e.exports=i["default"]},{"./line-stream":6,"./parse-stream":7,"./parser":8}],6:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),a=function(t,e,i){for(var n=!0;n;){var r=t,o=e,s=i;n=!1,null===r&&(r=Function.prototype);var a=Object.getOwnPropertyDescriptor(r,o);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=o,i=s,n=!0,a=u=void 0}},l=t("../stream"),u=n(l),c=function(t){function e(){r(this,e),a(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.buffer=""}return o(e,t),s(e,[{key:"push",value:function(t){var e=void 0;for(this.buffer+=t,e=this.buffer.indexOf("\n");e>-1;e=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,e)),this.buffer=this.buffer.substring(e+1)}}]),e}(u["default"]);i["default"]=c,e.exports=i["default"]},{"../stream":12}],7:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var s=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),a=function(t,e,i){for(var n=!0;n;){var r=t,o=e,s=i;n=!1,null===r&&(r=Function.prototype);var a=Object.getOwnPropertyDescriptor(r,o);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=o,i=s,n=!0,a=u=void 0}},l=t("../stream"),u=n(l),c=function(){var t="[^=]*",e='"[^"]*"|[^,]*',i="(?:"+t+")=(?:"+e+")";return new RegExp("(?:^|,)("+i+")")},d=function(t){for(var e=t.split(c()),i=e.length,n={},r=void 0;i--;)""!==e[i]&&(r=/([^=]*)=(.*)/.exec(e[i]).slice(1),r[0]=r[0].replace(/^\s+|\s+$/g,""),r[1]=r[1].replace(/^\s+|\s+$/g,""),r[1]=r[1].replace(/^['"](.*)['"]$/g,"$1"),n[r[0]]=r[1]);return n},p=function(t){function e(){r(this,e),a(Object.getPrototypeOf(e.prototype),"constructor",this).call(this)}return o(e,t),s(e,[{key:"push",value:function(t){var e=void 0,i=void 0;if(t=t.replace(/^[\u0000\s]+|[\u0000\s]+$/g,""),0!==t.length){if("#"!==t[0])return void this.trigger("data",{type:"uri",uri:t});if(0!==t.indexOf("#EXT"))return void this.trigger("data",{type:"comment",text:t.slice(1)});if(t=t.replace("\r",""),e=/^#EXTM3U/.exec(t))return void this.trigger("data",{type:"tag",tagType:"m3u"});if(e=/^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(t))return i={type:"tag",tagType:"inf"},e[1]&&(i.duration=parseFloat(e[1])),e[2]&&(i.title=e[2]),void this.trigger("data",i);if(e=/^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(t))return i={type:"tag",tagType:"targetduration"},e[1]&&(i.duration=parseInt(e[1],10)),void this.trigger("data",i);if(e=/^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(t))return i={type:"tag",tagType:"totalduration"},e[1]&&(i.duration=parseInt(e[1],10)),void this.trigger("data",i);if(e=/^#EXT-X-VERSION:?([0-9.]*)?/.exec(t))return i={type:"tag",tagType:"version"},e[1]&&(i.version=parseInt(e[1],10)),void this.trigger("data",i);if(e=/^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(t))return i={type:"tag",tagType:"media-sequence"},e[1]&&(i.number=parseInt(e[1],10)),void this.trigger("data",i);if(e=/^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(t))return i={type:"tag",tagType:"discontinuity-sequence"},e[1]&&(i.number=parseInt(e[1],10)),void this.trigger("data",i);if(e=/^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(t))return i={type:"tag",tagType:"playlist-type"},e[1]&&(i.playlistType=e[1]),void this.trigger("data",i);if(e=/^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(t))return i={type:"tag",tagType:"byterange"},e[1]&&(i.length=parseInt(e[1],10)),e[2]&&(i.offset=parseInt(e[2],10)),void this.trigger("data",i);if(e=/^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(t))return i={type:"tag",tagType:"allow-cache"},e[1]&&(i.allowed=!/NO/.test(e[1])),void this.trigger("data",i);if(e=/^#EXT-X-STREAM-INF:?(.*)$/.exec(t)){if(i={type:"tag",tagType:"stream-inf"},e[1]){if(i.attributes=d(e[1]),i.attributes.RESOLUTION){var n=i.attributes.RESOLUTION.split("x"),r={};n[0]&&(r.width=parseInt(n[0],10)),n[1]&&(r.height=parseInt(n[1],10)),i.attributes.RESOLUTION=r}i.attributes.BANDWIDTH&&(i.attributes.BANDWIDTH=parseInt(i.attributes.BANDWIDTH,10)),i.attributes["PROGRAM-ID"]&&(i.attributes["PROGRAM-ID"]=parseInt(i.attributes["PROGRAM-ID"],10))}return void this.trigger("data",i)}return(e=/^#EXT-X-ENDLIST/.exec(t))?void this.trigger("data",{type:"tag",tagType:"endlist"}):(e=/^#EXT-X-DISCONTINUITY/.exec(t))?void this.trigger("data",{type:"tag",tagType:"discontinuity"}):(e=/^#EXT-X-KEY:?(.*)$/.exec(t))?(i={type:"tag",tagType:"key"},e[1]&&(i.attributes=d(e[1]),i.attributes.IV&&("0x"===i.attributes.IV.substring(0,2)&&(i.attributes.IV=i.attributes.IV.substring(2)),i.attributes.IV=i.attributes.IV.match(/.{8}/g),i.attributes.IV[0]=parseInt(i.attributes.IV[0],16),i.attributes.IV[1]=parseInt(i.attributes.IV[1],16),i.attributes.IV[2]=parseInt(i.attributes.IV[2],16),i.attributes.IV[3]=parseInt(i.attributes.IV[3],16),i.attributes.IV=new Uint32Array(i.attributes.IV))),void this.trigger("data",i)):void this.trigger("data",{type:"tag",data:t.slice(4,t.length)})}}}]),e}(u["default"]);i["default"]=p,e.exports=i["default"]},{"../stream":12}],8:[function(t,e,i){(function(n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),l=function(t,e,i){for(var n=!0;n;){var r=t,o=e,s=i;n=!1,null===r&&(r=Function.prototype);var a=Object.getOwnPropertyDescriptor(r,o);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=o,i=s,n=!0,a=u=void 0}},u=t("../stream"),c=r(u),d=t("./line-stream"),p=r(d),h=t("./parse-stream"),f=r(h),v="undefined"!=typeof window?window.videojs:"undefined"!=typeof n?n.videojs:null,y=function(t){function e(){o(this,e),l(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.lineStream=new p["default"],this.parseStream=new f["default"],this.lineStream.pipe(this.parseStream);var t=this,i=[],n={},r=void 0,s=function(){};this.manifest={allowCache:!0,discontinuityStarts:[]},this.parseStream.on("data",function(e){({tag:function(){(({"allow-cache":function(){this.manifest.allowCache=e.allowed,"allowed"in e||(this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0)},byterange:function o(){var o={};"length"in e&&(n.byterange=o,o.length=e.length,"offset"in e||(this.trigger("info",{message:"defaulting offset to zero"}),e.offset=0)),"offset"in e&&(n.byterange=o,o.offset=e.offset)},endlist:function(){this.manifest.endList=!0},inf:function(){"mediaSequence"in this.manifest||(this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"})),"discontinuitySequence"in this.manifest||(this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"})),e.duration>=0&&(n.duration=e.duration),this.manifest.segments=i},key:function(){return e.attributes?"NONE"===e.attributes.METHOD?void(r=null):e.attributes.URI?(e.attributes.METHOD||this.trigger("warn",{message:"defaulting key method to AES-128"}),r={method:e.attributes.METHOD||"AES-128",uri:e.attributes.URI},void("undefined"!=typeof e.attributes.IV&&(r.iv=e.attributes.IV))):void this.trigger("warn",{message:"ignoring key declaration without URI"}):void this.trigger("warn",{message:"ignoring key declaration without attribute list"})},"media-sequence":function(){return isFinite(e.number)?void(this.manifest.mediaSequence=e.number):void this.trigger("warn",{message:"ignoring invalid media sequence: "+e.number})},"discontinuity-sequence":function(){return isFinite(e.number)?void(this.manifest.discontinuitySequence=e.number):void this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+e.number})},"playlist-type":function(){return/VOD|EVENT/.test(e.playlistType)?void(this.manifest.playlistType=e.playlistType):void this.trigger("warn",{message:"ignoring unknown playlist type: "+e.playlist})},"stream-inf":function(){return this.manifest.playlists=i,e.attributes?(n.attributes||(n.attributes={}),void(n.attributes=(0,v.mergeOptions)(n.attributes,e.attributes))):void this.trigger("warn",{message:"ignoring empty stream-inf attributes"})},discontinuity:function(){n.discontinuity=!0,this.manifest.discontinuityStarts.push(i.length)},targetduration:function(){return!isFinite(e.duration)||e.duration<0?void this.trigger("warn",{message:"ignoring invalid target duration: "+e.duration}):void(this.manifest.targetDuration=e.duration)},totalduration:function(){return!isFinite(e.duration)||e.duration<0?void this.trigger("warn",{message:"ignoring invalid total duration: "+e.duration}):void(this.manifest.totalDuration=e.duration)}})[e.tagType]||s).call(t)},uri:function(){n.uri=e.uri,i.push(n),!this.manifest.targetDuration||"duration"in n||(this.trigger("warn",{message:"defaulting segment duration to the target duration"}),n.duration=this.manifest.targetDuration),r&&(n.key=r),n={}},comment:function(){}})[e.type].call(t)})}return s(e,t),a(e,[{key:"push",value:function(t){this.lineStream.push(t)}},{key:"end",value:function(){this.lineStream.push("\n")}}]),e}(c["default"]);i["default"]=y,e.exports=i["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../stream":12,"./line-stream":6,"./parse-stream":7}],9:[function(t,e,i){(function(n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(i,"__esModule",{value:!0});var a=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),l=function(t,e,i){for(var n=!0;n;){var r=t,o=e,s=i;n=!1,null===r&&(r=Function.prototype);var a=Object.getOwnPropertyDescriptor(r,o);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=o,i=s,n=!0,a=u=void 0}},u=t("./resolve-url"),c=r(u),d=t("./xhr"),p=r(d),h="undefined"!=typeof window?window.videojs:"undefined"!=typeof n?n.videojs:null,f=t("./stream"),v=r(f),y=t("./m3u8"),g=r(y),m=function(t,e){for(var i=!1,n=(0,h.mergeOptions)(t,{}),r=t.playlists.length,o=void 0;r--;)if(o=n.playlists[r],o.uri===e.uri){if(o.segments&&e.segments&&o.segments.length===e.segments.length&&o.mediaSequence===e.mediaSequence)continue;n.playlists[r]=(0,h.mergeOptions)(o,e),n.playlists[e.uri]=n.playlists[r],o.segments&&(n.playlists[r].segments=b(o.segments,e.segments,e.mediaSequence-o.mediaSequence)),
i=!0}return i?n:null},b=function(t,e,i){var n=e.slice(),r=void 0,o=void 0;for(i=i||0,r=Math.min(t.length,e.length+i),o=i;r>o;o++)n[o-i]=(0,h.mergeOptions)(t[o],n[o-i]);return n},_=function(t){function e(t,i){o(this,e),l(Object.getPrototypeOf(e.prototype),"constructor",this).call(this);var n=this,r=void 0,s=void 0,a=void 0,u=void 0,d=void 0;if(this.trackExpiredTime_=!1,!t)throw new Error("A non-empty playlist URL is required");u=function(t,e,i){n.setBandwidth(a||t),a=null,i&&(n.state=i),n.error={playlist:n.master.playlists[e],status:t.status,message:"HLS playlist request error at URL: "+e,responseText:t.responseText,code:t.status>=500?4:2},n.trigger("error")},d=function(t,e){var i=void 0,r=void 0,o=void 0;n.setBandwidth(a||t),a=null,n.state="HAVE_METADATA",i=new g["default"].Parser,i.push(t.responseText),i.end(),i.manifest.uri=e,o=m(n.master,i.manifest),r=1e3*(i.manifest.targetDuration||10),o?(n.master=o,n.updateMediaPlaylist_(i.manifest)):r/=2,n.media().endList||(window.clearTimeout(s),s=window.setTimeout(function(){n.trigger("mediaupdatetimeout")},r)),n.trigger("loadedplaylist")},n.state="HAVE_NOTHING",this.expired_=0,r=this.dispose,n.dispose=function(){a&&(a.onreadystatechange=null,a.abort(),a=null),window.clearTimeout(s),r.call(this)},n.media=function(t){var e=n.state,r=void 0;if(!t)return n.media_;if("HAVE_NOTHING"===n.state)throw new Error("Cannot switch media playlist from "+n.state);if("string"==typeof t){if(!n.master.playlists[t])throw new Error("Unknown playlist URI: "+t);t=n.master.playlists[t]}if(r=!n.media_||t.uri!==n.media_.uri,n.master.playlists[t.uri].endList)return a&&(a.onreadystatechange=null,a.abort(),a=null),n.state="HAVE_METADATA",n.media_=t,void(r&&n.trigger("mediachange"));if(r){if(n.state="SWITCHING_MEDIA",a){if((0,c["default"])(n.master.uri,t.uri)===a.url)return;a.onreadystatechange=null,a.abort(),a=null}a=(0,p["default"])({uri:(0,c["default"])(n.master.uri,t.uri),withCredentials:i},function(i,r){return i?u(r,t.uri,e):(d(r,t.uri),void("HAVE_MASTER"===e?n.trigger("loadedmetadata"):n.trigger("mediachange")))})}},n.setBandwidth=function(t){n.bandwidth=t.bandwidth},n.on("firstplay",function(){this.trackExpiredTime_=!0}),n.on("mediaupdatetimeout",function(){"HAVE_METADATA"===n.state&&(n.state="HAVE_CURRENT_METADATA",a=(0,p["default"])({uri:(0,c["default"])(n.master.uri,n.media().uri),withCredentials:i},function(t,e){return t?u(e,n.media().uri):void d(e,n.media().uri)}))}),a=(0,p["default"])({uri:t,withCredentials:i},function(e,i){var r=void 0,o=void 0;if(a=null,e)return n.error={status:i.status,message:"HLS playlist request error at URL: "+t,responseText:i.responseText,code:2},n.trigger("error");if(r=new g["default"].Parser,r.push(i.responseText),r.end(),n.state="HAVE_MASTER",r.manifest.uri=t,r.manifest.playlists){for(n.master=r.manifest,o=n.master.playlists.length;o--;)n.master.playlists[n.master.playlists[o].uri]=n.master.playlists[o];return n.trigger("loadedplaylist"),void(a||n.media(r.manifest.playlists[0]))}return n.master={uri:window.location.href,playlists:[{uri:t}]},n.master.playlists[t]=n.master.playlists[0],d(i,t),n.trigger("loadedmetadata")})}return s(e,t),a(e,[{key:"updateMediaPlaylist_",value:function(t){var e=void 0,i=void 0,n=void 0;if(e=this.media_,this.media_=this.master.playlists[t.uri],e&&this.trackExpiredTime_&&t.uri===e.uri){if(t.segments.length){if(void 0!==t.segments[0].start)return void(this.expired_=t.segments[0].start);if(void 0!==t.segments[0].end)return void(this.expired_=t.segments[0].end-t.segments[0].duration)}for(i=t.mediaSequence-e.mediaSequence-1;i>=0;i--)if(n=e.segments[i]){if(void 0!==n.end)return void(this.expired_=n.end);if(void 0!==n.start)return void(this.expired_=n.start+n.duration);this.expired_+=n.duration}else this.expired_+=e.targetDuration||10}}},{key:"getMediaIndexForTime_",value:function(t){var e=void 0,i=void 0,n=t,r=this.media_.segments.length,o=r-1,s=void 0,a=void 0,l=void 0,u=void 0;if(!this.media_)return 0;if(0>t)return 0;for(e=0;r>e;e++)if(i=this.media_.segments[e],i.end){if(i.end>t){u=i.end,a=e;break}l=i.end,s=e+1}if(void 0!==s){for(t-=l,e=s;(a||r)>e;e++)if(i=this.media_.segments[e],t-=i.duration,0>t)return e;return e>=a?s+Math.floor((n-l)/(u-l)*(a-s)):o}if(void 0!==a){for(t=u-t,e=a;e>=0;e--)if(i=this.media_.segments[e],t-=i.duration,0>t)return e;return 0===t?0:-1}if(t-=this.expired_,0>t)return-1;for(e=0;r>e;e++)if(i=this.media_.segments[e],t-=i.duration,0>t)return e;return o}}]),e}(v["default"]);i["default"]=_,e.exports=i["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./m3u8":5,"./resolve-url":11,"./stream":12,"./xhr":13}],10:[function(t,e,i){(function(t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var e="undefined"!=typeof window?window.videojs:"undefined"!=typeof t?t.videojs:null,n=function(t,e){var i=0,n=e-t.mediaSequence,r=t.segments[n];if(r){if("undefined"!=typeof r.start)return{result:r.start,precise:!0};if("undefined"!=typeof r.end)return{result:r.end-r.duration,precise:!0}}for(;n--;){if(r=t.segments[n],"undefined"!=typeof r.end)return{result:i+r.end,precise:!0};if(i+=r.duration,"undefined"!=typeof r.start)return{result:i+r.start,precise:!0}}return{result:i,precise:!1}},r=function(t,e){for(var i=0,n=void 0,r=e-t.mediaSequence;r<t.segments.length;r++){if(n=t.segments[r],"undefined"!=typeof n.start)return{result:n.start-i,precise:!0};if(i+=n.duration,"undefined"!=typeof n.end)return{result:n.end-i,precise:!0}}return{result:-1,precise:!1}},o=function(t,e){var i=void 0,o=void 0;return"undefined"==typeof e&&(e=t.mediaSequence+t.segments.length),e<t.mediaSequence?0:(i=n(t,e),i.precise?i.result:(o=r(t,e),o.precise?o.result:i.result))},s=function(t,e,i){if(!t)return 0;if("undefined"==typeof i&&(i=!0),"undefined"==typeof e){if(t.totalDuration)return t.totalDuration;if(!t.endList)return window.Infinity}return o(t,e,i)};i.duration=s;var a=function(t){var i=void 0,n=void 0;return t.segments?t.endList?(0,e.createTimeRange)(0,s(t)):(i=o(t,t.mediaSequence),n=o(t,t.mediaSequence+Math.max(0,t.segments.length-3)),(0,e.createTimeRange)(i,n)):(0,e.createTimeRange)()};i.seekable=a,i["default"]={duration:s,seekable:a}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],11:[function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(i,"__esModule",{value:!0});var r=t("global/document"),o=n(r),s=function(t,e){var i=o["default"].querySelector("base"),n=o["default"].querySelector("head"),r=o["default"].createElement("a"),s=i,a=void 0,l=void 0;return i?a=i.href:s=n.appendChild(o["default"].createElement("base")),s.href=t,r.href=e,l=r.href,i?i.href=a:n.removeChild(s),l};i["default"]=s,e.exports=i["default"]},{"global/document":15}],12:[function(t,e,i){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(i,"__esModule",{value:!0});var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),o=function(){function t(){n(this,t),this.init()}return r(t,[{key:"init",value:function(){this.listeners={}}},{key:"on",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(e)}},{key:"off",value:function(t,e){var i=void 0;return!!this.listeners[t]&&(i=this.listeners[t].indexOf(e),this.listeners[t].splice(i,1),i>-1)}},{key:"trigger",value:function(t){var e=void 0,i=void 0,n=void 0,r=void 0;if(e=this.listeners[t])if(2===arguments.length)for(n=e.length,i=0;n>i;++i)e[i].call(this,arguments[1]);else for(r=Array.prototype.slice.call(arguments,1),n=e.length,i=0;n>i;++i)e[i].apply(this,r)}},{key:"dispose",value:function(){this.listeners={}}},{key:"pipe",value:function(t){this.on("data",function(e){t.push(e)})}}]),t}();i["default"]=o,e.exports=i["default"]},{}],13:[function(t,e,i){(function(t){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n="undefined"!=typeof window?window.videojs:"undefined"!=typeof t?t.videojs:null,r=function(t,e){t=(0,n.mergeOptions)({timeout:45e3},t);var i=(0,n.xhr)(t,function(t,n){!t&&i.response&&(i.responseTime=(new Date).getTime(),i.roundTripTime=i.responseTime-i.requestTime,i.bytesReceived=i.response.byteLength||i.response.length,i.bandwidth||(i.bandwidth=Math.floor(i.bytesReceived/i.roundTripTime*8*1e3))),t||i.timedout?i.timedout=i.timedout||"ETIMEDOUT"===t.code:i.timedout=!1,t||200===n.statusCode||206===n.statusCode||0===n.statusCode||(t=new Error("XHR Failed with a response of: "+(i&&(i.response||i.responseText)))),e(t,i)});return i.requestTime=(new Date).getTime(),i};i["default"]=r,e.exports=i["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(t,e,i){},{}],15:[function(t,e,i){(function(i){var n="undefined"!=typeof i?i:"undefined"!=typeof window?window:{},r=t("min-document");if("undefined"!=typeof document)e.exports=document;else{var o=n["__GLOBAL_DOCUMENT_CACHE@4"];o||(o=n["__GLOBAL_DOCUMENT_CACHE@4"]=r),e.exports=o}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"min-document":14}],16:[function(t,e,i){"use strict";var n;e.exports=function(t){var e=n[t.byteLength%16||0],i=new Uint8Array(t.byteLength+e.length);return i.set(t),i.set(e,t.byteLength),i},n=[[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],[14,14,14,14,14,14,14,14,14,14,14,14,14,14],[13,13,13,13,13,13,13,13,13,13,13,13,13],[12,12,12,12,12,12,12,12,12,12,12,12],[11,11,11,11,11,11,11,11,11,11,11],[10,10,10,10,10,10,10,10,10,10],[9,9,9,9,9,9,9,9,9],[8,8,8,8,8,8,8,8],[7,7,7,7,7,7,7],[6,6,6,6,6,6],[5,5,5,5,5],[4,4,4,4],[3,3,3],[2,2],[1]]},{}],17:[function(t,e,i){"use strict";i.pad=t("./pad.js"),i.unpad=t("./unpad.js")},{"./pad.js":16,"./unpad.js":18}],18:[function(t,e,i){"use strict";e.exports=function(t){return t.subarray(0,t.byteLength-t[t.byteLength-1])}},{}],19:[function(t,e,i){(function(e){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}var n=t("./m3u8"),r=i(n),o=t("./stream"),s=i(o),a="undefined"!=typeof window?window.videojs:"undefined"!=typeof e?e.videojs:null,l=i(a),u=t("./decrypter"),c=t("./playlist"),d=i(c),p=t("./playlist-loader"),h=i(p),f=t("./xhr"),v=i(f);"undefined"==typeof window.videojs.Hls&&(l["default"].Hls={}),l["default"].Hls.Stream=s["default"],l["default"].m3u8=r["default"],l["default"].Hls.decrypt=u.decrypt,l["default"].Hls.Decrypter=u.Decrypter,l["default"].Hls.AsyncStream=u.AsyncStream,l["default"].Hls.xhr=v["default"],l["default"].Hls.Playlist=d["default"],l["default"].Hls.PlaylistLoader=h["default"]}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./decrypter":4,"./m3u8":5,"./playlist":10,"./playlist-loader":9,"./stream":12,"./xhr":13}]},{},[19])(19)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
